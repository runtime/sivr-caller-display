{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst opn = require(\"open\");\n\nconst qs = require(\"querystring\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst gcp = require(\"../gcp\");\n\nconst getProjectId = require(\"../getProjectId\");\n\nconst logger = require(\"../logger\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nmodule.exports = new command_1.Command(\"functions:log\").description(\"read logs from deployed functions\").option(\"--only <function_names>\", 'only show logs of specified, comma-seperated functions (e.g. \"funcA,funcB\")').option(\"-n, --lines <num_lines>\", \"specify number of log lines to fetch\").option(\"--open\", \"open logs page in web browser\").before(requirePermissions_1.requirePermissions, [\"logging.logEntries.list\", \"logging.logs.list\"]).action(options => __awaiter(this, void 0, void 0, function* () {\n  try {\n    const projectId = getProjectId(options, false);\n    let apiFilter = `resource.type=\"cloud_function\"`;\n\n    if (options.only) {\n      const funcNames = options.only.split(\",\");\n\n      const apiFuncFilters = _.map(funcNames, funcName => {\n        return `resource.labels.function_name=\"${funcName}\"`;\n      });\n\n      apiFilter += `\\n(${apiFuncFilters.join(\" OR \")})`;\n    }\n\n    if (options.open) {\n      const url = `https://console.developers.google.com/logs/viewer?advancedFilter=${qs.escape(apiFilter)}&project=${projectId}`;\n      opn(url);\n      return;\n    }\n\n    const entries = yield gcp.cloudlogging.listEntries(projectId, apiFilter, options.lines || 35, \"desc\");\n\n    for (let i = _.size(entries) - 1; i >= 0; i--) {\n      const entry = entries[i];\n      logger.info(entry.timestamp, _.get(entry, \"severity\", \"?\").substring(0, 1), _.get(entry, \"resource.labels.function_name\") + \":\", _.get(entry, \"textPayload\", \"\"));\n    }\n\n    if (_.isEmpty(entries)) {\n      logger.info(\"No log entries found.\");\n    }\n\n    return entries;\n  } catch (err) {\n    throw new error_1.FirebaseError(`Failed to list log entries ${err.message}`, {\n      exit: 1\n    });\n  }\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/functions-log.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","opn","qs","command_1","error_1","gcp","getProjectId","logger","requirePermissions_1","module","Command","description","option","before","requirePermissions","action","options","projectId","apiFilter","only","funcNames","split","apiFuncFilters","map","funcName","join","open","url","escape","entries","cloudlogging","listEntries","lines","i","size","entry","info","timestamp","get","substring","isEmpty","err","FirebaseError","message","exit"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst opn = require(\"open\");\nconst qs = require(\"querystring\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst gcp = require(\"../gcp\");\nconst getProjectId = require(\"../getProjectId\");\nconst logger = require(\"../logger\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nmodule.exports = new command_1.Command(\"functions:log\")\n    .description(\"read logs from deployed functions\")\n    .option(\"--only <function_names>\", 'only show logs of specified, comma-seperated functions (e.g. \"funcA,funcB\")')\n    .option(\"-n, --lines <num_lines>\", \"specify number of log lines to fetch\")\n    .option(\"--open\", \"open logs page in web browser\")\n    .before(requirePermissions_1.requirePermissions, [\"logging.logEntries.list\", \"logging.logs.list\"])\n    .action((options) => __awaiter(this, void 0, void 0, function* () {\n    try {\n        const projectId = getProjectId(options, false);\n        let apiFilter = `resource.type=\"cloud_function\"`;\n        if (options.only) {\n            const funcNames = options.only.split(\",\");\n            const apiFuncFilters = _.map(funcNames, (funcName) => {\n                return `resource.labels.function_name=\"${funcName}\"`;\n            });\n            apiFilter += `\\n(${apiFuncFilters.join(\" OR \")})`;\n        }\n        if (options.open) {\n            const url = `https://console.developers.google.com/logs/viewer?advancedFilter=${qs.escape(apiFilter)}&project=${projectId}`;\n            opn(url);\n            return;\n        }\n        const entries = yield gcp.cloudlogging.listEntries(projectId, apiFilter, options.lines || 35, \"desc\");\n        for (let i = _.size(entries) - 1; i >= 0; i--) {\n            const entry = entries[i];\n            logger.info(entry.timestamp, _.get(entry, \"severity\", \"?\").substring(0, 1), _.get(entry, \"resource.labels.function_name\") + \":\", _.get(entry, \"textPayload\", \"\"));\n        }\n        if (_.isEmpty(entries)) {\n            logger.info(\"No log entries found.\");\n        }\n        return entries;\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Failed to list log entries ${err.message}`, { exit: 1 });\n    }\n}));\n"]},"metadata":{},"sourceType":"script"}