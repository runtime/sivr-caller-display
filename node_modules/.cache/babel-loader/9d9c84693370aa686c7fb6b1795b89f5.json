{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"../command\"),\n    Command = _require.Command;\n\nvar logger = require(\"../logger\");\n\nvar configstore = require(\"../configstore\");\n\nvar clc = require(\"cli-color\");\n\nvar utils = require(\"../utils\");\n\nvar _require2 = require(\"../prompt\"),\n    prompt = _require2.prompt;\n\nvar auth = require(\"../auth\");\n\nmodule.exports = new Command(\"login\").description(\"log the CLI into Firebase\").option(\"--no-localhost\", \"copy and paste a code instead of starting a local server for authentication\").option(\"--reauth\", \"force reauthentication even if already logged in\").action(function (options) {\n  if (options.nonInteractive) {\n    return utils.reject(\"Cannot run login in non-interactive mode. See \" + clc.bold(\"login:ci\") + \" to generate a token for use in non-interactive environments.\", {\n      exit: 1\n    });\n  }\n\n  var user = configstore.get(\"user\");\n  var tokens = configstore.get(\"tokens\");\n\n  if (user && tokens && !options.reauth) {\n    logger.info(\"Already logged in as\", clc.bold(user.email));\n    return Promise.resolve(user);\n  }\n\n  utils.logBullet(\"Firebase optionally collects CLI usage and error reporting information to help improve our products. Data is collected in accordance with Google's privacy policy (https://policies.google.com/privacy) and is not used to identify you.\\n\");\n  return prompt(options, [{\n    type: \"confirm\",\n    name: \"collectUsage\",\n    message: \"Allow Firebase to collect CLI usage and error reporting information?\"\n  }]).then(function () {\n    configstore.set(\"usage\", options.collectUsage);\n\n    if (options.collectUsage) {\n      utils.logBullet(\"To change your data collection preference at any time, run `firebase logout` and log in again.\");\n    }\n\n    return auth.login(options.localhost);\n  }).then(function (result) {\n    configstore.set(\"user\", result.user);\n    configstore.set(\"tokens\", result.tokens);\n    configstore.set(\"loginScopes\", result.scopes);\n    configstore.del(\"session\");\n    logger.info();\n    utils.logSuccess(\"Success! Logged in as \" + clc.bold(result.user.email));\n    return auth;\n  });\n});","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/login.js"],"names":["require","Command","logger","configstore","clc","utils","prompt","auth","module","exports","description","option","action","options","nonInteractive","reject","bold","exit","user","get","tokens","reauth","info","email","Promise","resolve","logBullet","type","name","message","then","set","collectUsage","login","localhost","result","scopes","del","logSuccess"],"mappings":"AAAA;;eACkBA,OAAO,CAAC,YAAD,C;IAAnBC,O,YAAAA,O;;AACN,IAAIC,MAAM,GAAGF,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAII,GAAG,GAAGJ,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAAnB;;gBACiBA,OAAO,CAAC,WAAD,C;IAAlBM,M,aAAAA,M;;AACN,IAAIC,IAAI,GAAGP,OAAO,CAAC,SAAD,CAAlB;;AACAQ,MAAM,CAACC,OAAP,GAAiB,IAAIR,OAAJ,CAAY,OAAZ,EACZS,WADY,CACA,2BADA,EAEZC,MAFY,CAEL,gBAFK,EAEa,6EAFb,EAGZA,MAHY,CAGL,UAHK,EAGO,kDAHP,EAIZC,MAJY,CAIL,UAAUC,OAAV,EAAmB;AAC3B,MAAIA,OAAO,CAACC,cAAZ,EAA4B;AACxB,WAAOT,KAAK,CAACU,MAAN,CAAa,mDAChBX,GAAG,CAACY,IAAJ,CAAS,UAAT,CADgB,GAEhB,+DAFG,EAE8D;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAF9D,CAAP;AAGH;;AACD,MAAIC,IAAI,GAAGf,WAAW,CAACgB,GAAZ,CAAgB,MAAhB,CAAX;AACA,MAAIC,MAAM,GAAGjB,WAAW,CAACgB,GAAZ,CAAgB,QAAhB,CAAb;;AACA,MAAID,IAAI,IAAIE,MAAR,IAAkB,CAACP,OAAO,CAACQ,MAA/B,EAAuC;AACnCnB,IAAAA,MAAM,CAACoB,IAAP,CAAY,sBAAZ,EAAoClB,GAAG,CAACY,IAAJ,CAASE,IAAI,CAACK,KAAd,CAApC;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBP,IAAhB,CAAP;AACH;;AACDb,EAAAA,KAAK,CAACqB,SAAN,CAAgB,4OAAhB;AACA,SAAOpB,MAAM,CAACO,OAAD,EAAU,CACnB;AACIc,IAAAA,IAAI,EAAE,SADV;AAEIC,IAAAA,IAAI,EAAE,cAFV;AAGIC,IAAAA,OAAO,EAAE;AAHb,GADmB,CAAV,CAAN,CAOFC,IAPE,CAOG,YAAY;AAClB3B,IAAAA,WAAW,CAAC4B,GAAZ,CAAgB,OAAhB,EAAyBlB,OAAO,CAACmB,YAAjC;;AACA,QAAInB,OAAO,CAACmB,YAAZ,EAA0B;AACtB3B,MAAAA,KAAK,CAACqB,SAAN,CAAgB,gGAAhB;AACH;;AACD,WAAOnB,IAAI,CAAC0B,KAAL,CAAWpB,OAAO,CAACqB,SAAnB,CAAP;AACH,GAbM,EAcFJ,IAdE,CAcG,UAAUK,MAAV,EAAkB;AACxBhC,IAAAA,WAAW,CAAC4B,GAAZ,CAAgB,MAAhB,EAAwBI,MAAM,CAACjB,IAA/B;AACAf,IAAAA,WAAW,CAAC4B,GAAZ,CAAgB,QAAhB,EAA0BI,MAAM,CAACf,MAAjC;AACAjB,IAAAA,WAAW,CAAC4B,GAAZ,CAAgB,aAAhB,EAA+BI,MAAM,CAACC,MAAtC;AACAjC,IAAAA,WAAW,CAACkC,GAAZ,CAAgB,SAAhB;AACAnC,IAAAA,MAAM,CAACoB,IAAP;AACAjB,IAAAA,KAAK,CAACiC,UAAN,CAAiB,2BAA2BlC,GAAG,CAACY,IAAJ,CAASmB,MAAM,CAACjB,IAAP,CAAYK,KAArB,CAA5C;AACA,WAAOhB,IAAP;AACH,GAtBM,CAAP;AAuBH,CAxCgB,CAAjB","sourcesContent":["\"use strict\";\nvar { Command } = require(\"../command\");\nvar logger = require(\"../logger\");\nvar configstore = require(\"../configstore\");\nvar clc = require(\"cli-color\");\nvar utils = require(\"../utils\");\nvar { prompt } = require(\"../prompt\");\nvar auth = require(\"../auth\");\nmodule.exports = new Command(\"login\")\n    .description(\"log the CLI into Firebase\")\n    .option(\"--no-localhost\", \"copy and paste a code instead of starting a local server for authentication\")\n    .option(\"--reauth\", \"force reauthentication even if already logged in\")\n    .action(function (options) {\n    if (options.nonInteractive) {\n        return utils.reject(\"Cannot run login in non-interactive mode. See \" +\n            clc.bold(\"login:ci\") +\n            \" to generate a token for use in non-interactive environments.\", { exit: 1 });\n    }\n    var user = configstore.get(\"user\");\n    var tokens = configstore.get(\"tokens\");\n    if (user && tokens && !options.reauth) {\n        logger.info(\"Already logged in as\", clc.bold(user.email));\n        return Promise.resolve(user);\n    }\n    utils.logBullet(\"Firebase optionally collects CLI usage and error reporting information to help improve our products. Data is collected in accordance with Google's privacy policy (https://policies.google.com/privacy) and is not used to identify you.\\n\");\n    return prompt(options, [\n        {\n            type: \"confirm\",\n            name: \"collectUsage\",\n            message: \"Allow Firebase to collect CLI usage and error reporting information?\",\n        },\n    ])\n        .then(function () {\n        configstore.set(\"usage\", options.collectUsage);\n        if (options.collectUsage) {\n            utils.logBullet(\"To change your data collection preference at any time, run `firebase logout` and log in again.\");\n        }\n        return auth.login(options.localhost);\n    })\n        .then(function (result) {\n        configstore.set(\"user\", result.user);\n        configstore.set(\"tokens\", result.tokens);\n        configstore.set(\"loginScopes\", result.scopes);\n        configstore.del(\"session\");\n        logger.info();\n        utils.logSuccess(\"Success! Logged in as \" + clc.bold(result.user.email));\n        return auth;\n    });\n});\n"]},"metadata":{},"sourceType":"script"}