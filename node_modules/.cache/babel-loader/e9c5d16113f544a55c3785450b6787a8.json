{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst gcp = require(\"./gcp\");\n\nconst logger = require(\"./logger\");\n\nconst error_1 = require(\"./error\");\n\nconst utils = require(\"./utils\");\n\nconst prompt_1 = require(\"./prompt\");\n\nconst QUOTA_EXCEEDED_STATUS_CODE = 429;\nconst RULESET_COUNT_LIMIT = 1000;\nconst RULESETS_TO_GC = 10;\nvar RulesetServiceType;\n\n(function (RulesetServiceType) {\n  RulesetServiceType[\"CLOUD_FIRESTORE\"] = \"cloud.firestore\";\n  RulesetServiceType[\"FIREBASE_STORAGE\"] = \"firebase.storage\";\n})(RulesetServiceType = exports.RulesetServiceType || (exports.RulesetServiceType = {}));\n\nconst RulesetType = {\n  [RulesetServiceType.CLOUD_FIRESTORE]: \"firestore\",\n  [RulesetServiceType.FIREBASE_STORAGE]: \"storage\"\n};\n\nclass RulesDeploy {\n  constructor(options, type) {\n    this.options = options;\n    this.type = type;\n    this.project = options.project;\n    this.rulesFiles = {};\n    this.rulesetNames = {};\n  }\n\n  addFile(path) {\n    const fullPath = this.options.config.path(path);\n    let src;\n\n    try {\n      src = fs.readFileSync(fullPath, \"utf8\");\n    } catch (e) {\n      logger.debug(\"[rules read error]\", e.stack);\n      throw new error_1.FirebaseError(\"Error reading rules file \" + clc.bold(path));\n    }\n\n    this.rulesFiles[path] = [{\n      name: path,\n      content: src\n    }];\n  }\n\n  compile() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield Promise.all(Object.keys(this.rulesFiles).map(filename => {\n        return this.compileRuleset(filename, this.rulesFiles[filename]);\n      }));\n    });\n  }\n\n  getCurrentRules(service) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const latestName = yield gcp.rules.getLatestRulesetName(this.options.project, service);\n      let latestContent = null;\n\n      if (latestName) {\n        latestContent = yield gcp.rules.getRulesetContent(latestName);\n      }\n\n      return {\n        latestName,\n        latestContent\n      };\n    });\n  }\n\n  createRulesets(service) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const createdRulesetNames = [];\n\n      const _ref = yield this.getCurrentRules(service),\n            latestRulesetName = _ref.latestName,\n            latestRulesetContent = _ref.latestContent;\n\n      const newRulesetsByFilename = new Map();\n\n      for (const filename of Object.keys(this.rulesFiles)) {\n        const files = this.rulesFiles[filename];\n\n        if (latestRulesetName && _.isEqual(files, latestRulesetContent)) {\n          utils.logBullet(`${clc.bold.cyan(RulesetType[this.type] + \":\")} latest version of ${clc.bold(filename)} already up to date, skipping upload...`);\n          this.rulesetNames[filename] = latestRulesetName;\n          continue;\n        }\n\n        utils.logBullet(`${clc.bold.cyan(RulesetType[this.type] + \":\")} uploading rules ${clc.bold(filename)}...`);\n        newRulesetsByFilename.set(filename, gcp.rules.createRuleset(this.options.project, files));\n      }\n\n      try {\n        yield Promise.all(newRulesetsByFilename.values());\n\n        for (const _ref2 of newRulesetsByFilename) {\n          var _ref3 = _slicedToArray(_ref2, 2);\n\n          const filename = _ref3[0];\n          const rulesetName = _ref3[1];\n          this.rulesetNames[filename] = yield rulesetName;\n          createdRulesetNames.push((yield rulesetName));\n        }\n      } catch (err) {\n        if (err.status !== QUOTA_EXCEEDED_STATUS_CODE) {\n          throw err;\n        }\n\n        utils.logBullet(clc.bold.yellow(RulesetType[this.type] + \":\") + \" quota exceeded error while uploading rules\");\n        const history = yield gcp.rules.listAllRulesets(this.options.project);\n\n        if (history.length > RULESET_COUNT_LIMIT) {\n          const answers = yield prompt_1.prompt({\n            confirm: this.options.force\n          }, [{\n            type: \"confirm\",\n            name: \"confirm\",\n            message: `You have ${history.length} rules, do you want to delete the oldest ${RULESETS_TO_GC} to free up space?`,\n            default: false\n          }]);\n\n          if (answers.confirm) {\n            const releases = yield gcp.rules.listAllReleases(this.options.project);\n\n            const unreleased = _.reject(history, ruleset => {\n              return !!releases.find(release => release.rulesetName === ruleset.name);\n            });\n\n            const entriesToDelete = unreleased.reverse().slice(0, RULESETS_TO_GC);\n\n            for (const entry of entriesToDelete) {\n              yield gcp.rules.deleteRuleset(this.options.project, gcp.rules.getRulesetId(entry));\n              logger.debug(`[rules] Deleted ${entry.name}`);\n            }\n\n            utils.logBullet(clc.bold.yellow(RulesetType[this.type] + \":\") + \" retrying rules upload\");\n            return this.createRulesets(service);\n          }\n        }\n      }\n\n      return createdRulesetNames;\n    });\n  }\n\n  release(filename, resourceName, subResourceName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (resourceName === RulesetServiceType.FIREBASE_STORAGE && !subResourceName) {\n        throw new error_1.FirebaseError(`Cannot release resource type \"${resourceName}\"`);\n      }\n\n      yield gcp.rules.updateOrCreateRelease(this.options.project, this.rulesetNames[filename], resourceName === RulesetServiceType.FIREBASE_STORAGE ? `${resourceName}/${subResourceName}` : resourceName);\n      utils.logSuccess(`${clc.bold.green(RulesetType[this.type] + \":\")} released rules ${clc.bold(filename)} to ${clc.bold(resourceName)}`);\n    });\n  }\n\n  compileRuleset(filename, files) {\n    return __awaiter(this, void 0, void 0, function* () {\n      utils.logBullet(`${clc.bold.cyan(this.type + \":\")} checking ${clc.bold(filename)} for compilation errors...`);\n      const response = yield gcp.rules.testRuleset(this.options.project, files);\n\n      if (_.get(response, \"body.issues\", []).length) {\n        const warnings = [];\n        const errors = [];\n        response.body.issues.forEach(issue => {\n          const issueMessage = `[${issue.severity.substring(0, 1)}] ${issue.sourcePosition.line}:${issue.sourcePosition.column} - ${issue.description}`;\n\n          if (issue.severity === \"ERROR\") {\n            errors.push(issueMessage);\n          } else {\n            warnings.push(issueMessage);\n          }\n        });\n\n        if (warnings.length > 0) {\n          warnings.forEach(warning => {\n            utils.logWarning(warning);\n          });\n        }\n\n        if (errors.length > 0) {\n          const add = errors.length === 1 ? \"\" : \"s\";\n          const message = `Compilation error${add} in ${clc.bold(filename)}:\\n${errors.join(\"\\n\")}`;\n          throw new error_1.FirebaseError(message, {\n            exit: 1\n          });\n        }\n      }\n\n      utils.logSuccess(`${clc.bold.green(this.type + \":\")} rules file ${clc.bold(filename)} compiled successfully`);\n    });\n  }\n\n}\n\nexports.RulesDeploy = RulesDeploy;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/rulesDeploy.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","clc","fs","gcp","logger","error_1","utils","prompt_1","QUOTA_EXCEEDED_STATUS_CODE","RULESET_COUNT_LIMIT","RULESETS_TO_GC","RulesetServiceType","RulesetType","CLOUD_FIRESTORE","FIREBASE_STORAGE","RulesDeploy","constructor","options","type","project","rulesFiles","rulesetNames","addFile","path","fullPath","config","src","readFileSync","debug","stack","FirebaseError","bold","name","content","compile","all","keys","map","filename","compileRuleset","getCurrentRules","service","latestName","rules","getLatestRulesetName","latestContent","getRulesetContent","createRulesets","createdRulesetNames","latestRulesetName","latestRulesetContent","newRulesetsByFilename","Map","files","isEqual","logBullet","cyan","set","createRuleset","values","rulesetName","push","err","status","yellow","history","listAllRulesets","length","answers","prompt","confirm","force","message","default","releases","listAllReleases","unreleased","ruleset","find","release","entriesToDelete","reverse","slice","entry","deleteRuleset","getRulesetId","resourceName","subResourceName","updateOrCreateRelease","logSuccess","green","response","testRuleset","get","warnings","errors","body","issues","forEach","issue","issueMessage","severity","substring","sourcePosition","line","column","description","warning","logWarning","add","join","exit"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst gcp = require(\"./gcp\");\nconst logger = require(\"./logger\");\nconst error_1 = require(\"./error\");\nconst utils = require(\"./utils\");\nconst prompt_1 = require(\"./prompt\");\nconst QUOTA_EXCEEDED_STATUS_CODE = 429;\nconst RULESET_COUNT_LIMIT = 1000;\nconst RULESETS_TO_GC = 10;\nvar RulesetServiceType;\n(function (RulesetServiceType) {\n    RulesetServiceType[\"CLOUD_FIRESTORE\"] = \"cloud.firestore\";\n    RulesetServiceType[\"FIREBASE_STORAGE\"] = \"firebase.storage\";\n})(RulesetServiceType = exports.RulesetServiceType || (exports.RulesetServiceType = {}));\nconst RulesetType = {\n    [RulesetServiceType.CLOUD_FIRESTORE]: \"firestore\",\n    [RulesetServiceType.FIREBASE_STORAGE]: \"storage\",\n};\nclass RulesDeploy {\n    constructor(options, type) {\n        this.options = options;\n        this.type = type;\n        this.project = options.project;\n        this.rulesFiles = {};\n        this.rulesetNames = {};\n    }\n    addFile(path) {\n        const fullPath = this.options.config.path(path);\n        let src;\n        try {\n            src = fs.readFileSync(fullPath, \"utf8\");\n        }\n        catch (e) {\n            logger.debug(\"[rules read error]\", e.stack);\n            throw new error_1.FirebaseError(\"Error reading rules file \" + clc.bold(path));\n        }\n        this.rulesFiles[path] = [{ name: path, content: src }];\n    }\n    compile() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all(Object.keys(this.rulesFiles).map((filename) => {\n                return this.compileRuleset(filename, this.rulesFiles[filename]);\n            }));\n        });\n    }\n    getCurrentRules(service) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const latestName = yield gcp.rules.getLatestRulesetName(this.options.project, service);\n            let latestContent = null;\n            if (latestName) {\n                latestContent = yield gcp.rules.getRulesetContent(latestName);\n            }\n            return { latestName, latestContent };\n        });\n    }\n    createRulesets(service) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const createdRulesetNames = [];\n            const { latestName: latestRulesetName, latestContent: latestRulesetContent, } = yield this.getCurrentRules(service);\n            const newRulesetsByFilename = new Map();\n            for (const filename of Object.keys(this.rulesFiles)) {\n                const files = this.rulesFiles[filename];\n                if (latestRulesetName && _.isEqual(files, latestRulesetContent)) {\n                    utils.logBullet(`${clc.bold.cyan(RulesetType[this.type] + \":\")} latest version of ${clc.bold(filename)} already up to date, skipping upload...`);\n                    this.rulesetNames[filename] = latestRulesetName;\n                    continue;\n                }\n                utils.logBullet(`${clc.bold.cyan(RulesetType[this.type] + \":\")} uploading rules ${clc.bold(filename)}...`);\n                newRulesetsByFilename.set(filename, gcp.rules.createRuleset(this.options.project, files));\n            }\n            try {\n                yield Promise.all(newRulesetsByFilename.values());\n                for (const [filename, rulesetName] of newRulesetsByFilename) {\n                    this.rulesetNames[filename] = yield rulesetName;\n                    createdRulesetNames.push(yield rulesetName);\n                }\n            }\n            catch (err) {\n                if (err.status !== QUOTA_EXCEEDED_STATUS_CODE) {\n                    throw err;\n                }\n                utils.logBullet(clc.bold.yellow(RulesetType[this.type] + \":\") +\n                    \" quota exceeded error while uploading rules\");\n                const history = yield gcp.rules.listAllRulesets(this.options.project);\n                if (history.length > RULESET_COUNT_LIMIT) {\n                    const answers = yield prompt_1.prompt({\n                        confirm: this.options.force,\n                    }, [\n                        {\n                            type: \"confirm\",\n                            name: \"confirm\",\n                            message: `You have ${history.length} rules, do you want to delete the oldest ${RULESETS_TO_GC} to free up space?`,\n                            default: false,\n                        },\n                    ]);\n                    if (answers.confirm) {\n                        const releases = yield gcp.rules.listAllReleases(this.options.project);\n                        const unreleased = _.reject(history, (ruleset) => {\n                            return !!releases.find((release) => release.rulesetName === ruleset.name);\n                        });\n                        const entriesToDelete = unreleased.reverse().slice(0, RULESETS_TO_GC);\n                        for (const entry of entriesToDelete) {\n                            yield gcp.rules.deleteRuleset(this.options.project, gcp.rules.getRulesetId(entry));\n                            logger.debug(`[rules] Deleted ${entry.name}`);\n                        }\n                        utils.logBullet(clc.bold.yellow(RulesetType[this.type] + \":\") + \" retrying rules upload\");\n                        return this.createRulesets(service);\n                    }\n                }\n            }\n            return createdRulesetNames;\n        });\n    }\n    release(filename, resourceName, subResourceName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (resourceName === RulesetServiceType.FIREBASE_STORAGE && !subResourceName) {\n                throw new error_1.FirebaseError(`Cannot release resource type \"${resourceName}\"`);\n            }\n            yield gcp.rules.updateOrCreateRelease(this.options.project, this.rulesetNames[filename], resourceName === RulesetServiceType.FIREBASE_STORAGE\n                ? `${resourceName}/${subResourceName}`\n                : resourceName);\n            utils.logSuccess(`${clc.bold.green(RulesetType[this.type] + \":\")} released rules ${clc.bold(filename)} to ${clc.bold(resourceName)}`);\n        });\n    }\n    compileRuleset(filename, files) {\n        return __awaiter(this, void 0, void 0, function* () {\n            utils.logBullet(`${clc.bold.cyan(this.type + \":\")} checking ${clc.bold(filename)} for compilation errors...`);\n            const response = yield gcp.rules.testRuleset(this.options.project, files);\n            if (_.get(response, \"body.issues\", []).length) {\n                const warnings = [];\n                const errors = [];\n                response.body.issues.forEach((issue) => {\n                    const issueMessage = `[${issue.severity.substring(0, 1)}] ${issue.sourcePosition.line}:${issue.sourcePosition.column} - ${issue.description}`;\n                    if (issue.severity === \"ERROR\") {\n                        errors.push(issueMessage);\n                    }\n                    else {\n                        warnings.push(issueMessage);\n                    }\n                });\n                if (warnings.length > 0) {\n                    warnings.forEach((warning) => {\n                        utils.logWarning(warning);\n                    });\n                }\n                if (errors.length > 0) {\n                    const add = errors.length === 1 ? \"\" : \"s\";\n                    const message = `Compilation error${add} in ${clc.bold(filename)}:\\n${errors.join(\"\\n\")}`;\n                    throw new error_1.FirebaseError(message, { exit: 1 });\n                }\n            }\n            utils.logSuccess(`${clc.bold.green(this.type + \":\")} rules file ${clc.bold(filename)} compiled successfully`);\n        });\n    }\n}\nexports.RulesDeploy = RulesDeploy;\n"]},"metadata":{},"sourceType":"script"}