{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar ensureApiEnabled = require(\"../../ensureApiEnabled\");\n\nvar functionsConfig = require(\"../../functionsConfig\");\n\nvar getProjectId = require(\"../../getProjectId\");\n\nvar validator = require(\"./validate\");\n\nmodule.exports = function (context, options, payload) {\n  if (!options.config.has(\"functions\")) {\n    return Promise.resolve();\n  }\n\n  var sourceDirName = options.config.get(\"functions.source\");\n  var sourceDir = options.config.path(sourceDirName);\n  var projectDir = options.config.projectDir;\n  var functionNames = payload.functions;\n  var projectId = getProjectId(options);\n\n  try {\n    validator.functionsDirectoryExists(options.cwd, sourceDirName);\n    validator.functionNamesAreValid(functionNames);\n    validator.packageJsonIsValid(sourceDirName, sourceDir, projectDir);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n\n  return Promise.all([ensureApiEnabled.ensure(options.project, \"cloudfunctions.googleapis.com\", \"functions\"), ensureApiEnabled.check(projectId, \"runtimeconfig.googleapis.com\", \"runtimeconfig\", true)]).then(function (results) {\n    _.set(context, \"runtimeConfigEnabled\", results[1]);\n\n    return functionsConfig.getFirebaseConfig(options);\n  }).then(function (result) {\n    _.set(context, \"firebaseConfig\", result);\n  });\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/deploy/functions/prepare.js"],"names":["_","require","ensureApiEnabled","functionsConfig","getProjectId","validator","module","exports","context","options","payload","config","has","Promise","resolve","sourceDirName","get","sourceDir","path","projectDir","functionNames","functions","projectId","functionsDirectoryExists","cwd","functionNamesAreValid","packageJsonIsValid","e","reject","all","ensure","project","check","then","results","set","getFirebaseConfig","result"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,wBAAD,CAA9B;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,uBAAD,CAA7B;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,oBAAD,CAA1B;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,YAAD,CAAvB;;AACAK,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AAClD,MAAI,CAACD,OAAO,CAACE,MAAR,CAAeC,GAAf,CAAmB,WAAnB,CAAL,EAAsC;AAClC,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH;;AACD,MAAIC,aAAa,GAAGN,OAAO,CAACE,MAAR,CAAeK,GAAf,CAAmB,kBAAnB,CAApB;AACA,MAAIC,SAAS,GAAGR,OAAO,CAACE,MAAR,CAAeO,IAAf,CAAoBH,aAApB,CAAhB;AACA,MAAII,UAAU,GAAGV,OAAO,CAACE,MAAR,CAAeQ,UAAhC;AACA,MAAIC,aAAa,GAAGV,OAAO,CAACW,SAA5B;AACA,MAAIC,SAAS,GAAGlB,YAAY,CAACK,OAAD,CAA5B;;AACA,MAAI;AACAJ,IAAAA,SAAS,CAACkB,wBAAV,CAAmCd,OAAO,CAACe,GAA3C,EAAgDT,aAAhD;AACAV,IAAAA,SAAS,CAACoB,qBAAV,CAAgCL,aAAhC;AACAf,IAAAA,SAAS,CAACqB,kBAAV,CAA6BX,aAA7B,EAA4CE,SAA5C,EAAuDE,UAAvD;AACH,GAJD,CAKA,OAAOQ,CAAP,EAAU;AACN,WAAOd,OAAO,CAACe,MAAR,CAAeD,CAAf,CAAP;AACH;;AACD,SAAOd,OAAO,CAACgB,GAAR,CAAY,CACf3B,gBAAgB,CAAC4B,MAAjB,CAAwBrB,OAAO,CAACsB,OAAhC,EAAyC,+BAAzC,EAA0E,WAA1E,CADe,EAEf7B,gBAAgB,CAAC8B,KAAjB,CAAuBV,SAAvB,EAAkC,8BAAlC,EAAkE,eAAlE,EAAmF,IAAnF,CAFe,CAAZ,EAIFW,IAJE,CAIG,UAAUC,OAAV,EAAmB;AACzBlC,IAAAA,CAAC,CAACmC,GAAF,CAAM3B,OAAN,EAAe,sBAAf,EAAuC0B,OAAO,CAAC,CAAD,CAA9C;;AACA,WAAO/B,eAAe,CAACiC,iBAAhB,CAAkC3B,OAAlC,CAAP;AACH,GAPM,EAQFwB,IARE,CAQG,UAAUI,MAAV,EAAkB;AACxBrC,IAAAA,CAAC,CAACmC,GAAF,CAAM3B,OAAN,EAAe,gBAAf,EAAiC6B,MAAjC;AACH,GAVM,CAAP;AAWH,CA5BD","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar ensureApiEnabled = require(\"../../ensureApiEnabled\");\nvar functionsConfig = require(\"../../functionsConfig\");\nvar getProjectId = require(\"../../getProjectId\");\nvar validator = require(\"./validate\");\nmodule.exports = function (context, options, payload) {\n    if (!options.config.has(\"functions\")) {\n        return Promise.resolve();\n    }\n    var sourceDirName = options.config.get(\"functions.source\");\n    var sourceDir = options.config.path(sourceDirName);\n    var projectDir = options.config.projectDir;\n    var functionNames = payload.functions;\n    var projectId = getProjectId(options);\n    try {\n        validator.functionsDirectoryExists(options.cwd, sourceDirName);\n        validator.functionNamesAreValid(functionNames);\n        validator.packageJsonIsValid(sourceDirName, sourceDir, projectDir);\n    }\n    catch (e) {\n        return Promise.reject(e);\n    }\n    return Promise.all([\n        ensureApiEnabled.ensure(options.project, \"cloudfunctions.googleapis.com\", \"functions\"),\n        ensureApiEnabled.check(projectId, \"runtimeconfig.googleapis.com\", \"runtimeconfig\", true),\n    ])\n        .then(function (results) {\n        _.set(context, \"runtimeConfigEnabled\", results[1]);\n        return functionsConfig.getFirebaseConfig(options);\n    })\n        .then(function (result) {\n        _.set(context, \"firebaseConfig\", result);\n    });\n};\n"]},"metadata":{},"sourceType":"script"}