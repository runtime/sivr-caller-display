{"ast":null,"code":"'use strict';\n\nvar isWin = process.platform === 'win32';\n\nvar resolveCommand = require('./resolveCommand');\n\nvar isNode10 = process.version.indexOf('v0.10.') === 0;\n\nfunction notFoundError(command, syscall) {\n  var err;\n  err = new Error(syscall + ' ' + command + ' ENOENT');\n  err.code = err.errno = 'ENOENT';\n  err.syscall = syscall + ' ' + command;\n  return err;\n}\n\nfunction hookChildProcess(cp, parsed) {\n  var originalEmit;\n\n  if (!isWin) {\n    return;\n  }\n\n  originalEmit = cp.emit;\n\n  cp.emit = function (name, arg1) {\n    var err; // If emitting \"exit\" event and exit code is 1, we need to check if\n    // the command exists and emit an \"error\" instead\n    // See: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n\n    if (name === 'exit') {\n      err = verifyENOENT(arg1, parsed, 'spawn');\n\n      if (err) {\n        return originalEmit.call(cp, 'error', err);\n      }\n    }\n\n    return originalEmit.apply(cp, arguments);\n  };\n}\n\nfunction verifyENOENT(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawn');\n  }\n\n  return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n  if (isWin && status === 1 && !parsed.file) {\n    return notFoundError(parsed.original, 'spawnSync');\n  } // If we are in node 10, then we are using spawn-sync; if it exited\n  // with -1 it probably means that the command does not exist\n\n\n  if (isNode10 && status === -1) {\n    parsed.file = isWin ? parsed.file : resolveCommand(parsed.original);\n\n    if (!parsed.file) {\n      return notFoundError(parsed.original, 'spawnSync');\n    }\n  }\n\n  return null;\n}\n\nmodule.exports.hookChildProcess = hookChildProcess;\nmodule.exports.verifyENOENT = verifyENOENT;\nmodule.exports.verifyENOENTSync = verifyENOENTSync;\nmodule.exports.notFoundError = notFoundError;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/node_modules/cross-spawn/lib/enoent.js"],"names":["isWin","process","platform","resolveCommand","require","isNode10","version","indexOf","notFoundError","command","syscall","err","Error","code","errno","hookChildProcess","cp","parsed","originalEmit","emit","name","arg1","verifyENOENT","call","apply","arguments","status","file","original","verifyENOENTSync","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAAjC;;AACA,IAAIC,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAIC,QAAQ,GAAGJ,OAAO,CAACK,OAAR,CAAgBC,OAAhB,CAAwB,QAAxB,MAAsC,CAArD;;AAEA,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,OAAhC,EAAyC;AACrC,MAAIC,GAAJ;AAEAA,EAAAA,GAAG,GAAG,IAAIC,KAAJ,CAAUF,OAAO,GAAG,GAAV,GAAgBD,OAAhB,GAA0B,SAApC,CAAN;AACAE,EAAAA,GAAG,CAACE,IAAJ,GAAWF,GAAG,CAACG,KAAJ,GAAY,QAAvB;AACAH,EAAAA,GAAG,CAACD,OAAJ,GAAcA,OAAO,GAAG,GAAV,GAAgBD,OAA9B;AAEA,SAAOE,GAAP;AACH;;AAED,SAASI,gBAAT,CAA0BC,EAA1B,EAA8BC,MAA9B,EAAsC;AAClC,MAAIC,YAAJ;;AAEA,MAAI,CAAClB,KAAL,EAAY;AACR;AACH;;AAEDkB,EAAAA,YAAY,GAAGF,EAAE,CAACG,IAAlB;;AACAH,EAAAA,EAAE,CAACG,IAAH,GAAU,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC5B,QAAIV,GAAJ,CAD4B,CAG5B;AACA;AACA;;AACA,QAAIS,IAAI,KAAK,MAAb,EAAqB;AACjBT,MAAAA,GAAG,GAAGW,YAAY,CAACD,IAAD,EAAOJ,MAAP,EAAe,OAAf,CAAlB;;AAEA,UAAIN,GAAJ,EAAS;AACL,eAAOO,YAAY,CAACK,IAAb,CAAkBP,EAAlB,EAAsB,OAAtB,EAA+BL,GAA/B,CAAP;AACH;AACJ;;AAED,WAAOO,YAAY,CAACM,KAAb,CAAmBR,EAAnB,EAAuBS,SAAvB,CAAP;AACH,GAfD;AAgBH;;AAED,SAASH,YAAT,CAAsBI,MAAtB,EAA8BT,MAA9B,EAAsC;AAClC,MAAIjB,KAAK,IAAI0B,MAAM,KAAK,CAApB,IAAyB,CAACT,MAAM,CAACU,IAArC,EAA2C;AACvC,WAAOnB,aAAa,CAACS,MAAM,CAACW,QAAR,EAAkB,OAAlB,CAApB;AACH;;AAED,SAAO,IAAP;AACH;;AAED,SAASC,gBAAT,CAA0BH,MAA1B,EAAkCT,MAAlC,EAA0C;AACtC,MAAIjB,KAAK,IAAI0B,MAAM,KAAK,CAApB,IAAyB,CAACT,MAAM,CAACU,IAArC,EAA2C;AACvC,WAAOnB,aAAa,CAACS,MAAM,CAACW,QAAR,EAAkB,WAAlB,CAApB;AACH,GAHqC,CAKtC;AACA;;;AACA,MAAIvB,QAAQ,IAAIqB,MAAM,KAAK,CAAC,CAA5B,EAA+B;AAC3BT,IAAAA,MAAM,CAACU,IAAP,GAAc3B,KAAK,GAAGiB,MAAM,CAACU,IAAV,GAAiBxB,cAAc,CAACc,MAAM,CAACW,QAAR,CAAlD;;AAEA,QAAI,CAACX,MAAM,CAACU,IAAZ,EAAkB;AACd,aAAOnB,aAAa,CAACS,MAAM,CAACW,QAAR,EAAkB,WAAlB,CAApB;AACH;AACJ;;AAED,SAAO,IAAP;AACH;;AAEDE,MAAM,CAACC,OAAP,CAAehB,gBAAf,GAAkCA,gBAAlC;AACAe,MAAM,CAACC,OAAP,CAAeT,YAAf,GAA8BA,YAA9B;AACAQ,MAAM,CAACC,OAAP,CAAeF,gBAAf,GAAkCA,gBAAlC;AACAC,MAAM,CAACC,OAAP,CAAevB,aAAf,GAA+BA,aAA/B","sourcesContent":["'use strict';\n\nvar isWin = process.platform === 'win32';\nvar resolveCommand = require('./resolveCommand');\n\nvar isNode10 = process.version.indexOf('v0.10.') === 0;\n\nfunction notFoundError(command, syscall) {\n    var err;\n\n    err = new Error(syscall + ' ' + command + ' ENOENT');\n    err.code = err.errno = 'ENOENT';\n    err.syscall = syscall + ' ' + command;\n\n    return err;\n}\n\nfunction hookChildProcess(cp, parsed) {\n    var originalEmit;\n\n    if (!isWin) {\n        return;\n    }\n\n    originalEmit = cp.emit;\n    cp.emit = function (name, arg1) {\n        var err;\n\n        // If emitting \"exit\" event and exit code is 1, we need to check if\n        // the command exists and emit an \"error\" instead\n        // See: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n        if (name === 'exit') {\n            err = verifyENOENT(arg1, parsed, 'spawn');\n\n            if (err) {\n                return originalEmit.call(cp, 'error', err);\n            }\n        }\n\n        return originalEmit.apply(cp, arguments);\n    };\n}\n\nfunction verifyENOENT(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawn');\n    }\n\n    return null;\n}\n\nfunction verifyENOENTSync(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, 'spawnSync');\n    }\n\n    // If we are in node 10, then we are using spawn-sync; if it exited\n    // with -1 it probably means that the command does not exist\n    if (isNode10 && status === -1) {\n        parsed.file = isWin ? parsed.file : resolveCommand(parsed.original);\n\n        if (!parsed.file) {\n            return notFoundError(parsed.original, 'spawnSync');\n        }\n    }\n\n    return null;\n}\n\nmodule.exports.hookChildProcess = hookChildProcess;\nmodule.exports.verifyENOENT = verifyENOENT;\nmodule.exports.verifyENOENTSync = verifyENOENTSync;\nmodule.exports.notFoundError = notFoundError;\n"]},"metadata":{},"sourceType":"script"}