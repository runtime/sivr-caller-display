{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst chokidar = require(\"chokidar\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst request = require(\"request\");\n\nconst utils = require(\"../utils\");\n\nconst javaEmulators = require(\"../serve/javaEmulators\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst constants_1 = require(\"./constants\");\n\nclass DatabaseEmulator {\n  constructor(args) {\n    this.args = args;\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.args.rules && this.args.projectId) {\n        const rulesPath = this.args.rules;\n        this.rulesWatcher = chokidar.watch(rulesPath, {\n          persistent: true,\n          ignoreInitial: true\n        });\n        this.rulesWatcher.on(\"change\", (event, stats) => __awaiter(this, void 0, void 0, function* () {\n          const newContent = fs.readFileSync(rulesPath).toString();\n          utils.logLabeledBullet(\"database\", \"Change detected, updating rules...\");\n\n          try {\n            yield this.updateRules(newContent);\n            utils.logLabeledSuccess(\"database\", \"Rules updated.\");\n          } catch (e) {\n            utils.logWarning(this.prettyPrintRulesError(rulesPath, e));\n            utils.logWarning(\"Failed to update rules\");\n          }\n        }));\n      }\n\n      return javaEmulators.start(types_1.Emulators.DATABASE, this.args);\n    });\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return;\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return javaEmulators.stop(types_1.Emulators.DATABASE);\n    });\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.DATABASE);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.DATABASE);\n    return {\n      host,\n      port\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.DATABASE;\n  }\n\n  updateRules(content) {\n    const _this$getInfo = this.getInfo(),\n          host = _this$getInfo.host,\n          port = _this$getInfo.port;\n\n    return new Promise((resolve, reject) => {\n      request.put({\n        uri: `http://${host}:${[port]}/.settings/rules.json?ns=${this.args.projectId}`,\n        headers: {\n          Authorization: \"Bearer owner\"\n        },\n        body: content\n      }, (err, resp, body) => {\n        if (err) {\n          reject(err);\n        } else if (resp.statusCode !== 200) {\n          reject(JSON.parse(body).error);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  prettyPrintRulesError(filePath, error) {\n    const relativePath = path.relative(process.cwd(), filePath);\n    return `${clc.cyan(relativePath)}:${error.trim()}`;\n  }\n\n}\n\nDatabaseEmulator.DATABASE_EMULATOR_ENV = \"FIREBASE_DATABASE_EMULATOR_HOST\";\nexports.DatabaseEmulator = DatabaseEmulator;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/databaseEmulator.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","chokidar","require","clc","fs","path","request","utils","javaEmulators","types_1","constants_1","DatabaseEmulator","constructor","args","start","rules","projectId","rulesPath","rulesWatcher","watch","persistent","ignoreInitial","on","event","stats","newContent","readFileSync","toString","logLabeledBullet","updateRules","logLabeledSuccess","logWarning","prettyPrintRulesError","Emulators","DATABASE","connect","stop","getInfo","host","Constants","getDefaultHost","port","getDefaultPort","getName","content","put","uri","headers","Authorization","body","err","resp","statusCode","JSON","parse","error","filePath","relativePath","relative","process","cwd","cyan","trim","DATABASE_EMULATOR_ENV"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chokidar = require(\"chokidar\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst request = require(\"request\");\nconst utils = require(\"../utils\");\nconst javaEmulators = require(\"../serve/javaEmulators\");\nconst types_1 = require(\"../emulator/types\");\nconst constants_1 = require(\"./constants\");\nclass DatabaseEmulator {\n    constructor(args) {\n        this.args = args;\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.args.rules && this.args.projectId) {\n                const rulesPath = this.args.rules;\n                this.rulesWatcher = chokidar.watch(rulesPath, { persistent: true, ignoreInitial: true });\n                this.rulesWatcher.on(\"change\", (event, stats) => __awaiter(this, void 0, void 0, function* () {\n                    const newContent = fs.readFileSync(rulesPath).toString();\n                    utils.logLabeledBullet(\"database\", \"Change detected, updating rules...\");\n                    try {\n                        yield this.updateRules(newContent);\n                        utils.logLabeledSuccess(\"database\", \"Rules updated.\");\n                    }\n                    catch (e) {\n                        utils.logWarning(this.prettyPrintRulesError(rulesPath, e));\n                        utils.logWarning(\"Failed to update rules\");\n                    }\n                }));\n            }\n            return javaEmulators.start(types_1.Emulators.DATABASE, this.args);\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return;\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return javaEmulators.stop(types_1.Emulators.DATABASE);\n        });\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.DATABASE);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.DATABASE);\n        return {\n            host,\n            port,\n        };\n    }\n    getName() {\n        return types_1.Emulators.DATABASE;\n    }\n    updateRules(content) {\n        const { host, port } = this.getInfo();\n        return new Promise((resolve, reject) => {\n            request.put({\n                uri: `http://${host}:${[port]}/.settings/rules.json?ns=${this.args.projectId}`,\n                headers: { Authorization: \"Bearer owner\" },\n                body: content,\n            }, (err, resp, body) => {\n                if (err) {\n                    reject(err);\n                }\n                else if (resp.statusCode !== 200) {\n                    reject(JSON.parse(body).error);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    prettyPrintRulesError(filePath, error) {\n        const relativePath = path.relative(process.cwd(), filePath);\n        return `${clc.cyan(relativePath)}:${error.trim()}`;\n    }\n}\nDatabaseEmulator.DATABASE_EMULATOR_ENV = \"FIREBASE_DATABASE_EMULATOR_HOST\";\nexports.DatabaseEmulator = DatabaseEmulator;\n"]},"metadata":{},"sourceType":"script"}