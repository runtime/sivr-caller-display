{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst logger = require(\"../logger\");\n\nconst requireInstance = require(\"../requireInstance\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst metadata = require(\"../database/metadata\");\n\nconst fs = require(\"fs-extra\");\n\nconst path = require(\"path\");\n\nexports.default = new command_1.Command(\"database:rules:stage\").description(\"create a new realtime database ruleset\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\").before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireInstance).action(options => __awaiter(this, void 0, void 0, function* () {\n  const filepath = options.config.data.database.rules;\n  logger.info(`staging ruleset from ${filepath}`);\n  const source = fs.readFileSync(path.resolve(filepath), \"utf8\");\n  const rulesetId = yield metadata.createRuleset(options.instance, source);\n  logger.info(`staged ruleset ${rulesetId}`);\n  return rulesetId;\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/database-rules-stage.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","command_1","require","logger","requireInstance","requirePermissions_1","metadata","fs","path","default","Command","description","option","before","requirePermissions","action","options","filepath","config","data","database","rules","info","source","readFileSync","rulesetId","createRuleset","instance"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst logger = require(\"../logger\");\nconst requireInstance = require(\"../requireInstance\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst metadata = require(\"../database/metadata\");\nconst fs = require(\"fs-extra\");\nconst path = require(\"path\");\nexports.default = new command_1.Command(\"database:rules:stage\")\n    .description(\"create a new realtime database ruleset\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireInstance)\n    .action((options) => __awaiter(this, void 0, void 0, function* () {\n    const filepath = options.config.data.database.rules;\n    logger.info(`staging ruleset from ${filepath}`);\n    const source = fs.readFileSync(path.resolve(filepath), \"utf8\");\n    const rulesetId = yield metadata.createRuleset(options.instance, source);\n    logger.info(`staged ruleset ${rulesetId}`);\n    return rulesetId;\n}));\n"]},"metadata":{},"sourceType":"script"}