{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst uuid = require(\"uuid\");\n\nconst functionsEmulator_1 = require(\"./functionsEmulator\");\n\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\n\nconst utils = require(\"../utils\");\n\nconst logger = require(\"../logger\");\n\nconst error_1 = require(\"../error\");\n\nclass FunctionsEmulatorShell {\n  constructor(emu) {\n    this.emu = emu;\n    this.urls = {};\n    this.triggers = emu.getTriggers();\n    this.emulatedFunctions = this.triggers.map(trigger => {\n      return trigger.name;\n    });\n    utils.logLabeledBullet(\"functions\", `Loaded functions: ${this.emulatedFunctions.join(\", \")}`);\n\n    for (const trigger of this.triggers) {\n      const name = trigger.name;\n\n      if (trigger.httpsTrigger) {\n        this.urls[name] = functionsEmulator_1.FunctionsEmulator.getHttpFunctionUrl(this.emu.getInfo().host, this.emu.getInfo().port, this.emu.getProjectId(), name, functionsEmulatorShared_1.getFunctionRegion(trigger));\n      }\n    }\n  }\n\n  call(name, data, opts) {\n    const trigger = this.getTrigger(name);\n    logger.debug(`shell:${name}: trigger=${JSON.stringify(trigger)}`);\n    logger.debug(`shell:${name}: opts=${JSON.stringify(opts)}, data=${JSON.stringify(data)}`);\n\n    if (!trigger.eventTrigger) {\n      throw new error_1.FirebaseError(`Function ${name} is not a background function`);\n    }\n\n    const eventType = trigger.eventTrigger.eventType;\n    let resource = opts.resource;\n\n    if (typeof resource === \"object\" && resource.name) {\n      resource = resource.name;\n    }\n\n    const proto = {\n      eventId: uuid.v4(),\n      timestamp: new Date().toISOString(),\n      eventType,\n      resource,\n      params: opts.params,\n      auth: opts.auth,\n      data\n    };\n    this.emu.startFunctionRuntime(name, functionsEmulatorShared_1.EmulatedTriggerType.BACKGROUND, proto);\n  }\n\n  getTrigger(name) {\n    const result = this.triggers.find(trigger => {\n      return trigger.name === name;\n    });\n\n    if (!result) {\n      throw new error_1.FirebaseError(`Could not find trigger ${name}`);\n    }\n\n    return result;\n  }\n\n}\n\nexports.FunctionsEmulatorShell = FunctionsEmulatorShell;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/functionsEmulatorShell.js"],"names":["Object","defineProperty","exports","value","uuid","require","functionsEmulator_1","functionsEmulatorShared_1","utils","logger","error_1","FunctionsEmulatorShell","constructor","emu","urls","triggers","getTriggers","emulatedFunctions","map","trigger","name","logLabeledBullet","join","httpsTrigger","FunctionsEmulator","getHttpFunctionUrl","getInfo","host","port","getProjectId","getFunctionRegion","call","data","opts","getTrigger","debug","JSON","stringify","eventTrigger","FirebaseError","eventType","resource","proto","eventId","v4","timestamp","Date","toISOString","params","auth","startFunctionRuntime","EmulatedTriggerType","BACKGROUND","result","find"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst uuid = require(\"uuid\");\nconst functionsEmulator_1 = require(\"./functionsEmulator\");\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\nconst utils = require(\"../utils\");\nconst logger = require(\"../logger\");\nconst error_1 = require(\"../error\");\nclass FunctionsEmulatorShell {\n    constructor(emu) {\n        this.emu = emu;\n        this.urls = {};\n        this.triggers = emu.getTriggers();\n        this.emulatedFunctions = this.triggers.map((trigger) => {\n            return trigger.name;\n        });\n        utils.logLabeledBullet(\"functions\", `Loaded functions: ${this.emulatedFunctions.join(\", \")}`);\n        for (const trigger of this.triggers) {\n            const name = trigger.name;\n            if (trigger.httpsTrigger) {\n                this.urls[name] = functionsEmulator_1.FunctionsEmulator.getHttpFunctionUrl(this.emu.getInfo().host, this.emu.getInfo().port, this.emu.getProjectId(), name, functionsEmulatorShared_1.getFunctionRegion(trigger));\n            }\n        }\n    }\n    call(name, data, opts) {\n        const trigger = this.getTrigger(name);\n        logger.debug(`shell:${name}: trigger=${JSON.stringify(trigger)}`);\n        logger.debug(`shell:${name}: opts=${JSON.stringify(opts)}, data=${JSON.stringify(data)}`);\n        if (!trigger.eventTrigger) {\n            throw new error_1.FirebaseError(`Function ${name} is not a background function`);\n        }\n        const eventType = trigger.eventTrigger.eventType;\n        let resource = opts.resource;\n        if (typeof resource === \"object\" && resource.name) {\n            resource = resource.name;\n        }\n        const proto = {\n            eventId: uuid.v4(),\n            timestamp: new Date().toISOString(),\n            eventType,\n            resource,\n            params: opts.params,\n            auth: opts.auth,\n            data,\n        };\n        this.emu.startFunctionRuntime(name, functionsEmulatorShared_1.EmulatedTriggerType.BACKGROUND, proto);\n    }\n    getTrigger(name) {\n        const result = this.triggers.find((trigger) => {\n            return trigger.name === name;\n        });\n        if (!result) {\n            throw new error_1.FirebaseError(`Could not find trigger ${name}`);\n        }\n        return result;\n    }\n}\nexports.FunctionsEmulatorShell = FunctionsEmulatorShell;\n"]},"metadata":{},"sourceType":"script"}