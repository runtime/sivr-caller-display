{"ast":null,"code":"'use strict';\n\nvar async = require('async');\n\nvar fs = require('fs');\n\nvar GoogleAuth = require('google-auth-library');\n\nvar gcpMetadata = require('gcp-metadata');\n\nvar path = require('path');\n\nvar request = require('request');\n\nclass Auth {\n  constructor(config) {\n    this.authClientPromise = null;\n    this.authClient = null;\n    this.config = config || {};\n    this.environment = {};\n  }\n\n  authorizeRequest(reqOpts, callback) {\n    this.getToken((err, token) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      var authorizedReqOpts = Object.assign({}, reqOpts, {\n        headers: Object.assign({}, reqOpts.headers, {\n          Authorization: `Bearer ${token}`\n        })\n      });\n      callback(null, authorizedReqOpts);\n    });\n  }\n\n  getAuthClient(callback) {\n    if (this.authClient) {\n      // This code works around an issue with context loss with async-listener.\n      // Strictly speaking, this should not be necessary as the call to\n      // authClientPromise.then(..) below would resolve to the same value.\n      // However, async-listener defaults to resuming the `then` callbacks with\n      // the context at the point of resolution rather than the context from the\n      // point where the `then` callback was added. In this case, the promise\n      // will be resolved on the very first incoming http request, and that\n      // context will become sticky (will be restored by async-listener) around\n      // the `then` callbacks for all subsequent requests.\n      //\n      // This breaks APM tools like Stackdriver Trace & others and tools like \n      // long stack traces (they will provide an incorrect stack trace).\n      //\n      // NOTE: this doesn't solve the problem generally. Any request concurrent\n      // to the first call to this function, before the promise resolves, will\n      // still lose context. We don't have a better solution at the moment :(.\n      return setImmediate(callback.bind(null, null, this.authClient));\n    }\n\n    var createAuthClientPromise = (resolve, reject) => {\n      var googleAuth = new GoogleAuth();\n      var config = this.config;\n      var keyFile = config.keyFilename || config.keyFile;\n\n      var addScope = (err, authClient, projectId) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n          if (!config.scopes || config.scopes.length === 0) {\n            var scopeError = new Error('Scopes are required for this request.');\n            scopeError.code = 'MISSING_SCOPE';\n            reject(scopeError);\n            return;\n          }\n        }\n\n        authClient.scopes = config.scopes;\n        this.authClient = authClient;\n        this.projectId = projectId || authClient.projectId;\n        resolve(authClient);\n      };\n\n      if (config.credentials) {\n        googleAuth.fromJSON(config.credentials, addScope);\n      } else if (keyFile) {\n        keyFile = path.resolve(process.cwd(), keyFile);\n        fs.readFile(keyFile, (err, contents) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          try {\n            googleAuth.fromJSON(JSON.parse(contents), addScope);\n          } catch (e) {\n            var authClient = new googleAuth.JWT();\n            authClient.keyFile = keyFile;\n            authClient.email = config.email;\n            addScope(null, authClient);\n          }\n        });\n      } else {\n        googleAuth.getApplicationDefault(addScope);\n      }\n    };\n\n    if (!this.authClientPromise) {\n      this.authClientPromise = new Promise(createAuthClientPromise);\n    }\n\n    this.authClientPromise.then(callback.bind(null, null)).catch(callback);\n  }\n\n  getCredentials(callback) {\n    this.getAuthClient((err, client) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      if (client.email && client.key) {\n        callback(null, {\n          client_email: client.email,\n          private_key: client.key\n        });\n        return;\n      }\n\n      if (!client.authorize) {\n        callback(new Error('Could not get credentials without a JSON, pem, or p12 keyfile.'));\n        return;\n      }\n\n      client.authorize(err => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        this.getCredentials(callback);\n      });\n    });\n  }\n\n  getEnvironment(callback) {\n    async.parallel([cb => this.isAppEngine(cb), cb => this.isCloudFunction(cb), cb => this.isComputeEngine(cb), cb => this.isContainerEngine(cb)], () => {\n      callback(null, this.environment);\n    });\n  }\n\n  getProjectId(callback) {\n    if (this.projectId) {\n      setImmediate(() => {\n        callback(null, this.projectId);\n      });\n      return;\n    }\n\n    this.getAuthClient(err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, this.projectId);\n    });\n  }\n\n  getToken(callback) {\n    this.getAuthClient((err, client) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      client.getAccessToken(callback);\n    });\n  }\n\n  isAppEngine(callback) {\n    setImmediate(() => {\n      var env = this.environment;\n\n      if (typeof env.IS_APP_ENGINE === 'undefined') {\n        env.IS_APP_ENGINE = !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n      }\n\n      callback(null, env.IS_APP_ENGINE);\n    });\n  }\n\n  isCloudFunction(callback) {\n    setImmediate(() => {\n      var env = this.environment;\n\n      if (typeof env.IS_CLOUD_FUNCTION === 'undefined') {\n        env.IS_CLOUD_FUNCTION = !!process.env.FUNCTION_NAME;\n      }\n\n      callback(null, env.IS_CLOUD_FUNCTION);\n    });\n  }\n\n  isComputeEngine(callback) {\n    var env = this.environment;\n\n    if (typeof env.IS_COMPUTE_ENGINE !== 'undefined') {\n      setImmediate(() => {\n        callback(null, env.IS_COMPUTE_ENGINE);\n      });\n      return;\n    }\n\n    request('http://metadata.google.internal', (err, res) => {\n      env.IS_COMPUTE_ENGINE = !err && res.headers['metadata-flavor'] === 'Google';\n      callback(null, env.IS_COMPUTE_ENGINE);\n    });\n  }\n\n  isContainerEngine(callback) {\n    var env = this.environment;\n\n    if (typeof env.IS_CONTAINER_ENGINE !== 'undefined') {\n      setImmediate(() => {\n        callback(null, env.IS_CONTAINER_ENGINE);\n      });\n      return;\n    }\n\n    gcpMetadata.instance('/attributes/cluster-name', err => {\n      env.IS_CONTAINER_ENGINE = !err;\n      callback(null, env.IS_CONTAINER_ENGINE);\n    });\n  }\n\n}\n\nmodule.exports = config => {\n  return new Auth(config);\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/google-auto-auth/index.js"],"names":["async","require","fs","GoogleAuth","gcpMetadata","path","request","Auth","constructor","config","authClientPromise","authClient","environment","authorizeRequest","reqOpts","callback","getToken","err","token","authorizedReqOpts","Object","assign","headers","Authorization","getAuthClient","setImmediate","bind","createAuthClientPromise","resolve","reject","googleAuth","keyFile","keyFilename","addScope","projectId","createScopedRequired","scopes","length","scopeError","Error","code","credentials","fromJSON","process","cwd","readFile","contents","JSON","parse","e","JWT","email","getApplicationDefault","Promise","then","catch","getCredentials","client","key","client_email","private_key","authorize","getEnvironment","parallel","cb","isAppEngine","isCloudFunction","isComputeEngine","isContainerEngine","getProjectId","getAccessToken","env","IS_APP_ENGINE","GAE_SERVICE","GAE_MODULE_NAME","IS_CLOUD_FUNCTION","FUNCTION_NAME","IS_COMPUTE_ENGINE","res","IS_CONTAINER_ENGINE","instance","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,qBAAD,CAAxB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAMM,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKF,MAAL,GAAcA,MAAM,IAAI,EAAxB;AACA,SAAKG,WAAL,GAAmB,EAAnB;AACD;;AAEDC,EAAAA,gBAAgB,CAAEC,OAAF,EAAWC,QAAX,EAAqB;AACnC,SAAKC,QAAL,CAAc,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC5B,UAAID,GAAJ,EAAS;AACPF,QAAAA,QAAQ,CAACE,GAAD,CAAR;AACA;AACD;;AAED,UAAIE,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,OAAlB,EAA2B;AACjDQ,QAAAA,OAAO,EAAEF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,OAAO,CAACQ,OAA1B,EAAmC;AAC1CC,UAAAA,aAAa,EAAG,UAASL,KAAM;AADW,SAAnC;AADwC,OAA3B,CAAxB;AAMAH,MAAAA,QAAQ,CAAC,IAAD,EAAOI,iBAAP,CAAR;AACD,KAbD;AAcD;;AAEDK,EAAAA,aAAa,CAAET,QAAF,EAAY;AACvB,QAAI,KAAKJ,UAAT,EAAqB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAOc,YAAY,CAACV,QAAQ,CAACW,IAAT,CAAc,IAAd,EAAoB,IAApB,EAA0B,KAAKf,UAA/B,CAAD,CAAnB;AACD;;AAED,QAAIgB,uBAAuB,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACjD,UAAIC,UAAU,GAAG,IAAI3B,UAAJ,EAAjB;AAEA,UAAIM,MAAM,GAAG,KAAKA,MAAlB;AACA,UAAIsB,OAAO,GAAGtB,MAAM,CAACuB,WAAP,IAAsBvB,MAAM,CAACsB,OAA3C;;AAEA,UAAIE,QAAQ,GAAG,CAAChB,GAAD,EAAMN,UAAN,EAAkBuB,SAAlB,KAAgC;AAC7C,YAAIjB,GAAJ,EAAS;AACPY,UAAAA,MAAM,CAACZ,GAAD,CAAN;AACA;AACD;;AAED,YAAIN,UAAU,CAACwB,oBAAX,IAAmCxB,UAAU,CAACwB,oBAAX,EAAvC,EAA0E;AACxE,cAAI,CAAC1B,MAAM,CAAC2B,MAAR,IAAkB3B,MAAM,CAAC2B,MAAP,CAAcC,MAAd,KAAyB,CAA/C,EAAkD;AAChD,gBAAIC,UAAU,GAAG,IAAIC,KAAJ,CAAU,uCAAV,CAAjB;AACAD,YAAAA,UAAU,CAACE,IAAX,GAAkB,eAAlB;AACAX,YAAAA,MAAM,CAACS,UAAD,CAAN;AACA;AACD;AACF;;AAED3B,QAAAA,UAAU,CAACyB,MAAX,GAAoB3B,MAAM,CAAC2B,MAA3B;AACA,aAAKzB,UAAL,GAAkBA,UAAlB;AACA,aAAKuB,SAAL,GAAiBA,SAAS,IAAIvB,UAAU,CAACuB,SAAzC;AAEAN,QAAAA,OAAO,CAACjB,UAAD,CAAP;AACD,OApBD;;AAsBA,UAAIF,MAAM,CAACgC,WAAX,EAAwB;AACtBX,QAAAA,UAAU,CAACY,QAAX,CAAoBjC,MAAM,CAACgC,WAA3B,EAAwCR,QAAxC;AACD,OAFD,MAEO,IAAIF,OAAJ,EAAa;AAClBA,QAAAA,OAAO,GAAG1B,IAAI,CAACuB,OAAL,CAAae,OAAO,CAACC,GAAR,EAAb,EAA4Bb,OAA5B,CAAV;AAEA7B,QAAAA,EAAE,CAAC2C,QAAH,CAAYd,OAAZ,EAAqB,CAACd,GAAD,EAAM6B,QAAN,KAAmB;AACtC,cAAI7B,GAAJ,EAAS;AACPY,YAAAA,MAAM,CAACZ,GAAD,CAAN;AACA;AACD;;AAED,cAAI;AACFa,YAAAA,UAAU,CAACY,QAAX,CAAoBK,IAAI,CAACC,KAAL,CAAWF,QAAX,CAApB,EAA0Cb,QAA1C;AACD,WAFD,CAEE,OAAMgB,CAAN,EAAS;AACT,gBAAItC,UAAU,GAAG,IAAImB,UAAU,CAACoB,GAAf,EAAjB;AACAvC,YAAAA,UAAU,CAACoB,OAAX,GAAqBA,OAArB;AACApB,YAAAA,UAAU,CAACwC,KAAX,GAAmB1C,MAAM,CAAC0C,KAA1B;AACAlB,YAAAA,QAAQ,CAAC,IAAD,EAAOtB,UAAP,CAAR;AACD;AACF,SAdD;AAeD,OAlBM,MAkBA;AACLmB,QAAAA,UAAU,CAACsB,qBAAX,CAAiCnB,QAAjC;AACD;AACF,KAnDD;;AAqDA,QAAI,CAAC,KAAKvB,iBAAV,EAA6B;AAC3B,WAAKA,iBAAL,GAAyB,IAAI2C,OAAJ,CAAY1B,uBAAZ,CAAzB;AACD;;AAED,SAAKjB,iBAAL,CAAuB4C,IAAvB,CAA4BvC,QAAQ,CAACW,IAAT,CAAc,IAAd,EAAoB,IAApB,CAA5B,EAAuD6B,KAAvD,CAA6DxC,QAA7D;AACD;;AAEDyC,EAAAA,cAAc,CAAEzC,QAAF,EAAY;AACxB,SAAKS,aAAL,CAAmB,CAACP,GAAD,EAAMwC,MAAN,KAAiB;AAClC,UAAIxC,GAAJ,EAAS;AACPF,QAAAA,QAAQ,CAACE,GAAD,CAAR;AACA;AACD;;AAED,UAAIwC,MAAM,CAACN,KAAP,IAAgBM,MAAM,CAACC,GAA3B,EAAgC;AAC9B3C,QAAAA,QAAQ,CAAC,IAAD,EAAO;AACb4C,UAAAA,YAAY,EAAEF,MAAM,CAACN,KADR;AAEbS,UAAAA,WAAW,EAAEH,MAAM,CAACC;AAFP,SAAP,CAAR;AAIA;AACD;;AAED,UAAI,CAACD,MAAM,CAACI,SAAZ,EAAuB;AACrB9C,QAAAA,QAAQ,CAAC,IAAIwB,KAAJ,CAAU,gEAAV,CAAD,CAAR;AACA;AACD;;AAEDkB,MAAAA,MAAM,CAACI,SAAP,CAAiB5C,GAAG,IAAI;AACtB,YAAIA,GAAJ,EAAS;AACPF,UAAAA,QAAQ,CAACE,GAAD,CAAR;AACA;AACD;;AAED,aAAKuC,cAAL,CAAoBzC,QAApB;AACD,OAPD;AAQD,KA3BD;AA4BD;;AAED+C,EAAAA,cAAc,CAAE/C,QAAF,EAAY;AACxBf,IAAAA,KAAK,CAAC+D,QAAN,CAAe,CACbC,EAAE,IAAI,KAAKC,WAAL,CAAiBD,EAAjB,CADO,EAEbA,EAAE,IAAI,KAAKE,eAAL,CAAqBF,EAArB,CAFO,EAGbA,EAAE,IAAI,KAAKG,eAAL,CAAqBH,EAArB,CAHO,EAIbA,EAAE,IAAI,KAAKI,iBAAL,CAAuBJ,EAAvB,CAJO,CAAf,EAKG,MAAM;AACPjD,MAAAA,QAAQ,CAAC,IAAD,EAAO,KAAKH,WAAZ,CAAR;AACD,KAPD;AAQD;;AAEDyD,EAAAA,YAAY,CAAEtD,QAAF,EAAY;AACtB,QAAI,KAAKmB,SAAT,EAAoB;AAClBT,MAAAA,YAAY,CAAC,MAAM;AACjBV,QAAAA,QAAQ,CAAC,IAAD,EAAO,KAAKmB,SAAZ,CAAR;AACD,OAFW,CAAZ;AAGA;AACD;;AAED,SAAKV,aAAL,CAAmBP,GAAG,IAAI;AACxB,UAAIA,GAAJ,EAAS;AACPF,QAAAA,QAAQ,CAACE,GAAD,CAAR;AACA;AACD;;AAEDF,MAAAA,QAAQ,CAAC,IAAD,EAAO,KAAKmB,SAAZ,CAAR;AACD,KAPD;AAQD;;AAEDlB,EAAAA,QAAQ,CAAED,QAAF,EAAY;AAClB,SAAKS,aAAL,CAAmB,CAACP,GAAD,EAAMwC,MAAN,KAAiB;AAClC,UAAIxC,GAAJ,EAAS;AACPF,QAAAA,QAAQ,CAACE,GAAD,CAAR;AACA;AACD;;AAEDwC,MAAAA,MAAM,CAACa,cAAP,CAAsBvD,QAAtB;AACD,KAPD;AAQD;;AAEDkD,EAAAA,WAAW,CAAElD,QAAF,EAAY;AACrBU,IAAAA,YAAY,CAAC,MAAM;AACjB,UAAI8C,GAAG,GAAG,KAAK3D,WAAf;;AAEA,UAAI,OAAO2D,GAAG,CAACC,aAAX,KAA6B,WAAjC,EAA8C;AAC5CD,QAAAA,GAAG,CAACC,aAAJ,GAAoB,CAAC,EAAE7B,OAAO,CAAC4B,GAAR,CAAYE,WAAZ,IAA2B9B,OAAO,CAAC4B,GAAR,CAAYG,eAAzC,CAArB;AACD;;AAED3D,MAAAA,QAAQ,CAAC,IAAD,EAAOwD,GAAG,CAACC,aAAX,CAAR;AACD,KARW,CAAZ;AASD;;AAEDN,EAAAA,eAAe,CAAEnD,QAAF,EAAY;AACzBU,IAAAA,YAAY,CAAC,MAAM;AACjB,UAAI8C,GAAG,GAAG,KAAK3D,WAAf;;AAEA,UAAI,OAAO2D,GAAG,CAACI,iBAAX,KAAiC,WAArC,EAAkD;AAChDJ,QAAAA,GAAG,CAACI,iBAAJ,GAAwB,CAAC,CAAChC,OAAO,CAAC4B,GAAR,CAAYK,aAAtC;AACD;;AAED7D,MAAAA,QAAQ,CAAC,IAAD,EAAOwD,GAAG,CAACI,iBAAX,CAAR;AACD,KARW,CAAZ;AASD;;AAEDR,EAAAA,eAAe,CAAEpD,QAAF,EAAY;AACzB,QAAIwD,GAAG,GAAG,KAAK3D,WAAf;;AAEA,QAAI,OAAO2D,GAAG,CAACM,iBAAX,KAAiC,WAArC,EAAkD;AAChDpD,MAAAA,YAAY,CAAC,MAAM;AACjBV,QAAAA,QAAQ,CAAC,IAAD,EAAOwD,GAAG,CAACM,iBAAX,CAAR;AACD,OAFW,CAAZ;AAGA;AACD;;AAEDvE,IAAAA,OAAO,CAAC,iCAAD,EAAoC,CAACW,GAAD,EAAM6D,GAAN,KAAc;AACvDP,MAAAA,GAAG,CAACM,iBAAJ,GAAwB,CAAC5D,GAAD,IAAQ6D,GAAG,CAACxD,OAAJ,CAAY,iBAAZ,MAAmC,QAAnE;AAEAP,MAAAA,QAAQ,CAAC,IAAD,EAAOwD,GAAG,CAACM,iBAAX,CAAR;AACD,KAJM,CAAP;AAKD;;AAEDT,EAAAA,iBAAiB,CAAErD,QAAF,EAAY;AAC3B,QAAIwD,GAAG,GAAG,KAAK3D,WAAf;;AAEA,QAAI,OAAO2D,GAAG,CAACQ,mBAAX,KAAmC,WAAvC,EAAoD;AAClDtD,MAAAA,YAAY,CAAC,MAAM;AACjBV,QAAAA,QAAQ,CAAC,IAAD,EAAOwD,GAAG,CAACQ,mBAAX,CAAR;AACD,OAFW,CAAZ;AAGA;AACD;;AAED3E,IAAAA,WAAW,CAAC4E,QAAZ,CAAqB,0BAArB,EAAiD/D,GAAG,IAAI;AACtDsD,MAAAA,GAAG,CAACQ,mBAAJ,GAA0B,CAAC9D,GAA3B;AAEAF,MAAAA,QAAQ,CAAC,IAAD,EAAOwD,GAAG,CAACQ,mBAAX,CAAR;AACD,KAJD;AAKD;;AAzOQ;;AA4OXE,MAAM,CAACC,OAAP,GAAiBzE,MAAM,IAAI;AACzB,SAAO,IAAIF,IAAJ,CAASE,MAAT,CAAP;AACD,CAFD","sourcesContent":["'use strict';\n\nvar async = require('async');\nvar fs = require('fs');\nvar GoogleAuth = require('google-auth-library');\nvar gcpMetadata = require('gcp-metadata');\nvar path = require('path');\nvar request = require('request');\n\nclass Auth {\n  constructor(config) {\n    this.authClientPromise = null;\n    this.authClient = null;\n    this.config = config || {};\n    this.environment = {};\n  }\n\n  authorizeRequest (reqOpts, callback) {\n    this.getToken((err, token) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      var authorizedReqOpts = Object.assign({}, reqOpts, {\n        headers: Object.assign({}, reqOpts.headers, {\n          Authorization: `Bearer ${token}`\n        })\n      });\n\n      callback(null, authorizedReqOpts);\n    });\n  }\n\n  getAuthClient (callback) {\n    if (this.authClient) {\n      // This code works around an issue with context loss with async-listener.\n      // Strictly speaking, this should not be necessary as the call to\n      // authClientPromise.then(..) below would resolve to the same value.\n      // However, async-listener defaults to resuming the `then` callbacks with\n      // the context at the point of resolution rather than the context from the\n      // point where the `then` callback was added. In this case, the promise\n      // will be resolved on the very first incoming http request, and that\n      // context will become sticky (will be restored by async-listener) around\n      // the `then` callbacks for all subsequent requests.\n      //\n      // This breaks APM tools like Stackdriver Trace & others and tools like \n      // long stack traces (they will provide an incorrect stack trace).\n      //\n      // NOTE: this doesn't solve the problem generally. Any request concurrent\n      // to the first call to this function, before the promise resolves, will\n      // still lose context. We don't have a better solution at the moment :(.\n      return setImmediate(callback.bind(null, null, this.authClient));\n    }\n\n    var createAuthClientPromise = (resolve, reject) => {\n      var googleAuth = new GoogleAuth();\n\n      var config = this.config;\n      var keyFile = config.keyFilename || config.keyFile;\n\n      var addScope = (err, authClient, projectId) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        if (authClient.createScopedRequired && authClient.createScopedRequired()) {\n          if (!config.scopes || config.scopes.length === 0) {\n            var scopeError = new Error('Scopes are required for this request.');\n            scopeError.code = 'MISSING_SCOPE';\n            reject(scopeError);\n            return;\n          }\n        }\n\n        authClient.scopes = config.scopes;\n        this.authClient = authClient;\n        this.projectId = projectId || authClient.projectId;\n\n        resolve(authClient);\n      };\n\n      if (config.credentials) {\n        googleAuth.fromJSON(config.credentials, addScope);\n      } else if (keyFile) {\n        keyFile = path.resolve(process.cwd(), keyFile);\n\n        fs.readFile(keyFile, (err, contents) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n\n          try {\n            googleAuth.fromJSON(JSON.parse(contents), addScope);\n          } catch(e) {\n            var authClient = new googleAuth.JWT();\n            authClient.keyFile = keyFile;\n            authClient.email = config.email;\n            addScope(null, authClient);\n          }\n        });\n      } else {\n        googleAuth.getApplicationDefault(addScope);\n      }\n    };\n\n    if (!this.authClientPromise) {\n      this.authClientPromise = new Promise(createAuthClientPromise);\n    }\n\n    this.authClientPromise.then(callback.bind(null, null)).catch(callback);\n  }\n\n  getCredentials (callback) {\n    this.getAuthClient((err, client) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      if (client.email && client.key) {\n        callback(null, {\n          client_email: client.email,\n          private_key: client.key\n        });\n        return;\n      }\n\n      if (!client.authorize) {\n        callback(new Error('Could not get credentials without a JSON, pem, or p12 keyfile.'));\n        return;\n      }\n\n      client.authorize(err => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        this.getCredentials(callback);\n      });\n    });\n  }\n\n  getEnvironment (callback) {\n    async.parallel([\n      cb => this.isAppEngine(cb),\n      cb => this.isCloudFunction(cb),\n      cb => this.isComputeEngine(cb),\n      cb => this.isContainerEngine(cb)\n    ], () => {\n      callback(null, this.environment);\n    });\n  }\n\n  getProjectId (callback) {\n    if (this.projectId) {\n      setImmediate(() => {\n        callback(null, this.projectId);\n      });\n      return;\n    }\n\n    this.getAuthClient(err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, this.projectId);\n    });\n  }\n\n  getToken (callback) {\n    this.getAuthClient((err, client) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      client.getAccessToken(callback);\n    });\n  }\n\n  isAppEngine (callback) {\n    setImmediate(() => {\n      var env = this.environment;\n\n      if (typeof env.IS_APP_ENGINE === 'undefined') {\n        env.IS_APP_ENGINE = !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n      }\n\n      callback(null, env.IS_APP_ENGINE);\n    });\n  }\n\n  isCloudFunction (callback) {\n    setImmediate(() => {\n      var env = this.environment;\n\n      if (typeof env.IS_CLOUD_FUNCTION === 'undefined') {\n        env.IS_CLOUD_FUNCTION = !!process.env.FUNCTION_NAME;\n      }\n\n      callback(null, env.IS_CLOUD_FUNCTION);\n    });\n  }\n\n  isComputeEngine (callback) {\n    var env = this.environment;\n\n    if (typeof env.IS_COMPUTE_ENGINE !== 'undefined') {\n      setImmediate(() => {\n        callback(null, env.IS_COMPUTE_ENGINE);\n      });\n      return;\n    }\n\n    request('http://metadata.google.internal', (err, res) => {\n      env.IS_COMPUTE_ENGINE = !err && res.headers['metadata-flavor'] === 'Google';\n\n      callback(null, env.IS_COMPUTE_ENGINE);\n    });\n  }\n\n  isContainerEngine (callback) {\n    var env = this.environment;\n\n    if (typeof env.IS_CONTAINER_ENGINE !== 'undefined') {\n      setImmediate(() => {\n        callback(null, env.IS_CONTAINER_ENGINE);\n      });\n      return;\n    }\n\n    gcpMetadata.instance('/attributes/cluster-name', err => {\n      env.IS_CONTAINER_ENGINE = !err;\n\n      callback(null, env.IS_CONTAINER_ENGINE);\n    });\n  }\n}\n\nmodule.exports = config => {\n  return new Auth(config);\n};\n"]},"metadata":{},"sourceType":"script"}