{"ast":null,"code":"/*\n * transport.js: Base Transport object for all Winston transports.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\nvar events = require('events'),\n    util = require('util'); //\n// ### function Transport (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Tranport object responsible\n// base functionality for all winston transports.\n//\n\n\nvar Transport = exports.Transport = function (options) {\n  events.EventEmitter.call(this);\n  options = options || {};\n  this.silent = options.silent || false;\n  this.raw = options.raw || false;\n  this.name = options.name || this.name;\n  this.formatter = options.formatter; //\n  // Do not set a default level. When `level` is falsey on any\n  // `Transport` instance, any `Logger` instance uses the\n  // configured level (instead of the Transport level)\n  //\n\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions || false;\n  this.exceptionsLevel = options.exceptionsLevel || 'error';\n  this.humanReadableUnhandledException = options.humanReadableUnhandledException || false;\n}; //\n// Inherit from `events.EventEmitter`.\n//\n\n\nutil.inherits(Transport, events.EventEmitter); //\n// ### function formatQuery (query)\n// #### @query {string|Object} Query to format\n// Formats the specified `query` Object (or string) to conform\n// with the underlying implementation of this transport.\n//\n\nTransport.prototype.formatQuery = function (query) {\n  return query;\n}; //\n// ### function normalizeQuery (query)\n// #### @options {string|Object} Query to normalize\n// Normalize options for query\n//\n\n\nTransport.prototype.normalizeQuery = function (options) {\n  //\n  // Use options similar to loggly.\n  // [See Loggly Search API](http://wiki.loggly.com/retrieve_events#optional)\n  //\n  options = options || {}; // limit\n\n  options.rows = options.rows || options.limit || 10; // starting row offset\n\n  options.start = options.start || 0; // now\n\n  options.until = options.until || new Date();\n\n  if (typeof options.until !== 'object') {\n    options.until = new Date(options.until);\n  } // now - 24\n\n\n  options.from = options.from || options.until - 24 * 60 * 60 * 1000;\n\n  if (typeof options.from !== 'object') {\n    options.from = new Date(options.from);\n  } // 'asc' or 'desc'\n\n\n  options.order = options.order || 'desc'; // which fields to select\n\n  options.fields = options.fields;\n  return options;\n}; //\n// ### function formatResults (results, options)\n// #### @results {Object|Array} Results returned from `.query`.\n// #### @options {Object} **Optional** Formatting options\n// Formats the specified `results` with the given `options` accordinging\n// to the implementation of this transport.\n//\n\n\nTransport.prototype.formatResults = function (results, options) {\n  return results;\n}; //\n// ### function logException (msg, meta, callback)\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Logs the specified `msg`, `meta` and responds to the callback once the log\n// operation is complete to ensure that the event loop will not exit before\n// all logging has completed.\n//\n\n\nTransport.prototype.logException = function (msg, meta, callback) {\n  var self = this,\n      called;\n\n  if (this.silent) {\n    return callback();\n  }\n\n  function onComplete() {\n    if (!called) {\n      called = true;\n      self.removeListener('logged', onComplete);\n      self.removeListener('error', onComplete);\n      callback();\n    }\n  }\n\n  this.once('logged', onComplete);\n  this.once('error', onComplete);\n  this.log(self.exceptionsLevel, msg, meta, function () {});\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/winston/lib/winston/transports/transport.js"],"names":["events","require","util","Transport","exports","options","EventEmitter","call","silent","raw","name","formatter","level","handleExceptions","exceptionsLevel","humanReadableUnhandledException","inherits","prototype","formatQuery","query","normalizeQuery","rows","limit","start","until","Date","from","order","fields","formatResults","results","logException","msg","meta","callback","self","called","onComplete","removeListener","once","log"],"mappings":"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","sourcesContent":["/*\n * transport.js: Base Transport object for all Winston transports.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\n\nvar events = require('events'),\n    util = require('util');\n\n//\n// ### function Transport (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Tranport object responsible\n// base functionality for all winston transports.\n//\nvar Transport = exports.Transport = function (options) {\n  events.EventEmitter.call(this);\n\n  options        = options        || {};\n  this.silent    = options.silent || false;\n  this.raw       = options.raw    || false;\n  this.name      = options.name   || this.name;\n  this.formatter = options.formatter;\n\n  //\n  // Do not set a default level. When `level` is falsey on any\n  // `Transport` instance, any `Logger` instance uses the\n  // configured level (instead of the Transport level)\n  //\n  this.level = options.level;\n\n  this.handleExceptions = options.handleExceptions || false;\n  this.exceptionsLevel  = options.exceptionsLevel || 'error';\n  this.humanReadableUnhandledException = options.humanReadableUnhandledException || false;\n};\n\n//\n// Inherit from `events.EventEmitter`.\n//\nutil.inherits(Transport, events.EventEmitter);\n\n//\n// ### function formatQuery (query)\n// #### @query {string|Object} Query to format\n// Formats the specified `query` Object (or string) to conform\n// with the underlying implementation of this transport.\n//\nTransport.prototype.formatQuery = function (query) {\n  return query;\n};\n\n//\n// ### function normalizeQuery (query)\n// #### @options {string|Object} Query to normalize\n// Normalize options for query\n//\nTransport.prototype.normalizeQuery = function (options) {\n  //\n  // Use options similar to loggly.\n  // [See Loggly Search API](http://wiki.loggly.com/retrieve_events#optional)\n  //\n\n  options = options || {};\n\n  // limit\n  options.rows = options.rows || options.limit || 10;\n\n  // starting row offset\n  options.start = options.start || 0;\n\n  // now\n  options.until = options.until || new Date;\n  if (typeof options.until !== 'object') {\n    options.until = new Date(options.until);\n  }\n\n  // now - 24\n  options.from = options.from || (options.until - (24 * 60 * 60 * 1000));\n  if (typeof options.from !== 'object') {\n    options.from = new Date(options.from);\n  }\n\n\n  // 'asc' or 'desc'\n  options.order = options.order || 'desc';\n\n  // which fields to select\n  options.fields = options.fields;\n\n  return options;\n};\n\n//\n// ### function formatResults (results, options)\n// #### @results {Object|Array} Results returned from `.query`.\n// #### @options {Object} **Optional** Formatting options\n// Formats the specified `results` with the given `options` accordinging\n// to the implementation of this transport.\n//\nTransport.prototype.formatResults = function (results, options) {\n  return results;\n};\n\n//\n// ### function logException (msg, meta, callback)\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Logs the specified `msg`, `meta` and responds to the callback once the log\n// operation is complete to ensure that the event loop will not exit before\n// all logging has completed.\n//\nTransport.prototype.logException = function (msg, meta, callback) {\n  var self = this,\n      called;\n\n  if (this.silent) {\n    return callback();\n  }\n\n  function onComplete () {\n    if (!called) {\n      called = true;\n      self.removeListener('logged', onComplete);\n      self.removeListener('error', onComplete);\n      callback();\n    }\n  }\n\n  this.once('logged', onComplete);\n  this.once('error', onComplete);\n  this.log(self.exceptionsLevel, msg, meta, function () { });\n};\n"]},"metadata":{},"sourceType":"script"}