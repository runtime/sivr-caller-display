{"ast":null,"code":"/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar JWTClient = require('./jwtclient.js');\n\nvar ComputeClient = require('./computeclient.js');\n\nvar exec = require('child_process').exec;\n\nvar fs = require('fs');\n\nvar os = require('os');\n\nvar path = require('path');\n\nvar util = require('util');\n\nvar DefaultTransporter = require('../transporters.js');\n/**\n * GoogleAuth account manager.\n *\n * @constructor\n */\n\n\nfunction GoogleAuth() {\n  this.JWTClient = JWTClient;\n  this.ComputeClient = ComputeClient;\n  this._cachedCredential = null;\n} // Executes the given callback if it is not null.\n\n\nfunction callback(c) {\n  if (c) {\n    return c.apply(null, Array.prototype.slice.call(arguments, 1));\n  }\n} // Creates an Error containing the given message, and includes the message from the optional err\n// passed in.\n\n\nfunction createError(message, err) {\n  var s = message || '';\n\n  if (err) {\n    var errorMessage = String(err);\n\n    if (errorMessage && errorMessage.length > 0) {\n      if (s.length > 0) {\n        s += ' ';\n      }\n\n      s += errorMessage;\n    }\n  }\n\n  return Error(s);\n}\n/**\n * Convenience field mapping in the IAM credential type.\n */\n\n\nGoogleAuth.prototype.IAMAuth = require('./iam.js');\n/**\n * Convenience field mapping in the Compute credential type.\n */\n\nGoogleAuth.prototype.Compute = require('./computeclient.js');\n/**\n * Convenience field mapping in the JWT credential type.\n */\n\nGoogleAuth.prototype.JWT = require('./jwtclient.js');\n/**\n * Convenience field mapping in the JWT Access credential type.\n */\n\nGoogleAuth.prototype.JWTAccess = require('./jwtaccess.js');\n/**\n * Convenience field mapping in the OAuth2 credential type.\n */\n\nGoogleAuth.prototype.OAuth2 = require('./oauth2client.js');\n/**\n * Convenience field mapping to the UserRefreshClient credential type.\n */\n\nGoogleAuth.prototype.UserRefreshClient = require('./refreshclient.js');\n/**\n * Caches a value indicating whether the auth layer is running on Google Compute Engine.\n * @private\n */\n\nGoogleAuth.prototype._isGCE = false;\n/**\n * Caches a value indicating whether we've checked whether the auth layer is running on\n * Google Compute Engine.\n * @private\n */\n\nGoogleAuth.prototype._checked_isGCE = false;\n/**\n * Obtains the default project ID for the application..\n * @param {function=} opt_callback Optional callback.\n */\n\nGoogleAuth.prototype.getDefaultProjectId = function (opt_callback) {\n  var that = this; // In implicit case, supports three environments. In order of precedence, the\n  // implicit environments are:\n  //\n  // * GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n  // * GOOGLE_APPLICATION_CREDENTIALS JSON file\n  // * Get default service project from\n  //  ``$ gcloud beta auth application-default login``\n  // * Google App Engine application ID (Not implemented yet)\n  // * Google Compute Engine project ID (from metadata server) (Not implemented yet)\n\n  if (that._cachedProjectId) {\n    process.nextTick(function () {\n      callback(opt_callback, null, that._cachedProjectId);\n    });\n  } else {\n    var my_callback = function (err, projectId) {\n      if (!err && projectId) {\n        that._cachedprojectId = projectId;\n      }\n\n      process.nextTick(function () {\n        callback(opt_callback, err, projectId);\n      });\n    }; // environment variable\n\n\n    if (that._getProductionProjectId(my_callback)) {\n      return;\n    } // json file\n\n\n    that._getFileProjectId(function (err, projectId) {\n      if (err || projectId) {\n        my_callback(err, projectId);\n        return;\n      } // Google Cloud SDK default project id\n\n\n      that._getDefaultServiceProjectId(function (err, projectId) {\n        if (err || projectId) {\n          my_callback(err, projectId);\n          return;\n        } // Get project ID from Compute Engine metadata server\n\n\n        that._getGCEProjectId(my_callback);\n      });\n    });\n  }\n};\n/**\n * Loads the project id from environment variables.\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getProductionProjectId = function (_callback) {\n  var projectId = this._getEnv('GCLOUD_PROJECT') || this._getEnv('GOOGLE_CLOUD_PROJECT');\n\n  if (projectId) {\n    process.nextTick(function () {\n      callback(_callback, null, projectId);\n    });\n  }\n\n  return projectId;\n};\n/**\n * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getFileProjectId = function (_callback) {\n  var that = this;\n\n  if (that._cachedCredential) {\n    // Try to read the project ID from the cached credentials file\n    process.nextTick(function () {\n      callback(_callback, null, that._cachedCredential.projectId);\n    });\n    return;\n  } // Try to load a credentials file and read its project ID\n\n\n  var pathExists = that._tryGetApplicationCredentialsFromEnvironmentVariable(function (err, result) {\n    if (!err && result) {\n      callback(_callback, null, result.projectId);\n      return;\n    }\n\n    callback(_callback, err);\n  });\n\n  if (!pathExists) {\n    callback(_callback, null);\n  }\n};\n/**\n * Loads the default project of the Google Cloud SDK.\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getDefaultServiceProjectId = function (_callback) {\n  this._getSDKDefaultProjectId(function (err, stdout) {\n    var projectId;\n\n    if (!err && stdout) {\n      try {\n        projectId = JSON.parse(stdout).core.project;\n      } catch (err) {\n        projectId = null;\n      }\n    } // Ignore any errors\n\n\n    callback(_callback, null, projectId);\n  });\n};\n/**\n * Run the Google Cloud SDK command that prints the default project ID\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getSDKDefaultProjectId = function (_callback) {\n  exec('gcloud -q config list core/project --format=json', _callback);\n};\n/**\n * Gets the Compute Engine project ID if it can be inferred.\n * Uses 169.254.169.254 for the metadata server to avoid request\n * latency from DNS lookup.\n * See https://cloud.google.com/compute/docs/metadata#metadataserver\n * for information about this IP address. (This IP is also used for\n * Amazon EC2 instances, so the metadata flavor is crucial.)\n * See https://github.com/google/oauth2client/issues/93 for context about\n * DNS latency.\n *\n * @param {function} _callback Callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getGCEProjectId = function (_callback) {\n  if (!this.transporter) {\n    this.transporter = new DefaultTransporter();\n  }\n\n  this.transporter.request({\n    method: 'GET',\n    uri: 'http://169.254.169.254/computeMetadata/v1/project/project-id',\n    headers: {\n      'Metadata-Flavor': 'Google'\n    }\n  }, function (err, body, res) {\n    if (err || !res || res.statusCode !== 200 || !body) {\n      callback(_callback, null);\n      return;\n    } // Ignore any errors\n\n\n    callback(_callback, null, body);\n  });\n};\n/**\n * Obtains the default service-level credentials for the application..\n * @param {function=} opt_callback Optional callback.\n */\n\n\nGoogleAuth.prototype.getApplicationDefault = function (opt_callback) {\n  var that = this; // If we've already got a cached credential, just return it.\n\n  if (that._cachedCredential) {\n    process.nextTick(function () {\n      callback(opt_callback, null, that._cachedCredential, that._cachedProjectId);\n    });\n  } else {\n    // Inject our own callback routine, which will cache the credential once it's been created.\n    // It also allows us to ensure that the ultimate callback is always async.\n    var my_callback = function (err, result) {\n      if (!err && result) {\n        that._cachedCredential = result;\n        that.getDefaultProjectId(function (err, projectId) {\n          process.nextTick(function () {\n            // Ignore default project error\n            callback(opt_callback, null, result, projectId);\n          });\n        });\n      } else {\n        process.nextTick(function () {\n          callback(opt_callback, err, result);\n        });\n      }\n    }; // Check for the existence of a local environment variable pointing to the\n    // location of the credential file. This is typically used in local developer scenarios.\n\n\n    if (that._tryGetApplicationCredentialsFromEnvironmentVariable(my_callback)) {\n      return;\n    } // Look in the well-known credential file location.\n\n\n    if (that._tryGetApplicationCredentialsFromWellKnownFile(my_callback)) {\n      return;\n    } // Determine if we're running on GCE.\n\n\n    that._checkIsGCE(function (gce) {\n      if (gce) {\n        // For GCE, just return a default ComputeClient. It will take care of the rest.\n        my_callback(null, new that.ComputeClient());\n      } else {\n        // We failed to find the default credentials. Bail out with an error.\n        my_callback(new Error('Could not load the default credentials. Browse to ' + 'https://developers.google.com/accounts/docs/application-default-credentials for ' + 'more information.'));\n      }\n    });\n  }\n};\n/**\n * Determines whether the auth layer is running on Google Compute Engine.\n * @param {function=} callback The callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._checkIsGCE = function (callback) {\n  var that = this;\n\n  if (that._checked_isGCE) {\n    callback(that._isGCE);\n  } else {\n    if (!that.transporter) {\n      that.transporter = new DefaultTransporter();\n    }\n\n    that.transporter.request({\n      method: 'GET',\n      uri: 'http://metadata.google.internal',\n      json: true\n    }, function (err, body, res) {\n      if (!err && res && res.headers) {\n        that._isGCE = res.headers['metadata-flavor'] === 'Google';\n      }\n\n      that._checked_isGCE = true;\n      callback(that._isGCE);\n    });\n  }\n};\n/**\n * Attempts to load default credentials from the environment variable path..\n * @param {function=} opt_callback Optional callback.\n * @return {boolean} Returns true if the callback has been executed; false otherwise.\n * @api private\n */\n\n\nGoogleAuth.prototype._tryGetApplicationCredentialsFromEnvironmentVariable = function (opt_callback) {\n  var that = this;\n\n  var credentialsPath = that._getEnv('GOOGLE_APPLICATION_CREDENTIALS');\n\n  if (!credentialsPath || credentialsPath.length === 0) {\n    return false;\n  }\n\n  that._getApplicationCredentialsFromFilePath(credentialsPath, function (err, result) {\n    var wrappedError = null;\n\n    if (err) {\n      wrappedError = createError('Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS ' + 'environment variable.', err);\n    }\n\n    callback(opt_callback, wrappedError, result);\n  });\n\n  return true;\n};\n/**\n * Attempts to load default credentials from a well-known file location\n * @param {function=} opt_callback Optional callback.\n * @return {boolean} Returns true if the callback has been executed; false otherwise.\n * @api private\n */\n\n\nGoogleAuth.prototype._tryGetApplicationCredentialsFromWellKnownFile = function (opt_callback) {\n  var that = this; // First, figure out the location of the file, depending upon the OS type.\n\n  var location = null;\n\n  if (that._isWindows()) {\n    // Windows\n    location = that._getEnv('APPDATA');\n  } else {\n    // Linux or Mac\n    var home = that._getEnv('HOME');\n\n    if (home) {\n      location = that._pathJoin(home, '.config');\n    }\n  } // If we found the root path, expand it.\n\n\n  if (location) {\n    location = that._pathJoin(location, 'gcloud');\n    location = that._pathJoin(location, 'application_default_credentials.json');\n    location = that._mockWellKnownFilePath(location); // Check whether the file exists.\n\n    if (!that._fileExists(location)) {\n      location = null;\n    }\n  } // The file does not exist.\n\n\n  if (!location) {\n    return false;\n  } // The file seems to exist. Try to use it.\n\n\n  this._getApplicationCredentialsFromFilePath(location, opt_callback);\n\n  return true;\n};\n/**\n * Attempts to load default credentials from a file at the given path..\n * @param {string=} filePath The path to the file to read.\n * @param {function=} opt_callback Optional callback.\n * @api private\n */\n\n\nGoogleAuth.prototype._getApplicationCredentialsFromFilePath = function (filePath, opt_callback) {\n  var that = this;\n  var error = null; // Make sure the path looks like a string.\n\n  if (!filePath || filePath.length === 0) {\n    error = new Error('The file path is invalid.');\n  } // Make sure there is a file at the path. lstatSync will throw if there is nothing there.\n\n\n  if (!error) {\n    try {\n      // Resolve path to actual file in case of symlink. Expect a thrown error if not resolvable.\n      filePath = fs.realpathSync(filePath);\n\n      if (!fs.lstatSync(filePath).isFile()) {\n        throw '';\n      }\n    } catch (err) {\n      error = createError(util.format('The file at %s does not exist, or it is not a file.', filePath), err);\n    }\n  } // Now open a read stream on the file, and parse it.\n\n\n  if (!error) {\n    try {\n      var stream = that._createReadStream(filePath);\n\n      that.fromStream(stream, opt_callback);\n    } catch (err) {\n      error = createError(util.format('Unable to read the file at %s.', filePath), err);\n    }\n  }\n\n  if (error) {\n    callback(opt_callback, error);\n  }\n};\n/**\n * Create a credentials instance using the given input options.\n * @param {object=} json The input object.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nGoogleAuth.prototype.fromJSON = function (json, opt_callback) {\n  var that = this;\n  var client;\n\n  if (!json) {\n    callback(opt_callback, new Error('Must pass in a JSON object containing the Google auth settings.'));\n    return;\n  }\n\n  if (json.type === 'authorized_user') {\n    client = new that.UserRefreshClient();\n  } else {\n    client = new that.JWTClient();\n  }\n\n  client.fromJSON(json, function (err) {\n    if (err) {\n      callback(opt_callback, err);\n    } else {\n      callback(opt_callback, null, client);\n    }\n  });\n};\n/**\n * Create a credentials instance using the given input stream.\n * @param {object=} stream The input stream.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nGoogleAuth.prototype.fromStream = function (stream, opt_callback) {\n  var that = this;\n\n  if (!stream) {\n    process.nextTick(function () {\n      callback(opt_callback, new Error('Must pass in a stream containing the Google auth settings.'));\n    });\n    return;\n  }\n\n  var s = '';\n  stream.setEncoding('utf8');\n  stream.on('data', function (chunk) {\n    s += chunk;\n  });\n  stream.on('end', function () {\n    try {\n      var data = JSON.parse(s);\n      that.fromJSON(data, opt_callback);\n    } catch (err) {\n      callback(opt_callback, err);\n    }\n  });\n};\n/**\n * Determines whether the current operating system is Windows.\n * @api private\n * */\n\n\nGoogleAuth.prototype._isWindows = function () {\n  var sys = this._osPlatform();\n\n  if (sys && sys.length >= 3) {\n    if (sys.substring(0, 3).toLowerCase() === 'win') {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Creates a file stream. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._createReadStream = function (filePath) {\n  return fs.createReadStream(filePath);\n};\n/**\n * Gets the value of the environment variable with the given name. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._getEnv = function (name) {\n  return process.env[name];\n};\n/**\n * Gets the current operating system platform. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._osPlatform = function () {\n  return os.platform();\n};\n/**\n * Determines whether a file exists. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._fileExists = function (filePath) {\n  return fs.existsSync(filePath);\n};\n/**\n * Joins two parts of a path. Allows mocking.\n * @api private\n * */\n\n\nGoogleAuth.prototype._pathJoin = function (item1, item2) {\n  return path.join(item1, item2);\n};\n/**\n * Allows mocking of the path to a well-known file.\n * @api private\n * */\n\n\nGoogleAuth.prototype._mockWellKnownFilePath = function (filePath) {\n  return filePath;\n};\n/**\n * Export GoogleAuth.\n */\n\n\nmodule.exports = GoogleAuth;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/google-auto-auth/node_modules/google-auth-library/lib/auth/googleauth.js"],"names":["JWTClient","require","ComputeClient","exec","fs","os","path","util","DefaultTransporter","GoogleAuth","_cachedCredential","callback","c","apply","Array","prototype","slice","call","arguments","createError","message","err","s","errorMessage","String","length","Error","IAMAuth","Compute","JWT","JWTAccess","OAuth2","UserRefreshClient","_isGCE","_checked_isGCE","getDefaultProjectId","opt_callback","that","_cachedProjectId","process","nextTick","my_callback","projectId","_cachedprojectId","_getProductionProjectId","_getFileProjectId","_getDefaultServiceProjectId","_getGCEProjectId","_callback","_getEnv","pathExists","_tryGetApplicationCredentialsFromEnvironmentVariable","result","_getSDKDefaultProjectId","stdout","JSON","parse","core","project","transporter","request","method","uri","headers","body","res","statusCode","getApplicationDefault","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","gce","json","credentialsPath","_getApplicationCredentialsFromFilePath","wrappedError","location","_isWindows","home","_pathJoin","_mockWellKnownFilePath","_fileExists","filePath","error","realpathSync","lstatSync","isFile","format","stream","_createReadStream","fromStream","fromJSON","client","type","setEncoding","on","chunk","data","sys","_osPlatform","substring","toLowerCase","createReadStream","name","env","platform","existsSync","item1","item2","join","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nvar JWTClient = require('./jwtclient.js');\nvar ComputeClient = require('./computeclient.js');\nvar exec = require('child_process').exec;\nvar fs = require('fs');\nvar os = require('os');\nvar path = require('path');\nvar util = require('util');\nvar DefaultTransporter = require('../transporters.js');\n\n/**\n * GoogleAuth account manager.\n *\n * @constructor\n */\nfunction GoogleAuth() {\n  this.JWTClient = JWTClient;\n  this.ComputeClient = ComputeClient;\n  this._cachedCredential = null;\n}\n\n// Executes the given callback if it is not null.\nfunction callback(c) {\n  if (c) {\n    return c.apply(null, Array.prototype.slice.call(arguments, 1));\n  }\n}\n\n// Creates an Error containing the given message, and includes the message from the optional err\n// passed in.\nfunction createError(message, err) {\n  var s = message || '';\n  if (err) {\n    var errorMessage = String(err);\n    if (errorMessage && errorMessage.length > 0) {\n      if (s.length > 0) {\n        s += ' ';\n      }\n      s += errorMessage;\n    }\n  }\n  return Error(s);\n}\n\n/**\n * Convenience field mapping in the IAM credential type.\n */\nGoogleAuth.prototype.IAMAuth = require('./iam.js');\n\n/**\n * Convenience field mapping in the Compute credential type.\n */\nGoogleAuth.prototype.Compute = require('./computeclient.js');\n\n/**\n * Convenience field mapping in the JWT credential type.\n */\nGoogleAuth.prototype.JWT = require('./jwtclient.js');\n\n/**\n * Convenience field mapping in the JWT Access credential type.\n */\nGoogleAuth.prototype.JWTAccess = require('./jwtaccess.js');\n\n/**\n * Convenience field mapping in the OAuth2 credential type.\n */\nGoogleAuth.prototype.OAuth2 = require('./oauth2client.js');\n\n/**\n * Convenience field mapping to the UserRefreshClient credential type.\n */\nGoogleAuth.prototype.UserRefreshClient = require('./refreshclient.js');\n\n/**\n * Caches a value indicating whether the auth layer is running on Google Compute Engine.\n * @private\n */\nGoogleAuth.prototype._isGCE = false;\n\n/**\n * Caches a value indicating whether we've checked whether the auth layer is running on\n * Google Compute Engine.\n * @private\n */\nGoogleAuth.prototype._checked_isGCE = false;\n\n/**\n * Obtains the default project ID for the application..\n * @param {function=} opt_callback Optional callback.\n */\nGoogleAuth.prototype.getDefaultProjectId = function(opt_callback) {\n  var that = this;\n\n  // In implicit case, supports three environments. In order of precedence, the\n  // implicit environments are:\n  //\n  // * GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n  // * GOOGLE_APPLICATION_CREDENTIALS JSON file\n  // * Get default service project from\n  //  ``$ gcloud beta auth application-default login``\n  // * Google App Engine application ID (Not implemented yet)\n  // * Google Compute Engine project ID (from metadata server) (Not implemented yet)\n\n  if (that._cachedProjectId) {\n    process.nextTick(function() {\n      callback(opt_callback, null, that._cachedProjectId);\n    });\n  } else {\n    var my_callback = function(err, projectId) {\n      if (!err && projectId) {\n        that._cachedprojectId = projectId;\n      }\n      process.nextTick(function() {\n        callback(opt_callback, err, projectId);\n      });\n    };\n\n    // environment variable\n    if (that._getProductionProjectId(my_callback)) {\n      return;\n    }\n\n    // json file\n    that._getFileProjectId(function(err, projectId) {\n      if (err || projectId) {\n        my_callback(err, projectId);\n        return;\n      }\n\n      // Google Cloud SDK default project id\n      that._getDefaultServiceProjectId(function(err, projectId) {\n        if (err || projectId) {\n          my_callback(err, projectId);\n          return;\n        }\n\n        // Get project ID from Compute Engine metadata server\n        that._getGCEProjectId(my_callback);\n      });\n    });\n  }\n};\n\n/**\n * Loads the project id from environment variables.\n * @param {function} _callback Callback.\n * @api private\n */\nGoogleAuth.prototype._getProductionProjectId = function(_callback) {\n  var projectId = this._getEnv('GCLOUD_PROJECT') || this._getEnv('GOOGLE_CLOUD_PROJECT');\n  if (projectId) {\n    process.nextTick(function() {\n      callback(_callback, null, projectId);\n    });\n  }\n  return projectId;\n};\n\n/**\n * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n * @param {function} _callback Callback.\n * @api private\n */\nGoogleAuth.prototype._getFileProjectId = function(_callback) {\n  var that = this;\n  if (that._cachedCredential) {\n    // Try to read the project ID from the cached credentials file\n    process.nextTick(function() {\n      callback(_callback, null, that._cachedCredential.projectId);\n    });\n    return;\n  }\n\n  // Try to load a credentials file and read its project ID\n  var pathExists = that._tryGetApplicationCredentialsFromEnvironmentVariable(function(err, result) {\n    if (!err && result) {\n      callback(_callback, null, result.projectId);\n      return;\n    }\n    callback(_callback, err);\n  });\n\n  if (!pathExists) {\n    callback(_callback, null);\n  }\n};\n\n/**\n * Loads the default project of the Google Cloud SDK.\n * @param {function} _callback Callback.\n * @api private\n */\nGoogleAuth.prototype._getDefaultServiceProjectId = function(_callback) {\n  this._getSDKDefaultProjectId(function(err, stdout) {\n    var projectId;\n    if (!err && stdout) {\n      try {\n        projectId = JSON.parse(stdout).core.project;\n      } catch (err) {\n        projectId = null;\n      }\n    }\n    // Ignore any errors\n    callback(_callback, null, projectId);\n  });\n};\n\n/**\n * Run the Google Cloud SDK command that prints the default project ID\n * @param {function} _callback Callback.\n * @api private\n */\nGoogleAuth.prototype._getSDKDefaultProjectId = function(_callback) {\n  exec('gcloud -q config list core/project --format=json', _callback);\n};\n\n/**\n * Gets the Compute Engine project ID if it can be inferred.\n * Uses 169.254.169.254 for the metadata server to avoid request\n * latency from DNS lookup.\n * See https://cloud.google.com/compute/docs/metadata#metadataserver\n * for information about this IP address. (This IP is also used for\n * Amazon EC2 instances, so the metadata flavor is crucial.)\n * See https://github.com/google/oauth2client/issues/93 for context about\n * DNS latency.\n *\n * @param {function} _callback Callback.\n * @api private\n */\nGoogleAuth.prototype._getGCEProjectId = function(_callback) {\n  if (!this.transporter) {\n    this.transporter = new DefaultTransporter();\n  }\n  this.transporter.request({\n    method: 'GET',\n    uri: 'http://169.254.169.254/computeMetadata/v1/project/project-id',\n    headers: {\n      'Metadata-Flavor': 'Google'\n    }\n  }, function(err, body, res) {\n    if (err || !res || res.statusCode !== 200 || !body) {\n      callback(_callback, null);\n      return;\n    }\n    // Ignore any errors\n    callback(_callback, null, body);\n  });\n};\n\n/**\n * Obtains the default service-level credentials for the application..\n * @param {function=} opt_callback Optional callback.\n */\nGoogleAuth.prototype.getApplicationDefault = function(opt_callback) {\n  var that = this;\n\n  // If we've already got a cached credential, just return it.\n  if (that._cachedCredential) {\n    process.nextTick(function() {\n      callback(opt_callback, null, that._cachedCredential, that._cachedProjectId);\n    });\n  } else {\n    // Inject our own callback routine, which will cache the credential once it's been created.\n    // It also allows us to ensure that the ultimate callback is always async.\n    var my_callback = function(err, result) {\n      if (!err && result) {\n        that._cachedCredential = result;\n        that.getDefaultProjectId(function(err, projectId) {\n          process.nextTick(function() {\n            // Ignore default project error\n            callback(opt_callback, null, result, projectId);\n          });\n        });\n      } else {\n        process.nextTick(function() {\n          callback(opt_callback, err, result);\n        });\n      }\n    };\n    // Check for the existence of a local environment variable pointing to the\n    // location of the credential file. This is typically used in local developer scenarios.\n    if (that._tryGetApplicationCredentialsFromEnvironmentVariable(my_callback)) {\n      return;\n    }\n\n    // Look in the well-known credential file location.\n    if (that._tryGetApplicationCredentialsFromWellKnownFile(my_callback)) {\n      return;\n    }\n\n    // Determine if we're running on GCE.\n    that._checkIsGCE(function(gce) {\n      if (gce) {\n        // For GCE, just return a default ComputeClient. It will take care of the rest.\n        my_callback(null, new that.ComputeClient());\n      } else {\n        // We failed to find the default credentials. Bail out with an error.\n        my_callback(new Error('Could not load the default credentials. Browse to ' +\n          'https://developers.google.com/accounts/docs/application-default-credentials for ' +\n          'more information.'));\n      }\n    });\n  }\n};\n\n/**\n * Determines whether the auth layer is running on Google Compute Engine.\n * @param {function=} callback The callback.\n * @api private\n */\nGoogleAuth.prototype._checkIsGCE = function(callback) {\n  var that = this;\n  if (that._checked_isGCE) {\n    callback(that._isGCE);\n  } else {\n    if (!that.transporter) {\n      that.transporter = new DefaultTransporter();\n    }\n    that.transporter.request({\n      method: 'GET',\n      uri: 'http://metadata.google.internal',\n      json: true\n    }, function(err, body, res) {\n      if (!err && res && res.headers) {\n        that._isGCE = res.headers['metadata-flavor'] === 'Google';\n      }\n      that._checked_isGCE = true;\n      callback(that._isGCE);\n    });\n  }\n};\n\n/**\n * Attempts to load default credentials from the environment variable path..\n * @param {function=} opt_callback Optional callback.\n * @return {boolean} Returns true if the callback has been executed; false otherwise.\n * @api private\n */\nGoogleAuth.prototype._tryGetApplicationCredentialsFromEnvironmentVariable =\n  function(opt_callback) {\n\n    var that = this;\n    var credentialsPath = that._getEnv('GOOGLE_APPLICATION_CREDENTIALS');\n    if (!credentialsPath || credentialsPath.length === 0) {\n      return false;\n    }\n    that._getApplicationCredentialsFromFilePath(credentialsPath, function(err, result) {\n      var wrappedError = null;\n      if (err) {\n        wrappedError = createError(\n            'Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS ' +\n            'environment variable.',\n          err);\n      }\n      callback(opt_callback, wrappedError, result);\n    });\n    return true;\n  };\n\n/**\n * Attempts to load default credentials from a well-known file location\n * @param {function=} opt_callback Optional callback.\n * @return {boolean} Returns true if the callback has been executed; false otherwise.\n * @api private\n */\nGoogleAuth.prototype._tryGetApplicationCredentialsFromWellKnownFile =\n  function(opt_callback) {\n\n    var that = this;\n    // First, figure out the location of the file, depending upon the OS type.\n    var location = null;\n    if (that._isWindows()) {\n      // Windows\n      location = that._getEnv('APPDATA');\n    } else {\n      // Linux or Mac\n      var home = that._getEnv('HOME');\n      if (home) {\n        location = that._pathJoin(home, '.config');\n      }\n    }\n    // If we found the root path, expand it.\n    if (location) {\n      location = that._pathJoin(location, 'gcloud');\n      location = that._pathJoin(location, 'application_default_credentials.json');\n      location = that._mockWellKnownFilePath(location);\n      // Check whether the file exists.\n      if (!that._fileExists(location)) {\n        location = null;\n      }\n    }\n    // The file does not exist.\n    if (!location) {\n      return false;\n    }\n    // The file seems to exist. Try to use it.\n    this._getApplicationCredentialsFromFilePath(location, opt_callback);\n    return true;\n  };\n\n/**\n * Attempts to load default credentials from a file at the given path..\n * @param {string=} filePath The path to the file to read.\n * @param {function=} opt_callback Optional callback.\n * @api private\n */\nGoogleAuth.prototype._getApplicationCredentialsFromFilePath =\n  function(filePath, opt_callback) {\n\n    var that = this;\n    var error = null;\n    // Make sure the path looks like a string.\n    if (!filePath || filePath.length === 0) {\n      error = new Error('The file path is invalid.');\n    }\n\n    // Make sure there is a file at the path. lstatSync will throw if there is nothing there.\n    if (!error) {\n      try {\n        // Resolve path to actual file in case of symlink. Expect a thrown error if not resolvable.\n        filePath = fs.realpathSync(filePath);\n\n        if (!fs.lstatSync(filePath).isFile()) {\n          throw '';\n        }\n      } catch (err) {\n        error = createError(util.format('The file at %s does not exist, or it is not a file.',\n          filePath), err);\n      }\n    }\n    // Now open a read stream on the file, and parse it.\n    if (!error) {\n      try {\n        var stream = that._createReadStream(filePath);\n        that.fromStream(stream, opt_callback);\n      } catch (err) {\n        error = createError(util.format('Unable to read the file at %s.', filePath), err);\n      }\n    }\n    if (error) {\n      callback(opt_callback, error);\n    }\n  };\n\n/**\n * Create a credentials instance using the given input options.\n * @param {object=} json The input object.\n * @param {function=} opt_callback Optional callback.\n */\nGoogleAuth.prototype.fromJSON = function(json, opt_callback) {\n  var that = this;\n  var client;\n  if (!json) {\n    callback(opt_callback, new Error(\n      'Must pass in a JSON object containing the Google auth settings.'));\n    return;\n  }\n  if (json.type === 'authorized_user') {\n    client = new that.UserRefreshClient();\n  } else {\n    client = new that.JWTClient();\n  }\n  client.fromJSON(json, function(err) {\n    if (err) {\n      callback(opt_callback, err);\n    } else {\n      callback(opt_callback, null, client);\n    }\n  });\n};\n\n/**\n * Create a credentials instance using the given input stream.\n * @param {object=} stream The input stream.\n * @param {function=} opt_callback Optional callback.\n */\nGoogleAuth.prototype.fromStream = function(stream, opt_callback) {\n  var that = this;\n  if (!stream) {\n    process.nextTick(function() {\n      callback(opt_callback, new Error(\n          'Must pass in a stream containing the Google auth settings.'));\n    });\n    return;\n  }\n  var s = '';\n  stream.setEncoding('utf8');\n  stream.on('data', function (chunk) {\n    s += chunk;\n  });\n  stream.on('end', function () {\n    try {\n      var data = JSON.parse(s);\n      that.fromJSON(data, opt_callback);\n    } catch (err) {\n      callback(opt_callback, err);\n    }\n  });\n};\n\n/**\n * Determines whether the current operating system is Windows.\n * @api private\n * */\nGoogleAuth.prototype._isWindows = function() {\n  var sys = this._osPlatform();\n  if (sys && sys.length >= 3) {\n    if (sys.substring(0, 3).toLowerCase() === 'win') {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Creates a file stream. Allows mocking.\n * @api private\n * */\nGoogleAuth.prototype._createReadStream = function(filePath) {\n  return fs.createReadStream(filePath);\n};\n\n/**\n * Gets the value of the environment variable with the given name. Allows mocking.\n * @api private\n * */\nGoogleAuth.prototype._getEnv = function(name) {\n  return process.env[name];\n};\n\n/**\n * Gets the current operating system platform. Allows mocking.\n * @api private\n * */\nGoogleAuth.prototype._osPlatform = function() {\n  return os.platform();\n};\n\n/**\n * Determines whether a file exists. Allows mocking.\n * @api private\n * */\nGoogleAuth.prototype._fileExists = function(filePath) {\n  return fs.existsSync(filePath);\n};\n\n/**\n * Joins two parts of a path. Allows mocking.\n * @api private\n * */\nGoogleAuth.prototype._pathJoin = function(item1, item2) {\n  return path.join(item1, item2);\n};\n\n/**\n * Allows mocking of the path to a well-known file.\n * @api private\n * */\nGoogleAuth.prototype._mockWellKnownFilePath = function(filePath) {\n  return filePath;\n};\n\n/**\n * Export GoogleAuth.\n */\nmodule.exports = GoogleAuth;\n"]},"metadata":{},"sourceType":"script"}