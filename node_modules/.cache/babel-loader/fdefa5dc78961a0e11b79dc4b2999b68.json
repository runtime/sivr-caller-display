{"ast":null,"code":"var path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar _mkdirs = require('../mkdirs');\n\nvar mkdirs = _mkdirs.mkdirs;\nvar mkdirsSync = _mkdirs.mkdirsSync;\n\nvar _symlinkPaths = require('./symlink-paths');\n\nvar symlinkPaths = _symlinkPaths.symlinkPaths;\nvar symlinkPathsSync = _symlinkPaths.symlinkPathsSync;\n\nvar _symlinkType = require('./symlink-type');\n\nvar symlinkType = _symlinkType.symlinkType;\nvar symlinkTypeSync = _symlinkType.symlinkTypeSync;\n\nfunction createSymlink(srcpath, dstpath, type, callback) {\n  callback = typeof type === 'function' ? type : callback;\n  type = typeof type === 'function' ? false : type;\n  fs.exists(dstpath, function (destinationExists) {\n    if (destinationExists) return callback(null);\n    symlinkPaths(srcpath, dstpath, function (err, relative) {\n      if (err) return callback(err);\n      srcpath = relative.toDst;\n      symlinkType(relative.toCwd, type, function (err, type) {\n        if (err) return callback(err);\n        var dir = path.dirname(dstpath);\n        fs.exists(dir, function (dirExists) {\n          if (dirExists) return fs.symlink(srcpath, dstpath, type, callback);\n          mkdirs(dir, function (err) {\n            if (err) return callback(err);\n            fs.symlink(srcpath, dstpath, type, callback);\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction createSymlinkSync(srcpath, dstpath, type, callback) {\n  callback = typeof type === 'function' ? type : callback;\n  type = typeof type === 'function' ? false : type;\n  var destinationExists = fs.existsSync(dstpath);\n  if (destinationExists) return undefined;\n  var relative = symlinkPathsSync(srcpath, dstpath);\n  srcpath = relative.toDst;\n  type = symlinkTypeSync(relative.toCwd, type);\n  var dir = path.dirname(dstpath);\n  var exists = fs.existsSync(dir);\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type);\n  mkdirsSync(dir);\n  return fs.symlinkSync(srcpath, dstpath, type);\n}\n\nmodule.exports = {\n  createSymlink: createSymlink,\n  createSymlinkSync: createSymlinkSync,\n  // alias\n  ensureSymlink: createSymlink,\n  ensureSymlinkSync: createSymlinkSync\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/node_modules/fs-extra/lib/ensure/symlink.js"],"names":["path","require","fs","_mkdirs","mkdirs","mkdirsSync","_symlinkPaths","symlinkPaths","symlinkPathsSync","_symlinkType","symlinkType","symlinkTypeSync","createSymlink","srcpath","dstpath","type","callback","exists","destinationExists","err","relative","toDst","toCwd","dir","dirname","dirExists","symlink","createSymlinkSync","existsSync","undefined","symlinkSync","module","exports","ensureSymlink","ensureSymlinkSync"],"mappings":"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","sourcesContent":["var path = require('path')\nvar fs = require('graceful-fs')\nvar _mkdirs = require('../mkdirs')\nvar mkdirs = _mkdirs.mkdirs\nvar mkdirsSync = _mkdirs.mkdirsSync\n\nvar _symlinkPaths = require('./symlink-paths')\nvar symlinkPaths = _symlinkPaths.symlinkPaths\nvar symlinkPathsSync = _symlinkPaths.symlinkPathsSync\n\nvar _symlinkType = require('./symlink-type')\nvar symlinkType = _symlinkType.symlinkType\nvar symlinkTypeSync = _symlinkType.symlinkTypeSync\n\nfunction createSymlink (srcpath, dstpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n\n  fs.exists(dstpath, function (destinationExists) {\n    if (destinationExists) return callback(null)\n    symlinkPaths(srcpath, dstpath, function (err, relative) {\n      if (err) return callback(err)\n      srcpath = relative.toDst\n      symlinkType(relative.toCwd, type, function (err, type) {\n        if (err) return callback(err)\n        var dir = path.dirname(dstpath)\n        fs.exists(dir, function (dirExists) {\n          if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)\n          mkdirs(dir, function (err) {\n            if (err) return callback(err)\n            fs.symlink(srcpath, dstpath, type, callback)\n          })\n        })\n      })\n    })\n  })\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n\n  var destinationExists = fs.existsSync(dstpath)\n  if (destinationExists) return undefined\n\n  var relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  var dir = path.dirname(dstpath)\n  var exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: createSymlink,\n  createSymlinkSync: createSymlinkSync,\n  // alias\n  ensureSymlink: createSymlink,\n  ensureSymlinkSync: createSymlinkSync\n}\n"]},"metadata":{},"sourceType":"script"}