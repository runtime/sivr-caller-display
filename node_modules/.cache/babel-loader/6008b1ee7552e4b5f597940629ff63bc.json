{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst api = require(\"../api\");\n\nconst utils = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst pkg = require(\"../../package.json\");\n\nvar UploadStatus;\n\n(function (UploadStatus) {\n  UploadStatus[\"SUCCESS\"] = \"SUCCESS\";\n  UploadStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n  UploadStatus[\"ERROR\"] = \"ERROR\";\n})(UploadStatus = exports.UploadStatus || (exports.UploadStatus = {}));\n\nclass AppDistributionClient {\n  constructor(appId) {\n    this.appId = appId;\n  }\n\n  getApp() {\n    return __awaiter(this, void 0, void 0, function* () {\n      utils.logBullet(\"getting app details...\");\n      const apiResponse = yield api.request(\"GET\", `/v1alpha/apps/${this.appId}`, {\n        origin: api.appDistributionOrigin,\n        auth: true\n      });\n      return _.get(apiResponse, \"body\");\n    });\n  }\n\n  getJwtToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const apiResponse = yield api.request(\"GET\", `/v1alpha/apps/${this.appId}/jwt`, {\n        auth: true,\n        origin: api.appDistributionOrigin\n      });\n      return _.get(apiResponse, \"body.token\");\n    });\n  }\n\n  uploadDistribution(token, distribution) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const apiResponse = yield api.request(\"POST\", \"/spi/v1/jwt_distributions\", {\n        origin: api.appDistributionUploadOrigin,\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"X-APP-DISTRO-API-CLIENT-ID\": pkg.name,\n          \"X-APP-DISTRO-API-CLIENT-TYPE\": distribution.platform(),\n          \"X-APP-DISTRO-API-CLIENT-VERSION\": pkg.version\n        },\n        files: {\n          file: {\n            stream: distribution.readStream(),\n            size: distribution.fileSize(),\n            contentType: \"multipart/form-data\"\n          }\n        }\n      });\n      return _.get(apiResponse, \"response.headers.etag\");\n    });\n  }\n\n  pollReleaseIdByHash(hash, retryCount = 0) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uploadStatus = yield this.getUploadStatus(hash);\n\n      if (uploadStatus.status === UploadStatus.IN_PROGRESS) {\n        if (retryCount >= AppDistributionClient.MAX_POLLING_RETRIES) {\n          throw new error_1.FirebaseError(\"it took longer than expected to process your binary, please try again\", {\n            exit: 1\n          });\n        }\n\n        yield new Promise(resolve => setTimeout(resolve, AppDistributionClient.POLLING_INTERVAL_MS));\n        return this.pollReleaseIdByHash(hash, retryCount + 1);\n      } else if (uploadStatus.status === UploadStatus.SUCCESS) {\n        return uploadStatus.release.id;\n      } else {\n        throw new error_1.FirebaseError(`error processing your binary: ${uploadStatus.message} (Code: ${uploadStatus.errorCode})`);\n      }\n    });\n  }\n\n  getUploadStatus(hash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const apiResponse = yield api.request(\"GET\", `/v1alpha/apps/${this.appId}/upload_status/${hash}`, {\n        origin: api.appDistributionOrigin,\n        auth: true\n      });\n      return _.get(apiResponse, \"body\");\n    });\n  }\n\n  addReleaseNotes(releaseId, releaseNotes) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!releaseNotes) {\n        utils.logWarning(\"no release notes specified, skipping\");\n        return;\n      }\n\n      utils.logBullet(\"adding release notes...\");\n      const data = {\n        releaseNotes: {\n          releaseNotes\n        }\n      };\n\n      try {\n        yield api.request(\"POST\", `/v1alpha/apps/${this.appId}/releases/${releaseId}/notes`, {\n          origin: api.appDistributionOrigin,\n          auth: true,\n          data\n        });\n      } catch (err) {\n        throw new error_1.FirebaseError(`failed to add release notes with ${err.message}`, {\n          exit: 1\n        });\n      }\n\n      utils.logSuccess(\"added release notes successfully\");\n    });\n  }\n\n  enableAccess(releaseId, emails = [], groupIds = []) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (emails.length === 0 && groupIds.length === 0) {\n        utils.logWarning(\"no testers or groups specified, skipping\");\n        return;\n      }\n\n      utils.logBullet(\"adding testers/groups...\");\n      const data = {\n        emails,\n        groupIds\n      };\n\n      try {\n        yield api.request(\"POST\", `/v1alpha/apps/${this.appId}/releases/${releaseId}/enable_access`, {\n          origin: api.appDistributionOrigin,\n          auth: true,\n          data\n        });\n      } catch (err) {\n        let errorMessage = err.message;\n\n        if (_.has(err, \"context.body.error\")) {\n          const errorStatus = _.get(err, \"context.body.error.status\");\n\n          if (errorStatus === \"FAILED_PRECONDITION\") {\n            errorMessage = \"invalid testers\";\n          } else if (errorStatus === \"INVALID_ARGUMENT\") {\n            errorMessage = \"invalid groups\";\n          }\n        }\n\n        throw new error_1.FirebaseError(`failed to add testers/groups: ${errorMessage}`, {\n          exit: 1\n        });\n      }\n\n      utils.logSuccess(\"added testers/groups successfully\");\n    });\n  }\n\n}\n\nAppDistributionClient.MAX_POLLING_RETRIES = 15;\nAppDistributionClient.POLLING_INTERVAL_MS = 2000;\nexports.AppDistributionClient = AppDistributionClient;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/appdistribution/client.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","api","utils","error_1","pkg","UploadStatus","AppDistributionClient","constructor","appId","getApp","logBullet","apiResponse","request","origin","appDistributionOrigin","auth","get","getJwtToken","uploadDistribution","token","distribution","appDistributionUploadOrigin","headers","Authorization","name","platform","version","files","file","stream","readStream","size","fileSize","contentType","pollReleaseIdByHash","hash","retryCount","uploadStatus","getUploadStatus","status","IN_PROGRESS","MAX_POLLING_RETRIES","FirebaseError","exit","setTimeout","POLLING_INTERVAL_MS","SUCCESS","release","id","message","errorCode","addReleaseNotes","releaseId","releaseNotes","logWarning","data","err","logSuccess","enableAccess","emails","groupIds","length","errorMessage","has","errorStatus"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst api = require(\"../api\");\nconst utils = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst pkg = require(\"../../package.json\");\nvar UploadStatus;\n(function (UploadStatus) {\n    UploadStatus[\"SUCCESS\"] = \"SUCCESS\";\n    UploadStatus[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    UploadStatus[\"ERROR\"] = \"ERROR\";\n})(UploadStatus = exports.UploadStatus || (exports.UploadStatus = {}));\nclass AppDistributionClient {\n    constructor(appId) {\n        this.appId = appId;\n    }\n    getApp() {\n        return __awaiter(this, void 0, void 0, function* () {\n            utils.logBullet(\"getting app details...\");\n            const apiResponse = yield api.request(\"GET\", `/v1alpha/apps/${this.appId}`, {\n                origin: api.appDistributionOrigin,\n                auth: true,\n            });\n            return _.get(apiResponse, \"body\");\n        });\n    }\n    getJwtToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const apiResponse = yield api.request(\"GET\", `/v1alpha/apps/${this.appId}/jwt`, {\n                auth: true,\n                origin: api.appDistributionOrigin,\n            });\n            return _.get(apiResponse, \"body.token\");\n        });\n    }\n    uploadDistribution(token, distribution) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const apiResponse = yield api.request(\"POST\", \"/spi/v1/jwt_distributions\", {\n                origin: api.appDistributionUploadOrigin,\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    \"X-APP-DISTRO-API-CLIENT-ID\": pkg.name,\n                    \"X-APP-DISTRO-API-CLIENT-TYPE\": distribution.platform(),\n                    \"X-APP-DISTRO-API-CLIENT-VERSION\": pkg.version,\n                },\n                files: {\n                    file: {\n                        stream: distribution.readStream(),\n                        size: distribution.fileSize(),\n                        contentType: \"multipart/form-data\",\n                    },\n                },\n            });\n            return _.get(apiResponse, \"response.headers.etag\");\n        });\n    }\n    pollReleaseIdByHash(hash, retryCount = 0) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const uploadStatus = yield this.getUploadStatus(hash);\n            if (uploadStatus.status === UploadStatus.IN_PROGRESS) {\n                if (retryCount >= AppDistributionClient.MAX_POLLING_RETRIES) {\n                    throw new error_1.FirebaseError(\"it took longer than expected to process your binary, please try again\", { exit: 1 });\n                }\n                yield new Promise((resolve) => setTimeout(resolve, AppDistributionClient.POLLING_INTERVAL_MS));\n                return this.pollReleaseIdByHash(hash, retryCount + 1);\n            }\n            else if (uploadStatus.status === UploadStatus.SUCCESS) {\n                return uploadStatus.release.id;\n            }\n            else {\n                throw new error_1.FirebaseError(`error processing your binary: ${uploadStatus.message} (Code: ${uploadStatus.errorCode})`);\n            }\n        });\n    }\n    getUploadStatus(hash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const apiResponse = yield api.request(\"GET\", `/v1alpha/apps/${this.appId}/upload_status/${hash}`, {\n                origin: api.appDistributionOrigin,\n                auth: true,\n            });\n            return _.get(apiResponse, \"body\");\n        });\n    }\n    addReleaseNotes(releaseId, releaseNotes) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!releaseNotes) {\n                utils.logWarning(\"no release notes specified, skipping\");\n                return;\n            }\n            utils.logBullet(\"adding release notes...\");\n            const data = {\n                releaseNotes: {\n                    releaseNotes,\n                },\n            };\n            try {\n                yield api.request(\"POST\", `/v1alpha/apps/${this.appId}/releases/${releaseId}/notes`, {\n                    origin: api.appDistributionOrigin,\n                    auth: true,\n                    data,\n                });\n            }\n            catch (err) {\n                throw new error_1.FirebaseError(`failed to add release notes with ${err.message}`, { exit: 1 });\n            }\n            utils.logSuccess(\"added release notes successfully\");\n        });\n    }\n    enableAccess(releaseId, emails = [], groupIds = []) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (emails.length === 0 && groupIds.length === 0) {\n                utils.logWarning(\"no testers or groups specified, skipping\");\n                return;\n            }\n            utils.logBullet(\"adding testers/groups...\");\n            const data = {\n                emails,\n                groupIds,\n            };\n            try {\n                yield api.request(\"POST\", `/v1alpha/apps/${this.appId}/releases/${releaseId}/enable_access`, {\n                    origin: api.appDistributionOrigin,\n                    auth: true,\n                    data,\n                });\n            }\n            catch (err) {\n                let errorMessage = err.message;\n                if (_.has(err, \"context.body.error\")) {\n                    const errorStatus = _.get(err, \"context.body.error.status\");\n                    if (errorStatus === \"FAILED_PRECONDITION\") {\n                        errorMessage = \"invalid testers\";\n                    }\n                    else if (errorStatus === \"INVALID_ARGUMENT\") {\n                        errorMessage = \"invalid groups\";\n                    }\n                }\n                throw new error_1.FirebaseError(`failed to add testers/groups: ${errorMessage}`, { exit: 1 });\n            }\n            utils.logSuccess(\"added testers/groups successfully\");\n        });\n    }\n}\nAppDistributionClient.MAX_POLLING_RETRIES = 15;\nAppDistributionClient.POLLING_INTERVAL_MS = 2000;\nexports.AppDistributionClient = AppDistributionClient;\n"]},"metadata":{},"sourceType":"script"}