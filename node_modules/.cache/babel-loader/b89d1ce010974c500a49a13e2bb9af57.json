{"ast":null,"code":"// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n'use strict';\n\nconst gapicConfig = require('./subscriber_client_config.json');\n\nconst gax = require('google-gax');\n\nconst path = require('path');\n\nconst VERSION = require('../../../package.json').version;\n/**\n * The service that an application uses to manipulate subscriptions and to\n * consume messages from a subscription via the `Pull` method or by\n * establishing a bi-directional stream using the `StreamingPull` method.\n *\n * @class\n * @memberof v1\n */\n\n\nclass SubscriberClient {\n  /**\n   * Construct an instance of SubscriberClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {function} [options.promise] - Custom promise module to use instead\n   *     of native Promises.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    opts = opts || {};\n    this._descriptors = {};\n\n    if (global.isBrowser) {\n      // If we're in browser, we use gRPC fallback.\n      opts.fallback = true;\n    } // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n\n\n    const gaxModule = !global.isBrowser && opts.fallback ? gax.fallback : gax;\n    const servicePath = opts.servicePath || opts.apiEndpoint || this.constructor.servicePath; // Ensure that options include the service address and port.\n\n    opts = Object.assign({\n      clientConfig: {},\n      port: this.constructor.port,\n      servicePath\n    }, opts); // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    const gaxGrpc = new gaxModule.GrpcClient(opts); // Save the auth object to the client, for use by other methods.\n\n    this.auth = gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    }\n\n    clientHeader.push(`gax/${gaxModule.version}`);\n\n    if (opts.fallback) {\n      clientHeader.push(`gl-web/${gaxModule.version}`);\n    } else {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    }\n\n    clientHeader.push(`gapic/${VERSION}`);\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    const protos = gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this._pathTemplates = {\n      projectPathTemplate: new gaxModule.PathTemplate('projects/{project}'),\n      snapshotPathTemplate: new gaxModule.PathTemplate('projects/{project}/snapshots/{snapshot}'),\n      subscriptionPathTemplate: new gaxModule.PathTemplate('projects/{project}/subscriptions/{subscription}'),\n      topicPathTemplate: new gaxModule.PathTemplate('projects/{project}/topics/{topic}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this._descriptors.page = {\n      listSubscriptions: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subscriptions'),\n      listSnapshots: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'snapshots')\n    }; // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n\n    this._descriptors.stream = {\n      streamingPull: new gaxModule.StreamDescriptor(gax.StreamType.BIDI_STREAMING)\n    }; // Put together the default options sent with requests.\n\n    const defaults = gaxGrpc.constructSettings('google.pubsub.v1.Subscriber', gapicConfig, opts.clientConfig, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {}; // Put together the \"service stub\" for\n    // google.iam.v1.IAMPolicy.\n\n    const iamPolicyStub = gaxGrpc.createStub(opts.fallback ? protos.lookupService('google.iam.v1.IAMPolicy') : protos.google.iam.v1.IAMPolicy, opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const iamPolicyStubMethods = ['setIamPolicy', 'getIamPolicy', 'testIamPermissions'];\n\n    for (const methodName of iamPolicyStubMethods) {\n      const innerCallPromise = iamPolicyStub.then(stub => (...args) => {\n        return stub[methodName].apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this._innerApiCalls[methodName] = gaxModule.createApiCall(innerCallPromise, defaults[methodName], this._descriptors.page[methodName] || this._descriptors.stream[methodName]);\n    } // Put together the \"service stub\" for\n    // google.pubsub.v1.Subscriber.\n\n\n    const subscriberStub = gaxGrpc.createStub(opts.fallback ? protos.lookupService('google.pubsub.v1.Subscriber') : protos.google.pubsub.v1.Subscriber, opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const subscriberStubMethods = ['createSubscription', 'getSubscription', 'updateSubscription', 'listSubscriptions', 'deleteSubscription', 'modifyAckDeadline', 'acknowledge', 'pull', 'streamingPull', 'modifyPushConfig', 'listSnapshots', 'createSnapshot', 'updateSnapshot', 'deleteSnapshot', 'seek'];\n\n    for (const methodName of subscriberStubMethods) {\n      const innerCallPromise = subscriberStub.then(stub => (...args) => {\n        return stub[methodName].apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this._innerApiCalls[methodName] = gaxModule.createApiCall(innerCallPromise, defaults[methodName], this._descriptors.page[methodName] || this._descriptors.stream[methodName]);\n    } // note: editing generated code\n\n\n    this.waitForReady = function (deadline, callback) {\n      return subscriberStub.then(stub => stub.waitForReady(deadline, callback), callback);\n    };\n\n    this.getSubscriberStub = function () {\n      return subscriberStub;\n    };\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'pubsub.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'pubsub.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/pubsub'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    return this.auth.getProjectId(callback);\n  } // -------------------\n  // -- Service calls --\n  // -------------------\n\n  /**\n   * Creates a subscription to a given topic. See the\n   * <a href=\"https://cloud.google.com/pubsub/docs/admin#resource_names\">\n   * resource name rules</a>.\n   * If the subscription already exists, returns `ALREADY_EXISTS`.\n   * If the corresponding topic doesn't exist, returns `NOT_FOUND`.\n   *\n   * If the name is not provided in the request, the server will assign a random\n   * name for this subscription on the same project as the topic, conforming\n   * to the\n   * [resource name\n   * format](https://cloud.google.com/pubsub/docs/admin#resource_names). The\n   * generated name is populated in the returned Subscription object. Note that\n   * for REST API requests, you must specify a name in the request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The name of the subscription. It must have the format\n   *   `\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must\n   *   start with a letter, and contain only letters (`[A-Za-z]`), numbers\n   *   (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),\n   *   plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters\n   *   in length, and it must not start with `\"goog\"`\n   * @param {string} request.topic\n   *   The name of the topic from which this subscription is receiving messages.\n   *   Format is `projects/{project}/topics/{topic}`.\n   *   The value of this field will be `_deleted-topic_` if the topic has been\n   *   deleted.\n   * @param {Object} [request.pushConfig]\n   *   If push delivery is used with this subscription, this field is\n   *   used to configure it. An empty `pushConfig` signifies that the subscriber\n   *   will pull and ack messages using API methods.\n   *\n   *   This object should have the same structure as [PushConfig]{@link google.pubsub.v1.PushConfig}\n   * @param {number} [request.ackDeadlineSeconds]\n   *   The approximate amount of time (on a best-effort basis) Pub/Sub waits for\n   *   the subscriber to acknowledge receipt before resending the message. In the\n   *   interval after the message is delivered and before it is acknowledged, it\n   *   is considered to be <i>outstanding</i>. During that time period, the\n   *   message will not be redelivered (on a best-effort basis).\n   *\n   *   For pull subscriptions, this value is used as the initial value for the ack\n   *   deadline. To override this value for a given message, call\n   *   `ModifyAckDeadline` with the corresponding `ack_id` if using\n   *   non-streaming pull or send the `ack_id` in a\n   *   `StreamingModifyAckDeadlineRequest` if using streaming pull.\n   *   The minimum custom deadline you can specify is 10 seconds.\n   *   The maximum custom deadline you can specify is 600 seconds (10 minutes).\n   *   If this parameter is 0, a default value of 10 seconds is used.\n   *\n   *   For push delivery, this value is also used to set the request timeout for\n   *   the call to the push endpoint.\n   *\n   *   If the subscriber never acknowledges the message, the Pub/Sub\n   *   system will eventually redeliver the message.\n   * @param {boolean} [request.retainAckedMessages]\n   *   Indicates whether to retain acknowledged messages. If true, then\n   *   messages are not expunged from the subscription's backlog, even if they are\n   *   acknowledged, until they fall out of the `message_retention_duration`\n   *   window. This must be true if you would like to\n   *   <a\n   *   href=\"https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time\">\n   *   Seek to a timestamp</a>.\n   * @param {Object} [request.messageRetentionDuration]\n   *   How long to retain unacknowledged messages in the subscription's backlog,\n   *   from the moment a message is published.\n   *   If `retain_acked_messages` is true, then this also configures the retention\n   *   of acknowledged messages, and thus configures how far back in time a `Seek`\n   *   can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10\n   *   minutes.\n   *\n   *   This object should have the same structure as [Duration]{@link google.protobuf.Duration}\n   * @param {Object.<string, string>} [request.labels]\n   *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n   *   managing labels</a>.\n   * @param {boolean} [request.enableMessageOrdering]\n   *   If true, messages published with the same `ordering_key` in `PubsubMessage`\n   *   will be delivered to the subscribers in the order in which they\n   *   are received by the Pub/Sub system. Otherwise, they may be delivered in\n   *   any order.\n   *   <b>EXPERIMENTAL:</b> This feature is part of a closed alpha release. This\n   *   API might be changed in backward-incompatible ways and is not recommended\n   *   for production use. It is not subject to any SLA or deprecation policy.\n   * @param {Object} [request.expirationPolicy]\n   *   A policy that specifies the conditions for this subscription's expiration.\n   *   A subscription is considered active as long as any connected subscriber is\n   *   successfully consuming messages from the subscription or is issuing\n   *   operations on the subscription. If `expiration_policy` is not set, a\n   *   *default policy* with `ttl` of 31 days will be used. The minimum allowed\n   *   value for `expiration_policy.ttl` is 1 day.\n   *\n   *   This object should have the same structure as [ExpirationPolicy]{@link google.pubsub.v1.ExpirationPolicy}\n   * @param {Object} [request.deadLetterPolicy]\n   *   A policy that specifies the conditions for dead lettering messages in\n   *   this subscription. If dead_letter_policy is not set, dead lettering\n   *   is disabled.\n   *\n   *   The Cloud Pub/Sub service account associated with this subscriptions's\n   *   parent project (i.e.,\n   *   service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have\n   *   permission to Acknowledge() messages on this subscription.\n   *   <b>EXPERIMENTAL:</b> This feature is part of a closed alpha release. This\n   *   API might be changed in backward-incompatible ways and is not recommended\n   *   for production use. It is not subject to any SLA or deprecation policy.\n   *\n   *   This object should have the same structure as [DeadLetterPolicy]{@link google.pubsub.v1.DeadLetterPolicy}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * const request = {\n   *   name: formattedName,\n   *   topic: formattedTopic,\n   * };\n   * client.createSubscription(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  createSubscription(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.createSubscription(request, options, callback);\n  }\n  /**\n   * Gets the configuration details of a subscription.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The name of the subscription to get.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * client.getSubscription({subscription: formattedSubscription})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  getSubscription(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription\n    });\n    return this._innerApiCalls.getSubscription(request, options, callback);\n  }\n  /**\n   * Updates an existing subscription. Note that certain properties of a\n   * subscription, such as its topic, are not modifiable.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {Object} request.subscription\n   *   The updated subscription object.\n   *\n   *   This object should have the same structure as [Subscription]{@link google.pubsub.v1.Subscription}\n   * @param {Object} request.updateMask\n   *   Indicates which fields in the provided subscription to update.\n   *   Must be specified and non-empty.\n   *\n   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const ackDeadlineSeconds = 42;\n   * const subscription = {\n   *   ackDeadlineSeconds: ackDeadlineSeconds,\n   * };\n   * const pathsElement = 'ack_deadline_seconds';\n   * const paths = [pathsElement];\n   * const updateMask = {\n   *   paths: paths,\n   * };\n   * const request = {\n   *   subscription: subscription,\n   *   updateMask: updateMask,\n   * };\n   * client.updateSubscription(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  updateSubscription(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'subscription.name': request.subscription.name\n    });\n    return this._innerApiCalls.updateSubscription(request, options, callback);\n  }\n  /**\n   * Lists matching subscriptions.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list subscriptions.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Subscription]{@link google.pubsub.v1.Subscription}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListSubscriptionsResponse]{@link google.pubsub.v1.ListSubscriptionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Subscription]{@link google.pubsub.v1.Subscription}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Subscription]{@link google.pubsub.v1.Subscription} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListSubscriptionsResponse]{@link google.pubsub.v1.ListSubscriptionsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   * client.listSubscriptions({project: formattedProject})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listSubscriptions(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listSubscriptions({project: formattedProject}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  listSubscriptions(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project\n    });\n    return this._innerApiCalls.listSubscriptions(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listSubscriptions}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listSubscriptions} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list subscriptions.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Subscription]{@link google.pubsub.v1.Subscription} on 'data' event.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedProject = client.projectPath('[PROJECT]');\n   * client.listSubscriptionsStream({project: formattedProject})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n\n\n  listSubscriptionsStream(request, options) {\n    options = options || {};\n    return this._descriptors.page.listSubscriptions.createStream(this._innerApiCalls.listSubscriptions, request, options);\n  }\n  /**\n   * Deletes an existing subscription. All messages retained in the subscription\n   * are immediately dropped. Calls to `Pull` after deletion will return\n   * `NOT_FOUND`. After a subscription is deleted, a new one may be created with\n   * the same name, but the new one has no association with the old\n   * subscription or its topic unless the same topic is specified.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The subscription to delete.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * client.deleteSubscription({subscription: formattedSubscription}).catch(err => {\n   *   console.error(err);\n   * });\n   */\n\n\n  deleteSubscription(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription\n    });\n    return this._innerApiCalls.deleteSubscription(request, options, callback);\n  }\n  /**\n   * Modifies the ack deadline for a specific message. This method is useful\n   * to indicate that more time is needed to process a message by the\n   * subscriber, or to make the message available for redelivery if the\n   * processing was interrupted. Note that this does not modify the\n   * subscription-level `ackDeadlineSeconds` used for subsequent messages.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The name of the subscription.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {string[]} request.ackIds\n   *   List of acknowledgment IDs.\n   * @param {number} request.ackDeadlineSeconds\n   *   The new ack deadline with respect to the time this request was sent to\n   *   the Pub/Sub system. For example, if the value is 10, the new\n   *   ack deadline will expire 10 seconds after the `ModifyAckDeadline` call\n   *   was made. Specifying zero might immediately make the message available for\n   *   delivery to another subscriber client. This typically results in an\n   *   increase in the rate of message redeliveries (that is, duplicates).\n   *   The minimum deadline you can specify is 0 seconds.\n   *   The maximum deadline you can specify is 600 seconds (10 minutes).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const ackIds = [];\n   * const ackDeadlineSeconds = 0;\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   ackIds: ackIds,\n   *   ackDeadlineSeconds: ackDeadlineSeconds,\n   * };\n   * client.modifyAckDeadline(request).catch(err => {\n   *   console.error(err);\n   * });\n   */\n\n\n  modifyAckDeadline(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription\n    });\n    return this._innerApiCalls.modifyAckDeadline(request, options, callback);\n  }\n  /**\n   * Acknowledges the messages associated with the `ack_ids` in the\n   * `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages\n   * from the subscription.\n   *\n   * Acknowledging a message whose ack deadline has expired may succeed,\n   * but such a message may be redelivered later. Acknowledging a message more\n   * than once will not result in an error.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The subscription whose message is being acknowledged.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {string[]} request.ackIds\n   *   The acknowledgment ID for the messages being acknowledged that was returned\n   *   by the Pub/Sub system in the `Pull` response. Must not be empty.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const ackIds = [];\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   ackIds: ackIds,\n   * };\n   * client.acknowledge(request).catch(err => {\n   *   console.error(err);\n   * });\n   */\n\n\n  acknowledge(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription\n    });\n    return this._innerApiCalls.acknowledge(request, options, callback);\n  }\n  /**\n   * Pulls messages from the server. The server may return `UNAVAILABLE` if\n   * there are too many concurrent pull requests pending for the given\n   * subscription.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The subscription from which messages should be pulled.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {number} request.maxMessages\n   *   The maximum number of messages to return for this request. Must be a\n   *   positive integer. The Pub/Sub system may return fewer than the number\n   *   specified.\n   * @param {boolean} [request.returnImmediately]\n   *   If this field set to true, the system will respond immediately even if\n   *   it there are no messages available to return in the `Pull` response.\n   *   Otherwise, the system may wait (for a bounded amount of time) until at\n   *   least one message is available, rather than returning no messages.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [PullResponse]{@link google.pubsub.v1.PullResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [PullResponse]{@link google.pubsub.v1.PullResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const maxMessages = 0;\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   maxMessages: maxMessages,\n   * };\n   * client.pull(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  pull(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription\n    });\n    return this._innerApiCalls.pull(request, options, callback);\n  }\n  /**\n   * Establishes a stream with the server, which sends messages down to the\n   * client. The client streams acknowledgements and ack deadline modifications\n   * back to the server. The server will close the stream and return the status\n   * on any error. The server may close the stream with status `UNAVAILABLE` to\n   * reassign server-side resources, in which case, the client should\n   * re-establish the stream. Flow control can be achieved by configuring the\n   * underlying RPC channel.\n   *\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [StreamingPullRequest]{@link google.pubsub.v1.StreamingPullRequest} for write() method, and\n   *   will emit objects representing [StreamingPullResponse]{@link google.pubsub.v1.StreamingPullResponse} on 'data' event asynchronously.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const stream = client.streamingPull().on('data', response => {\n   *   // doThingsWith(response)\n   * });\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const streamAckDeadlineSeconds = 0;\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   streamAckDeadlineSeconds: streamAckDeadlineSeconds,\n   * };\n   * // Write request objects.\n   * stream.write(request);\n   */\n\n\n  streamingPull(options) {\n    options = options || {};\n    return this._innerApiCalls.streamingPull(options);\n  }\n  /**\n   * Modifies the `PushConfig` for a specified subscription.\n   *\n   * This may be used to change a push subscription to a pull one (signified by\n   * an empty `PushConfig`) or vice versa, or change the endpoint URL and other\n   * attributes of a push subscription. Messages will accumulate for delivery\n   * continuously through the call regardless of changes to the `PushConfig`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The name of the subscription.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {Object} request.pushConfig\n   *   The push configuration for future deliveries.\n   *\n   *   An empty `pushConfig` indicates that the Pub/Sub system should\n   *   stop pushing messages from the given subscription and allow\n   *   messages to be pulled and acknowledged - effectively pausing\n   *   the subscription if `Pull` or `StreamingPull` is not called.\n   *\n   *   This object should have the same structure as [PushConfig]{@link google.pubsub.v1.PushConfig}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const pushConfig = {};\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   pushConfig: pushConfig,\n   * };\n   * client.modifyPushConfig(request).catch(err => {\n   *   console.error(err);\n   * });\n   */\n\n\n  modifyPushConfig(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription\n    });\n    return this._innerApiCalls.modifyPushConfig(request, options, callback);\n  }\n  /**\n   * Lists the existing snapshots. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list snapshots.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListSnapshotsResponse]{@link google.pubsub.v1.ListSnapshotsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Snapshot]{@link google.pubsub.v1.Snapshot} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListSnapshotsResponse]{@link google.pubsub.v1.ListSnapshotsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   * client.listSnapshots({project: formattedProject})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listSnapshots(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listSnapshots({project: formattedProject}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  listSnapshots(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project\n    });\n    return this._innerApiCalls.listSnapshots(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listSnapshots}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listSnapshots} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list snapshots.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Snapshot]{@link google.pubsub.v1.Snapshot} on 'data' event.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedProject = client.projectPath('[PROJECT]');\n   * client.listSnapshotsStream({project: formattedProject})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n\n\n  listSnapshotsStream(request, options) {\n    options = options || {};\n    return this._descriptors.page.listSnapshots.createStream(this._innerApiCalls.listSnapshots, request, options);\n  }\n  /**\n   * Creates a snapshot from the requested subscription. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.\n   * <br><br>If the snapshot already exists, returns `ALREADY_EXISTS`.\n   * If the requested subscription doesn't exist, returns `NOT_FOUND`.\n   * If the backlog in the subscription is too old -- and the resulting snapshot\n   * would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.\n   * See also the `Snapshot.expire_time` field. If the name is not provided in\n   * the request, the server will assign a random\n   * name for this snapshot on the same project as the subscription, conforming\n   * to the\n   * [resource name\n   * format](https://cloud.google.com/pubsub/docs/admin#resource_names). The\n   * generated name is populated in the returned Snapshot object. Note that for\n   * REST API requests, you must specify a name in the request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Optional user-provided name for this snapshot.\n   *   If the name is not provided in the request, the server will assign a random\n   *   name for this snapshot on the same project as the subscription.\n   *   Note that for REST API requests, you must specify a name.  See the\n   *   <a href=\"https://cloud.google.com/pubsub/docs/admin#resource_names\">\n   *   resource name rules</a>.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {string} request.subscription\n   *   The subscription whose backlog the snapshot retains.\n   *   Specifically, the created snapshot is guaranteed to retain:\n   *    (a) The existing backlog on the subscription. More precisely, this is\n   *        defined as the messages in the subscription's backlog that are\n   *        unacknowledged upon the successful completion of the\n   *        `CreateSnapshot` request; as well as:\n   *    (b) Any messages published to the subscription's topic following the\n   *        successful completion of the CreateSnapshot request.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {Object.<string, string>} [request.labels]\n   *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n   *   managing labels</a>.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.snapshotPath('[PROJECT]', '[SNAPSHOT]');\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const request = {\n   *   name: formattedName,\n   *   subscription: formattedSubscription,\n   * };\n   * client.createSnapshot(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  createSnapshot(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.createSnapshot(request, options, callback);\n  }\n  /**\n   * Updates an existing snapshot. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {Object} request.snapshot\n   *   The updated snapshot object.\n   *\n   *   This object should have the same structure as [Snapshot]{@link google.pubsub.v1.Snapshot}\n   * @param {Object} request.updateMask\n   *   Indicates which fields in the provided snapshot to update.\n   *   Must be specified and non-empty.\n   *\n   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const seconds = 123456;\n   * const expireTime = {\n   *   seconds: seconds,\n   * };\n   * const snapshot = {\n   *   expireTime: expireTime,\n   * };\n   * const pathsElement = 'expire_time';\n   * const paths = [pathsElement];\n   * const updateMask = {\n   *   paths: paths,\n   * };\n   * const request = {\n   *   snapshot: snapshot,\n   *   updateMask: updateMask,\n   * };\n   * client.updateSnapshot(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  updateSnapshot(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'snapshot.name': request.snapshot.name\n    });\n    return this._innerApiCalls.updateSnapshot(request, options, callback);\n  }\n  /**\n   * Removes an existing snapshot. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.<br><br>\n   * When the snapshot is deleted, all messages retained in the snapshot\n   * are immediately dropped. After a snapshot is deleted, a new one may be\n   * created with the same name, but the new one has no association with the old\n   * snapshot or its subscription, unless the same subscription is specified.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.snapshot\n   *   The name of the snapshot to delete.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSnapshot = client.snapshotPath('[PROJECT]', '[SNAPSHOT]');\n   * client.deleteSnapshot({snapshot: formattedSnapshot}).catch(err => {\n   *   console.error(err);\n   * });\n   */\n\n\n  deleteSnapshot(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      snapshot: request.snapshot\n    });\n    return this._innerApiCalls.deleteSnapshot(request, options, callback);\n  }\n  /**\n   * Seeks an existing subscription to a point in time or to a given snapshot,\n   * whichever is provided in the request. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot. Note that both the subscription and the snapshot\n   * must be on the same topic.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The subscription to affect.\n   * @param {Object} [request.time]\n   *   The time to seek to.\n   *   Messages retained in the subscription that were published before this\n   *   time are marked as acknowledged, and messages retained in the\n   *   subscription that were published after this time are marked as\n   *   unacknowledged. Note that this operation affects only those messages\n   *   retained in the subscription (configured by the combination of\n   *   `message_retention_duration` and `retain_acked_messages`). For example,\n   *   if `time` corresponds to a point before the message retention\n   *   window (or to a point before the system's notion of the subscription\n   *   creation time), only retained messages will be marked as unacknowledged,\n   *   and already-expunged messages will not be restored.\n   *\n   *   This object should have the same structure as [Timestamp]{@link google.protobuf.Timestamp}\n   * @param {string} [request.snapshot]\n   *   The snapshot to seek to. The snapshot's topic must be the same as that of\n   *   the provided subscription.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [SeekResponse]{@link google.pubsub.v1.SeekResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [SeekResponse]{@link google.pubsub.v1.SeekResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * client.seek({subscription: formattedSubscription})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  seek(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      subscription: request.subscription\n    });\n    return this._innerApiCalls.seek(request, options, callback);\n  }\n  /**\n   * Sets the access control policy on the specified resource. Replaces any\n   * existing policy.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being specified.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} request.policy\n   *   REQUIRED: The complete policy to be applied to the `resource`. The size of\n   *   the policy is limited to a few 10s of KB. An empty policy is a\n   *   valid policy but certain Cloud Platform services (such as Projects)\n   *   might reject them.\n   *\n   *   This object should have the same structure as [Policy]{@link google.iam.v1.Policy}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const policy = {};\n   * const request = {\n   *   resource: formattedResource,\n   *   policy: policy,\n   * };\n   * client.setIamPolicy(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  setIamPolicy(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      resource: request.resource\n    });\n    return this._innerApiCalls.setIamPolicy(request, options, callback);\n  }\n  /**\n   * Gets the access control policy for a resource.\n   * Returns an empty policy if the resource exists and does not have a policy\n   * set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} [request.options]\n   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to\n   *   `GetIamPolicy`. This field is only used by Cloud IAM.\n   *\n   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * client.getIamPolicy({resource: formattedResource})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  getIamPolicy(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      resource: request.resource\n    });\n    return this._innerApiCalls.getIamPolicy(request, options, callback);\n  }\n  /**\n   * Returns permissions that a caller has on the specified resource.\n   * If the resource does not exist, this will return an empty set of\n   * permissions, not a NOT_FOUND error.\n   *\n   * Note: This operation is designed to be used for building permission-aware\n   * UIs and command-line tools, not for authorization checking. This operation\n   * may \"fail open\" without warning.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy detail is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {string[]} request.permissions\n   *   The set of permissions to check for the `resource`. Permissions with\n   *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n   *   information see\n   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const permissions = [];\n   * const request = {\n   *   resource: formattedResource,\n   *   permissions: permissions,\n   * };\n   * client.testIamPermissions(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  testIamPermissions(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      resource: request.resource\n    });\n    return this._innerApiCalls.testIamPermissions(request, options, callback);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {String} project\n   * @returns {String}\n   */\n\n\n  projectPath(project) {\n    return this._pathTemplates.projectPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Return a fully-qualified snapshot resource name string.\n   *\n   * @param {String} project\n   * @param {String} snapshot\n   * @returns {String}\n   */\n\n\n  snapshotPath(project, snapshot) {\n    return this._pathTemplates.snapshotPathTemplate.render({\n      project: project,\n      snapshot: snapshot\n    });\n  }\n  /**\n   * Return a fully-qualified subscription resource name string.\n   *\n   * @param {String} project\n   * @param {String} subscription\n   * @returns {String}\n   */\n\n\n  subscriptionPath(project, subscription) {\n    return this._pathTemplates.subscriptionPathTemplate.render({\n      project: project,\n      subscription: subscription\n    });\n  }\n  /**\n   * Return a fully-qualified topic resource name string.\n   *\n   * @param {String} project\n   * @param {String} topic\n   * @returns {String}\n   */\n\n\n  topicPath(project, topic) {\n    return this._pathTemplates.topicPathTemplate.render({\n      project: project,\n      topic: topic\n    });\n  }\n  /**\n   * Parse the projectName from a project resource.\n   *\n   * @param {String} projectName\n   *   A fully-qualified path representing a project resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromProjectName(projectName) {\n    return this._pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n  /**\n   * Parse the snapshotName from a snapshot resource.\n   *\n   * @param {String} snapshotName\n   *   A fully-qualified path representing a snapshot resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromSnapshotName(snapshotName) {\n    return this._pathTemplates.snapshotPathTemplate.match(snapshotName).project;\n  }\n  /**\n   * Parse the snapshotName from a snapshot resource.\n   *\n   * @param {String} snapshotName\n   *   A fully-qualified path representing a snapshot resources.\n   * @returns {String} - A string representing the snapshot.\n   */\n\n\n  matchSnapshotFromSnapshotName(snapshotName) {\n    return this._pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;\n  }\n  /**\n   * Parse the subscriptionName from a subscription resource.\n   *\n   * @param {String} subscriptionName\n   *   A fully-qualified path representing a subscription resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromSubscriptionName(subscriptionName) {\n    return this._pathTemplates.subscriptionPathTemplate.match(subscriptionName).project;\n  }\n  /**\n   * Parse the subscriptionName from a subscription resource.\n   *\n   * @param {String} subscriptionName\n   *   A fully-qualified path representing a subscription resources.\n   * @returns {String} - A string representing the subscription.\n   */\n\n\n  matchSubscriptionFromSubscriptionName(subscriptionName) {\n    return this._pathTemplates.subscriptionPathTemplate.match(subscriptionName).subscription;\n  }\n  /**\n   * Parse the topicName from a topic resource.\n   *\n   * @param {String} topicName\n   *   A fully-qualified path representing a topic resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromTopicName(topicName) {\n    return this._pathTemplates.topicPathTemplate.match(topicName).project;\n  }\n  /**\n   * Parse the topicName from a topic resource.\n   *\n   * @param {String} topicName\n   *   A fully-qualified path representing a topic resources.\n   * @returns {String} - A string representing the topic.\n   */\n\n\n  matchTopicFromTopicName(topicName) {\n    return this._pathTemplates.topicPathTemplate.match(topicName).topic;\n  }\n\n}\n\nmodule.exports = SubscriberClient;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/@google-cloud/pubsub/build/src/v1/subscriber_client.js"],"names":["gapicConfig","require","gax","path","VERSION","version","SubscriberClient","constructor","opts","_descriptors","global","isBrowser","fallback","gaxModule","servicePath","apiEndpoint","Object","assign","clientConfig","port","scopes","gaxGrpc","GrpcClient","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","protos","loadProto","_pathTemplates","projectPathTemplate","PathTemplate","snapshotPathTemplate","subscriptionPathTemplate","topicPathTemplate","page","listSubscriptions","PageDescriptor","listSnapshots","stream","streamingPull","StreamDescriptor","StreamType","BIDI_STREAMING","defaults","constructSettings","_innerApiCalls","iamPolicyStub","createStub","lookupService","google","iam","v1","IAMPolicy","iamPolicyStubMethods","methodName","innerCallPromise","then","stub","args","apply","err","createApiCall","subscriberStub","pubsub","Subscriber","subscriberStubMethods","waitForReady","deadline","callback","getSubscriberStub","getProjectId","createSubscription","request","options","Function","undefined","otherArgs","headers","routingHeader","fromParams","name","getSubscription","subscription","updateSubscription","project","listSubscriptionsStream","createStream","deleteSubscription","modifyAckDeadline","acknowledge","pull","modifyPushConfig","listSnapshotsStream","createSnapshot","updateSnapshot","snapshot","deleteSnapshot","seek","setIamPolicy","resource","getIamPolicy","testIamPermissions","projectPath","render","snapshotPath","subscriptionPath","topicPath","topic","matchProjectFromProjectName","projectName","match","matchProjectFromSnapshotName","snapshotName","matchSnapshotFromSnapshotName","matchProjectFromSubscriptionName","subscriptionName","matchSubscriptionFromSubscriptionName","matchProjectFromTopicName","topicName","matchTopicFromTopicName","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,iCAAD,CAA3B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,OAAO,GAAGH,OAAO,CAAC,uBAAD,CAAP,CAAiCI,OAAjD;AAEA;;;;;;;;;;AAQA,MAAMC,gBAAN,CAAuB;AACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChBA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,SAAKC,YAAL,GAAoB,EAApB;;AAEA,QAAIC,MAAM,CAACC,SAAX,EAAsB;AACpB;AACAH,MAAAA,IAAI,CAACI,QAAL,GAAgB,IAAhB;AACD,KAPe,CAShB;AACA;AACA;;;AACA,UAAMC,SAAS,GAAG,CAACH,MAAM,CAACC,SAAR,IAAqBH,IAAI,CAACI,QAA1B,GAAqCV,GAAG,CAACU,QAAzC,GAAoDV,GAAtE;AAEA,UAAMY,WAAW,GACfN,IAAI,CAACM,WAAL,IAAoBN,IAAI,CAACO,WAAzB,IAAwC,KAAKR,WAAL,CAAiBO,WAD3D,CAdgB,CAiBhB;;AACAN,IAAAA,IAAI,GAAGQ,MAAM,CAACC,MAAP,CACL;AACEC,MAAAA,YAAY,EAAE,EADhB;AAEEC,MAAAA,IAAI,EAAE,KAAKZ,WAAL,CAAiBY,IAFzB;AAGEL,MAAAA;AAHF,KADK,EAMLN,IANK,CAAP,CAlBgB,CA2BhB;AACA;;AACAA,IAAAA,IAAI,CAACY,MAAL,GAAc,KAAKb,WAAL,CAAiBa,MAA/B;AACA,UAAMC,OAAO,GAAG,IAAIR,SAAS,CAACS,UAAd,CAAyBd,IAAzB,CAAhB,CA9BgB,CAgChB;;AACA,SAAKe,IAAL,GAAYF,OAAO,CAACE,IAApB,CAjCgB,CAmChB;;AACA,UAAMC,YAAY,GAAG,EAArB;;AAEA,QAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,cAAcA,OAApD,EAA6D;AAC3DD,MAAAA,YAAY,CAACE,IAAb,CAAmB,WAAUD,OAAO,CAACE,QAAR,CAAiBC,IAAK,EAAnD;AACD;;AACDJ,IAAAA,YAAY,CAACE,IAAb,CAAmB,OAAMb,SAAS,CAACR,OAAQ,EAA3C;;AACA,QAAIG,IAAI,CAACI,QAAT,EAAmB;AACjBY,MAAAA,YAAY,CAACE,IAAb,CAAmB,UAASb,SAAS,CAACR,OAAQ,EAA9C;AACD,KAFD,MAEO;AACLmB,MAAAA,YAAY,CAACE,IAAb,CAAmB,QAAOL,OAAO,CAACQ,WAAY,EAA9C;AACD;;AACDL,IAAAA,YAAY,CAACE,IAAb,CAAmB,SAAQtB,OAAQ,EAAnC;;AACA,QAAII,IAAI,CAACsB,OAAL,IAAgBtB,IAAI,CAACuB,UAAzB,EAAqC;AACnCP,MAAAA,YAAY,CAACE,IAAb,CAAmB,GAAElB,IAAI,CAACsB,OAAQ,IAAGtB,IAAI,CAACuB,UAAW,EAArD;AACD,KAlDe,CAoDhB;AACA;AACA;;;AAEA,UAAMC,eAAe,GAAG7B,IAAI,CAAC8B,IAAL,CACtBC,SADsB,EAEtB,IAFsB,EAGtB,IAHsB,EAItB,QAJsB,EAKtB,aALsB,CAAxB;AAOA,UAAMC,MAAM,GAAGd,OAAO,CAACe,SAAR,CACb5B,IAAI,CAACI,QAAL,GAAgBX,OAAO,CAAC,0BAAD,CAAvB,GAAsD+B,eADzC,CAAf,CA/DgB,CAmEhB;AACA;AACA;;AACA,SAAKK,cAAL,GAAsB;AACpBC,MAAAA,mBAAmB,EAAE,IAAIzB,SAAS,CAAC0B,YAAd,CAA2B,oBAA3B,CADD;AAEpBC,MAAAA,oBAAoB,EAAE,IAAI3B,SAAS,CAAC0B,YAAd,CACpB,yCADoB,CAFF;AAKpBE,MAAAA,wBAAwB,EAAE,IAAI5B,SAAS,CAAC0B,YAAd,CACxB,iDADwB,CALN;AAQpBG,MAAAA,iBAAiB,EAAE,IAAI7B,SAAS,CAAC0B,YAAd,CACjB,mCADiB;AARC,KAAtB,CAtEgB,CAmFhB;AACA;AACA;;AACA,SAAK9B,YAAL,CAAkBkC,IAAlB,GAAyB;AACvBC,MAAAA,iBAAiB,EAAE,IAAI/B,SAAS,CAACgC,cAAd,CACjB,WADiB,EAEjB,eAFiB,EAGjB,eAHiB,CADI;AAMvBC,MAAAA,aAAa,EAAE,IAAIjC,SAAS,CAACgC,cAAd,CACb,WADa,EAEb,eAFa,EAGb,WAHa;AANQ,KAAzB,CAtFgB,CAmGhB;AACA;;AACA,SAAKpC,YAAL,CAAkBsC,MAAlB,GAA2B;AACzBC,MAAAA,aAAa,EAAE,IAAInC,SAAS,CAACoC,gBAAd,CACb/C,GAAG,CAACgD,UAAJ,CAAeC,cADF;AADU,KAA3B,CArGgB,CA2GhB;;AACA,UAAMC,QAAQ,GAAG/B,OAAO,CAACgC,iBAAR,CACf,6BADe,EAEfrD,WAFe,EAGfQ,IAAI,CAACU,YAHU,EAIf;AAAC,2BAAqBM,YAAY,CAACS,IAAb,CAAkB,GAAlB;AAAtB,KAJe,CAAjB,CA5GgB,CAmHhB;AACA;AACA;;AACA,SAAKqB,cAAL,GAAsB,EAAtB,CAtHgB,CAwHhB;AACA;;AACA,UAAMC,aAAa,GAAGlC,OAAO,CAACmC,UAAR,CACpBhD,IAAI,CAACI,QAAL,GACIuB,MAAM,CAACsB,aAAP,CAAqB,yBAArB,CADJ,GAEItB,MAAM,CAACuB,MAAP,CAAcC,GAAd,CAAkBC,EAAlB,CAAqBC,SAHL,EAIpBrD,IAJoB,CAAtB,CA1HgB,CAiIhB;AACA;;AACA,UAAMsD,oBAAoB,GAAG,CAC3B,cAD2B,EAE3B,cAF2B,EAG3B,oBAH2B,CAA7B;;AAKA,SAAK,MAAMC,UAAX,IAAyBD,oBAAzB,EAA+C;AAC7C,YAAME,gBAAgB,GAAGT,aAAa,CAACU,IAAd,CACvBC,IAAI,IAAI,CAAC,GAAGC,IAAJ,KAAa;AACnB,eAAOD,IAAI,CAACH,UAAD,CAAJ,CAAiBK,KAAjB,CAAuBF,IAAvB,EAA6BC,IAA7B,CAAP;AACD,OAHsB,EAIvBE,GAAG,IAAI,MAAM;AACX,cAAMA,GAAN;AACD,OANsB,CAAzB;AAQA,WAAKf,cAAL,CAAoBS,UAApB,IAAkClD,SAAS,CAACyD,aAAV,CAChCN,gBADgC,EAEhCZ,QAAQ,CAACW,UAAD,CAFwB,EAGhC,KAAKtD,YAAL,CAAkBkC,IAAlB,CAAuBoB,UAAvB,KACE,KAAKtD,YAAL,CAAkBsC,MAAlB,CAAyBgB,UAAzB,CAJ8B,CAAlC;AAMD,KAvJe,CAyJhB;AACA;;;AACA,UAAMQ,cAAc,GAAGlD,OAAO,CAACmC,UAAR,CACrBhD,IAAI,CAACI,QAAL,GACIuB,MAAM,CAACsB,aAAP,CAAqB,6BAArB,CADJ,GAEItB,MAAM,CAACuB,MAAP,CAAcc,MAAd,CAAqBZ,EAArB,CAAwBa,UAHP,EAIrBjE,IAJqB,CAAvB,CA3JgB,CAkKhB;AACA;;AACA,UAAMkE,qBAAqB,GAAG,CAC5B,oBAD4B,EAE5B,iBAF4B,EAG5B,oBAH4B,EAI5B,mBAJ4B,EAK5B,oBAL4B,EAM5B,mBAN4B,EAO5B,aAP4B,EAQ5B,MAR4B,EAS5B,eAT4B,EAU5B,kBAV4B,EAW5B,eAX4B,EAY5B,gBAZ4B,EAa5B,gBAb4B,EAc5B,gBAd4B,EAe5B,MAf4B,CAA9B;;AAiBA,SAAK,MAAMX,UAAX,IAAyBW,qBAAzB,EAAgD;AAC9C,YAAMV,gBAAgB,GAAGO,cAAc,CAACN,IAAf,CACvBC,IAAI,IAAI,CAAC,GAAGC,IAAJ,KAAa;AACnB,eAAOD,IAAI,CAACH,UAAD,CAAJ,CAAiBK,KAAjB,CAAuBF,IAAvB,EAA6BC,IAA7B,CAAP;AACD,OAHsB,EAIvBE,GAAG,IAAI,MAAM;AACX,cAAMA,GAAN;AACD,OANsB,CAAzB;AAQA,WAAKf,cAAL,CAAoBS,UAApB,IAAkClD,SAAS,CAACyD,aAAV,CAChCN,gBADgC,EAEhCZ,QAAQ,CAACW,UAAD,CAFwB,EAGhC,KAAKtD,YAAL,CAAkBkC,IAAlB,CAAuBoB,UAAvB,KACE,KAAKtD,YAAL,CAAkBsC,MAAlB,CAAyBgB,UAAzB,CAJ8B,CAAlC;AAMD,KApMe,CAsMhB;;;AACA,SAAKY,YAAL,GAAoB,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AAC/C,aAAON,cAAc,CAACN,IAAf,CACLC,IAAI,IAAIA,IAAI,CAACS,YAAL,CAAkBC,QAAlB,EAA4BC,QAA5B,CADH,EAELA,QAFK,CAAP;AAID,KALD;;AAMA,SAAKC,iBAAL,GAAyB,YAAW;AAClC,aAAOP,cAAP;AACD,KAFD;AAGD;AAED;;;;;AAGA,aAAWzD,WAAX,GAAyB;AACvB,WAAO,uBAAP;AACD;AAED;;;;;;AAIA,aAAWC,WAAX,GAAyB;AACvB,WAAO,uBAAP;AACD;AAED;;;;;AAGA,aAAWI,IAAX,GAAkB;AAChB,WAAO,GAAP;AACD;AAED;;;;;;AAIA,aAAWC,MAAX,GAAoB;AAClB,WAAO,CACL,gDADK,EAEL,wCAFK,CAAP;AAID;AAED;;;;;;;AAKA2D,EAAAA,YAAY,CAACF,QAAD,EAAW;AACrB,WAAO,KAAKtD,IAAL,CAAUwD,YAAV,CAAuBF,QAAvB,CAAP;AACD,GAtRoB,CAwRrB;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6IAG,EAAAA,kBAAkB,CAACC,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC7C,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BC,MAAAA,IAAI,EAAER,OAAO,CAACQ;AADiB,KAA7B,CAFJ;AAMA,WAAO,KAAKnC,cAAL,CAAoB0B,kBAApB,CAAuCC,OAAvC,EAAgDC,OAAhD,EAAyDL,QAAzD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCAa,EAAAA,eAAe,CAACT,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC1C,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BG,MAAAA,YAAY,EAAEV,OAAO,CAACU;AADS,KAA7B,CAFJ;AAMA,WAAO,KAAKrC,cAAL,CAAoBoC,eAApB,CAAoCT,OAApC,EAA6CC,OAA7C,EAAsDL,QAAtD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDAe,EAAAA,kBAAkB,CAACX,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC7C,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/B,2BAAqBP,OAAO,CAACU,YAAR,CAAqBF;AADX,KAA7B,CAFJ;AAMA,WAAO,KAAKnC,cAAL,CAAoBsC,kBAApB,CAAuCX,OAAvC,EAAgDC,OAAhD,EAAyDL,QAAzD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFAjC,EAAAA,iBAAiB,CAACqC,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC5C,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BK,MAAAA,OAAO,EAAEZ,OAAO,CAACY;AADc,KAA7B,CAFJ;AAMA,WAAO,KAAKvC,cAAL,CAAoBV,iBAApB,CAAsCqC,OAAtC,EAA+CC,OAA/C,EAAwDL,QAAxD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CAiB,EAAAA,uBAAuB,CAACb,OAAD,EAAUC,OAAV,EAAmB;AACxCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,WAAO,KAAKzE,YAAL,CAAkBkC,IAAlB,CAAuBC,iBAAvB,CAAyCmD,YAAzC,CACL,KAAKzC,cAAL,CAAoBV,iBADf,EAELqC,OAFK,EAGLC,OAHK,CAAP;AAKD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAc,EAAAA,kBAAkB,CAACf,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC7C,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BG,MAAAA,YAAY,EAAEV,OAAO,CAACU;AADS,KAA7B,CAFJ;AAMA,WAAO,KAAKrC,cAAL,CAAoB0C,kBAApB,CAAuCf,OAAvC,EAAgDC,OAAhD,EAAyDL,QAAzD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDAoB,EAAAA,iBAAiB,CAAChB,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC5C,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BG,MAAAA,YAAY,EAAEV,OAAO,CAACU;AADS,KAA7B,CAFJ;AAMA,WAAO,KAAKrC,cAAL,CAAoB2C,iBAApB,CAAsChB,OAAtC,EAA+CC,OAA/C,EAAwDL,QAAxD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CAqB,EAAAA,WAAW,CAACjB,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AACtC,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BG,MAAAA,YAAY,EAAEV,OAAO,CAACU;AADS,KAA7B,CAFJ;AAMA,WAAO,KAAKrC,cAAL,CAAoB4C,WAApB,CAAgCjB,OAAhC,EAAyCC,OAAzC,EAAkDL,QAAlD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDAsB,EAAAA,IAAI,CAAClB,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC/B,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BG,MAAAA,YAAY,EAAEV,OAAO,CAACU;AADS,KAA7B,CAFJ;AAMA,WAAO,KAAKrC,cAAL,CAAoB6C,IAApB,CAAyBlB,OAAzB,EAAkCC,OAAlC,EAA2CL,QAA3C,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA7B,EAAAA,aAAa,CAACkC,OAAD,EAAU;AACrBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,WAAO,KAAK5B,cAAL,CAAoBN,aAApB,CAAkCkC,OAAlC,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDAkB,EAAAA,gBAAgB,CAACnB,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC3C,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BG,MAAAA,YAAY,EAAEV,OAAO,CAACU;AADS,KAA7B,CAFJ;AAMA,WAAO,KAAKrC,cAAL,CAAoB8C,gBAApB,CAAqCnB,OAArC,EAA8CC,OAA9C,EAAuDL,QAAvD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA/B,EAAAA,aAAa,CAACmC,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AACxC,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BK,MAAAA,OAAO,EAAEZ,OAAO,CAACY;AADc,KAA7B,CAFJ;AAMA,WAAO,KAAKvC,cAAL,CAAoBR,aAApB,CAAkCmC,OAAlC,EAA2CC,OAA3C,EAAoDL,QAApD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CAwB,EAAAA,mBAAmB,CAACpB,OAAD,EAAUC,OAAV,EAAmB;AACpCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,WAAO,KAAKzE,YAAL,CAAkBkC,IAAlB,CAAuBG,aAAvB,CAAqCiD,YAArC,CACL,KAAKzC,cAAL,CAAoBR,aADf,EAELmC,OAFK,EAGLC,OAHK,CAAP;AAKD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EAoB,EAAAA,cAAc,CAACrB,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AACzC,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BC,MAAAA,IAAI,EAAER,OAAO,CAACQ;AADiB,KAA7B,CAFJ;AAMA,WAAO,KAAKnC,cAAL,CAAoBgD,cAApB,CAAmCrB,OAAnC,EAA4CC,OAA5C,EAAqDL,QAArD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA0B,EAAAA,cAAc,CAACtB,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AACzC,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/B,uBAAiBP,OAAO,CAACuB,QAAR,CAAiBf;AADH,KAA7B,CAFJ;AAMA,WAAO,KAAKnC,cAAL,CAAoBiD,cAApB,CAAmCtB,OAAnC,EAA4CC,OAA5C,EAAqDL,QAArD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA4B,EAAAA,cAAc,CAACxB,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AACzC,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BgB,MAAAA,QAAQ,EAAEvB,OAAO,CAACuB;AADa,KAA7B,CAFJ;AAMA,WAAO,KAAKlD,cAAL,CAAoBmD,cAApB,CAAmCxB,OAAnC,EAA4CC,OAA5C,EAAqDL,QAArD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA6B,EAAAA,IAAI,CAACzB,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC/B,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BG,MAAAA,YAAY,EAAEV,OAAO,CAACU;AADS,KAA7B,CAFJ;AAMA,WAAO,KAAKrC,cAAL,CAAoBoD,IAApB,CAAyBzB,OAAzB,EAAkCC,OAAlC,EAA2CL,QAA3C,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA8B,EAAAA,YAAY,CAAC1B,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AACvC,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BoB,MAAAA,QAAQ,EAAE3B,OAAO,CAAC2B;AADa,KAA7B,CAFJ;AAMA,WAAO,KAAKtD,cAAL,CAAoBqD,YAApB,CAAiC1B,OAAjC,EAA0CC,OAA1C,EAAmDL,QAAnD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CAgC,EAAAA,YAAY,CAAC5B,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AACvC,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BoB,MAAAA,QAAQ,EAAE3B,OAAO,CAAC2B;AADa,KAA7B,CAFJ;AAMA,WAAO,KAAKtD,cAAL,CAAoBuD,YAApB,CAAiC5B,OAAjC,EAA0CC,OAA1C,EAAmDL,QAAnD,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDAiC,EAAAA,kBAAkB,CAAC7B,OAAD,EAAUC,OAAV,EAAmBL,QAAnB,EAA6B;AAC7C,QAAIK,OAAO,YAAYC,QAAnB,IAA+BN,QAAQ,KAAKO,SAAhD,EAA2D;AACzDP,MAAAA,QAAQ,GAAGK,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAA,IAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,IAAqB,EAAzC;AACAH,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,GAA4BJ,OAAO,CAACG,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;AACAJ,IAAAA,OAAO,CAACG,SAAR,CAAkBC,OAAlB,CACE,uBADF,IAEIpF,GAAG,CAACqF,aAAJ,CAAkBC,UAAlB,CAA6B;AAC/BoB,MAAAA,QAAQ,EAAE3B,OAAO,CAAC2B;AADa,KAA7B,CAFJ;AAMA,WAAO,KAAKtD,cAAL,CAAoBwD,kBAApB,CAAuC7B,OAAvC,EAAgDC,OAAhD,EAAyDL,QAAzD,CAAP;AACD,GAtuDoB,CAwuDrB;AACA;AACA;;AAEA;;;;;;;;AAMAkC,EAAAA,WAAW,CAAClB,OAAD,EAAU;AACnB,WAAO,KAAKxD,cAAL,CAAoBC,mBAApB,CAAwC0E,MAAxC,CAA+C;AACpDnB,MAAAA,OAAO,EAAEA;AAD2C,KAA/C,CAAP;AAGD;AAED;;;;;;;;;AAOAoB,EAAAA,YAAY,CAACpB,OAAD,EAAUW,QAAV,EAAoB;AAC9B,WAAO,KAAKnE,cAAL,CAAoBG,oBAApB,CAAyCwE,MAAzC,CAAgD;AACrDnB,MAAAA,OAAO,EAAEA,OAD4C;AAErDW,MAAAA,QAAQ,EAAEA;AAF2C,KAAhD,CAAP;AAID;AAED;;;;;;;;;AAOAU,EAAAA,gBAAgB,CAACrB,OAAD,EAAUF,YAAV,EAAwB;AACtC,WAAO,KAAKtD,cAAL,CAAoBI,wBAApB,CAA6CuE,MAA7C,CAAoD;AACzDnB,MAAAA,OAAO,EAAEA,OADgD;AAEzDF,MAAAA,YAAY,EAAEA;AAF2C,KAApD,CAAP;AAID;AAED;;;;;;;;;AAOAwB,EAAAA,SAAS,CAACtB,OAAD,EAAUuB,KAAV,EAAiB;AACxB,WAAO,KAAK/E,cAAL,CAAoBK,iBAApB,CAAsCsE,MAAtC,CAA6C;AAClDnB,MAAAA,OAAO,EAAEA,OADyC;AAElDuB,MAAAA,KAAK,EAAEA;AAF2C,KAA7C,CAAP;AAID;AAED;;;;;;;;;AAOAC,EAAAA,2BAA2B,CAACC,WAAD,EAAc;AACvC,WAAO,KAAKjF,cAAL,CAAoBC,mBAApB,CAAwCiF,KAAxC,CAA8CD,WAA9C,EAA2DzB,OAAlE;AACD;AAED;;;;;;;;;AAOA2B,EAAAA,4BAA4B,CAACC,YAAD,EAAe;AACzC,WAAO,KAAKpF,cAAL,CAAoBG,oBAApB,CAAyC+E,KAAzC,CAA+CE,YAA/C,EAA6D5B,OAApE;AACD;AAED;;;;;;;;;AAOA6B,EAAAA,6BAA6B,CAACD,YAAD,EAAe;AAC1C,WAAO,KAAKpF,cAAL,CAAoBG,oBAApB,CAAyC+E,KAAzC,CAA+CE,YAA/C,EACJjB,QADH;AAED;AAED;;;;;;;;;AAOAmB,EAAAA,gCAAgC,CAACC,gBAAD,EAAmB;AACjD,WAAO,KAAKvF,cAAL,CAAoBI,wBAApB,CAA6C8E,KAA7C,CAAmDK,gBAAnD,EACJ/B,OADH;AAED;AAED;;;;;;;;;AAOAgC,EAAAA,qCAAqC,CAACD,gBAAD,EAAmB;AACtD,WAAO,KAAKvF,cAAL,CAAoBI,wBAApB,CAA6C8E,KAA7C,CAAmDK,gBAAnD,EACJjC,YADH;AAED;AAED;;;;;;;;;AAOAmC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,WAAO,KAAK1F,cAAL,CAAoBK,iBAApB,CAAsC6E,KAAtC,CAA4CQ,SAA5C,EAAuDlC,OAA9D;AACD;AAED;;;;;;;;;AAOAmC,EAAAA,uBAAuB,CAACD,SAAD,EAAY;AACjC,WAAO,KAAK1F,cAAL,CAAoBK,iBAApB,CAAsC6E,KAAtC,CAA4CQ,SAA5C,EAAuDX,KAA9D;AACD;;AAh3DoB;;AAm3DvBa,MAAM,CAACC,OAAP,GAAiB5H,gBAAjB","sourcesContent":["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nconst gapicConfig = require('./subscriber_client_config.json');\nconst gax = require('google-gax');\nconst path = require('path');\n\nconst VERSION = require('../../../package.json').version;\n\n/**\n * The service that an application uses to manipulate subscriptions and to\n * consume messages from a subscription via the `Pull` method or by\n * establishing a bi-directional stream using the `StreamingPull` method.\n *\n * @class\n * @memberof v1\n */\nclass SubscriberClient {\n  /**\n   * Construct an instance of SubscriberClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {function} [options.promise] - Custom promise module to use instead\n   *     of native Promises.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    opts = opts || {};\n    this._descriptors = {};\n\n    if (global.isBrowser) {\n      // If we're in browser, we use gRPC fallback.\n      opts.fallback = true;\n    }\n\n    // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n    const gaxModule = !global.isBrowser && opts.fallback ? gax.fallback : gax;\n\n    const servicePath =\n      opts.servicePath || opts.apiEndpoint || this.constructor.servicePath;\n\n    // Ensure that options include the service address and port.\n    opts = Object.assign(\n      {\n        clientConfig: {},\n        port: this.constructor.port,\n        servicePath,\n      },\n      opts\n    );\n\n    // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n    opts.scopes = this.constructor.scopes;\n    const gaxGrpc = new gaxModule.GrpcClient(opts);\n\n    // Save the auth object to the client, for use by other methods.\n    this.auth = gaxGrpc.auth;\n\n    // Determine the client header string.\n    const clientHeader = [];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    }\n    clientHeader.push(`gax/${gaxModule.version}`);\n    if (opts.fallback) {\n      clientHeader.push(`gl-web/${gaxModule.version}`);\n    } else {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    }\n    clientHeader.push(`gapic/${VERSION}`);\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n\n    // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n    const nodejsProtoPath = path.join(\n      __dirname,\n      '..',\n      '..',\n      'protos',\n      'protos.json'\n    );\n    const protos = gaxGrpc.loadProto(\n      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath\n    );\n\n    // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n    this._pathTemplates = {\n      projectPathTemplate: new gaxModule.PathTemplate('projects/{project}'),\n      snapshotPathTemplate: new gaxModule.PathTemplate(\n        'projects/{project}/snapshots/{snapshot}'\n      ),\n      subscriptionPathTemplate: new gaxModule.PathTemplate(\n        'projects/{project}/subscriptions/{subscription}'\n      ),\n      topicPathTemplate: new gaxModule.PathTemplate(\n        'projects/{project}/topics/{topic}'\n      ),\n    };\n\n    // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n    this._descriptors.page = {\n      listSubscriptions: new gaxModule.PageDescriptor(\n        'pageToken',\n        'nextPageToken',\n        'subscriptions'\n      ),\n      listSnapshots: new gaxModule.PageDescriptor(\n        'pageToken',\n        'nextPageToken',\n        'snapshots'\n      ),\n    };\n\n    // Some of the methods on this service provide streaming responses.\n    // Provide descriptors for these.\n    this._descriptors.stream = {\n      streamingPull: new gaxModule.StreamDescriptor(\n        gax.StreamType.BIDI_STREAMING\n      ),\n    };\n\n    // Put together the default options sent with requests.\n    const defaults = gaxGrpc.constructSettings(\n      'google.pubsub.v1.Subscriber',\n      gapicConfig,\n      opts.clientConfig,\n      {'x-goog-api-client': clientHeader.join(' ')}\n    );\n\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this._innerApiCalls = {};\n\n    // Put together the \"service stub\" for\n    // google.iam.v1.IAMPolicy.\n    const iamPolicyStub = gaxGrpc.createStub(\n      opts.fallback\n        ? protos.lookupService('google.iam.v1.IAMPolicy')\n        : protos.google.iam.v1.IAMPolicy,\n      opts\n    );\n\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const iamPolicyStubMethods = [\n      'setIamPolicy',\n      'getIamPolicy',\n      'testIamPermissions',\n    ];\n    for (const methodName of iamPolicyStubMethods) {\n      const innerCallPromise = iamPolicyStub.then(\n        stub => (...args) => {\n          return stub[methodName].apply(stub, args);\n        },\n        err => () => {\n          throw err;\n        }\n      );\n      this._innerApiCalls[methodName] = gaxModule.createApiCall(\n        innerCallPromise,\n        defaults[methodName],\n        this._descriptors.page[methodName] ||\n          this._descriptors.stream[methodName]\n      );\n    }\n\n    // Put together the \"service stub\" for\n    // google.pubsub.v1.Subscriber.\n    const subscriberStub = gaxGrpc.createStub(\n      opts.fallback\n        ? protos.lookupService('google.pubsub.v1.Subscriber')\n        : protos.google.pubsub.v1.Subscriber,\n      opts\n    );\n\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const subscriberStubMethods = [\n      'createSubscription',\n      'getSubscription',\n      'updateSubscription',\n      'listSubscriptions',\n      'deleteSubscription',\n      'modifyAckDeadline',\n      'acknowledge',\n      'pull',\n      'streamingPull',\n      'modifyPushConfig',\n      'listSnapshots',\n      'createSnapshot',\n      'updateSnapshot',\n      'deleteSnapshot',\n      'seek',\n    ];\n    for (const methodName of subscriberStubMethods) {\n      const innerCallPromise = subscriberStub.then(\n        stub => (...args) => {\n          return stub[methodName].apply(stub, args);\n        },\n        err => () => {\n          throw err;\n        }\n      );\n      this._innerApiCalls[methodName] = gaxModule.createApiCall(\n        innerCallPromise,\n        defaults[methodName],\n        this._descriptors.page[methodName] ||\n          this._descriptors.stream[methodName]\n      );\n    }\n\n    // note: editing generated code\n    this.waitForReady = function(deadline, callback) {\n      return subscriberStub.then(\n        stub => stub.waitForReady(deadline, callback),\n        callback\n      );\n    };\n    this.getSubscriberStub = function() {\n      return subscriberStub;\n    };\n  }\n\n  /**\n   * The DNS address for this API service.\n   */\n  static get servicePath() {\n    return 'pubsub.googleapis.com';\n  }\n\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n  static get apiEndpoint() {\n    return 'pubsub.googleapis.com';\n  }\n\n  /**\n   * The port for this API service.\n   */\n  static get port() {\n    return 443;\n  }\n\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n  static get scopes() {\n    return [\n      'https://www.googleapis.com/auth/cloud-platform',\n      'https://www.googleapis.com/auth/pubsub',\n    ];\n  }\n\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n  getProjectId(callback) {\n    return this.auth.getProjectId(callback);\n  }\n\n  // -------------------\n  // -- Service calls --\n  // -------------------\n\n  /**\n   * Creates a subscription to a given topic. See the\n   * <a href=\"https://cloud.google.com/pubsub/docs/admin#resource_names\">\n   * resource name rules</a>.\n   * If the subscription already exists, returns `ALREADY_EXISTS`.\n   * If the corresponding topic doesn't exist, returns `NOT_FOUND`.\n   *\n   * If the name is not provided in the request, the server will assign a random\n   * name for this subscription on the same project as the topic, conforming\n   * to the\n   * [resource name\n   * format](https://cloud.google.com/pubsub/docs/admin#resource_names). The\n   * generated name is populated in the returned Subscription object. Note that\n   * for REST API requests, you must specify a name in the request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The name of the subscription. It must have the format\n   *   `\"projects/{project}/subscriptions/{subscription}\"`. `{subscription}` must\n   *   start with a letter, and contain only letters (`[A-Za-z]`), numbers\n   *   (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),\n   *   plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters\n   *   in length, and it must not start with `\"goog\"`\n   * @param {string} request.topic\n   *   The name of the topic from which this subscription is receiving messages.\n   *   Format is `projects/{project}/topics/{topic}`.\n   *   The value of this field will be `_deleted-topic_` if the topic has been\n   *   deleted.\n   * @param {Object} [request.pushConfig]\n   *   If push delivery is used with this subscription, this field is\n   *   used to configure it. An empty `pushConfig` signifies that the subscriber\n   *   will pull and ack messages using API methods.\n   *\n   *   This object should have the same structure as [PushConfig]{@link google.pubsub.v1.PushConfig}\n   * @param {number} [request.ackDeadlineSeconds]\n   *   The approximate amount of time (on a best-effort basis) Pub/Sub waits for\n   *   the subscriber to acknowledge receipt before resending the message. In the\n   *   interval after the message is delivered and before it is acknowledged, it\n   *   is considered to be <i>outstanding</i>. During that time period, the\n   *   message will not be redelivered (on a best-effort basis).\n   *\n   *   For pull subscriptions, this value is used as the initial value for the ack\n   *   deadline. To override this value for a given message, call\n   *   `ModifyAckDeadline` with the corresponding `ack_id` if using\n   *   non-streaming pull or send the `ack_id` in a\n   *   `StreamingModifyAckDeadlineRequest` if using streaming pull.\n   *   The minimum custom deadline you can specify is 10 seconds.\n   *   The maximum custom deadline you can specify is 600 seconds (10 minutes).\n   *   If this parameter is 0, a default value of 10 seconds is used.\n   *\n   *   For push delivery, this value is also used to set the request timeout for\n   *   the call to the push endpoint.\n   *\n   *   If the subscriber never acknowledges the message, the Pub/Sub\n   *   system will eventually redeliver the message.\n   * @param {boolean} [request.retainAckedMessages]\n   *   Indicates whether to retain acknowledged messages. If true, then\n   *   messages are not expunged from the subscription's backlog, even if they are\n   *   acknowledged, until they fall out of the `message_retention_duration`\n   *   window. This must be true if you would like to\n   *   <a\n   *   href=\"https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time\">\n   *   Seek to a timestamp</a>.\n   * @param {Object} [request.messageRetentionDuration]\n   *   How long to retain unacknowledged messages in the subscription's backlog,\n   *   from the moment a message is published.\n   *   If `retain_acked_messages` is true, then this also configures the retention\n   *   of acknowledged messages, and thus configures how far back in time a `Seek`\n   *   can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10\n   *   minutes.\n   *\n   *   This object should have the same structure as [Duration]{@link google.protobuf.Duration}\n   * @param {Object.<string, string>} [request.labels]\n   *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n   *   managing labels</a>.\n   * @param {boolean} [request.enableMessageOrdering]\n   *   If true, messages published with the same `ordering_key` in `PubsubMessage`\n   *   will be delivered to the subscribers in the order in which they\n   *   are received by the Pub/Sub system. Otherwise, they may be delivered in\n   *   any order.\n   *   <b>EXPERIMENTAL:</b> This feature is part of a closed alpha release. This\n   *   API might be changed in backward-incompatible ways and is not recommended\n   *   for production use. It is not subject to any SLA or deprecation policy.\n   * @param {Object} [request.expirationPolicy]\n   *   A policy that specifies the conditions for this subscription's expiration.\n   *   A subscription is considered active as long as any connected subscriber is\n   *   successfully consuming messages from the subscription or is issuing\n   *   operations on the subscription. If `expiration_policy` is not set, a\n   *   *default policy* with `ttl` of 31 days will be used. The minimum allowed\n   *   value for `expiration_policy.ttl` is 1 day.\n   *\n   *   This object should have the same structure as [ExpirationPolicy]{@link google.pubsub.v1.ExpirationPolicy}\n   * @param {Object} [request.deadLetterPolicy]\n   *   A policy that specifies the conditions for dead lettering messages in\n   *   this subscription. If dead_letter_policy is not set, dead lettering\n   *   is disabled.\n   *\n   *   The Cloud Pub/Sub service account associated with this subscriptions's\n   *   parent project (i.e.,\n   *   service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have\n   *   permission to Acknowledge() messages on this subscription.\n   *   <b>EXPERIMENTAL:</b> This feature is part of a closed alpha release. This\n   *   API might be changed in backward-incompatible ways and is not recommended\n   *   for production use. It is not subject to any SLA or deprecation policy.\n   *\n   *   This object should have the same structure as [DeadLetterPolicy]{@link google.pubsub.v1.DeadLetterPolicy}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * const request = {\n   *   name: formattedName,\n   *   topic: formattedTopic,\n   * };\n   * client.createSubscription(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  createSubscription(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      name: request.name,\n    });\n\n    return this._innerApiCalls.createSubscription(request, options, callback);\n  }\n\n  /**\n   * Gets the configuration details of a subscription.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The name of the subscription to get.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * client.getSubscription({subscription: formattedSubscription})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  getSubscription(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      subscription: request.subscription,\n    });\n\n    return this._innerApiCalls.getSubscription(request, options, callback);\n  }\n\n  /**\n   * Updates an existing subscription. Note that certain properties of a\n   * subscription, such as its topic, are not modifiable.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {Object} request.subscription\n   *   The updated subscription object.\n   *\n   *   This object should have the same structure as [Subscription]{@link google.pubsub.v1.Subscription}\n   * @param {Object} request.updateMask\n   *   Indicates which fields in the provided subscription to update.\n   *   Must be specified and non-empty.\n   *\n   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Subscription]{@link google.pubsub.v1.Subscription}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const ackDeadlineSeconds = 42;\n   * const subscription = {\n   *   ackDeadlineSeconds: ackDeadlineSeconds,\n   * };\n   * const pathsElement = 'ack_deadline_seconds';\n   * const paths = [pathsElement];\n   * const updateMask = {\n   *   paths: paths,\n   * };\n   * const request = {\n   *   subscription: subscription,\n   *   updateMask: updateMask,\n   * };\n   * client.updateSubscription(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  updateSubscription(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      'subscription.name': request.subscription.name,\n    });\n\n    return this._innerApiCalls.updateSubscription(request, options, callback);\n  }\n\n  /**\n   * Lists matching subscriptions.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list subscriptions.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Subscription]{@link google.pubsub.v1.Subscription}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListSubscriptionsResponse]{@link google.pubsub.v1.ListSubscriptionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Subscription]{@link google.pubsub.v1.Subscription}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Subscription]{@link google.pubsub.v1.Subscription} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListSubscriptionsResponse]{@link google.pubsub.v1.ListSubscriptionsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   * client.listSubscriptions({project: formattedProject})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listSubscriptions(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listSubscriptions({project: formattedProject}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  listSubscriptions(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      project: request.project,\n    });\n\n    return this._innerApiCalls.listSubscriptions(request, options, callback);\n  }\n\n  /**\n   * Equivalent to {@link listSubscriptions}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listSubscriptions} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list subscriptions.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Subscription]{@link google.pubsub.v1.Subscription} on 'data' event.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedProject = client.projectPath('[PROJECT]');\n   * client.listSubscriptionsStream({project: formattedProject})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n  listSubscriptionsStream(request, options) {\n    options = options || {};\n\n    return this._descriptors.page.listSubscriptions.createStream(\n      this._innerApiCalls.listSubscriptions,\n      request,\n      options\n    );\n  }\n\n  /**\n   * Deletes an existing subscription. All messages retained in the subscription\n   * are immediately dropped. Calls to `Pull` after deletion will return\n   * `NOT_FOUND`. After a subscription is deleted, a new one may be created with\n   * the same name, but the new one has no association with the old\n   * subscription or its topic unless the same topic is specified.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The subscription to delete.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * client.deleteSubscription({subscription: formattedSubscription}).catch(err => {\n   *   console.error(err);\n   * });\n   */\n  deleteSubscription(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      subscription: request.subscription,\n    });\n\n    return this._innerApiCalls.deleteSubscription(request, options, callback);\n  }\n\n  /**\n   * Modifies the ack deadline for a specific message. This method is useful\n   * to indicate that more time is needed to process a message by the\n   * subscriber, or to make the message available for redelivery if the\n   * processing was interrupted. Note that this does not modify the\n   * subscription-level `ackDeadlineSeconds` used for subsequent messages.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The name of the subscription.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {string[]} request.ackIds\n   *   List of acknowledgment IDs.\n   * @param {number} request.ackDeadlineSeconds\n   *   The new ack deadline with respect to the time this request was sent to\n   *   the Pub/Sub system. For example, if the value is 10, the new\n   *   ack deadline will expire 10 seconds after the `ModifyAckDeadline` call\n   *   was made. Specifying zero might immediately make the message available for\n   *   delivery to another subscriber client. This typically results in an\n   *   increase in the rate of message redeliveries (that is, duplicates).\n   *   The minimum deadline you can specify is 0 seconds.\n   *   The maximum deadline you can specify is 600 seconds (10 minutes).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const ackIds = [];\n   * const ackDeadlineSeconds = 0;\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   ackIds: ackIds,\n   *   ackDeadlineSeconds: ackDeadlineSeconds,\n   * };\n   * client.modifyAckDeadline(request).catch(err => {\n   *   console.error(err);\n   * });\n   */\n  modifyAckDeadline(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      subscription: request.subscription,\n    });\n\n    return this._innerApiCalls.modifyAckDeadline(request, options, callback);\n  }\n\n  /**\n   * Acknowledges the messages associated with the `ack_ids` in the\n   * `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages\n   * from the subscription.\n   *\n   * Acknowledging a message whose ack deadline has expired may succeed,\n   * but such a message may be redelivered later. Acknowledging a message more\n   * than once will not result in an error.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The subscription whose message is being acknowledged.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {string[]} request.ackIds\n   *   The acknowledgment ID for the messages being acknowledged that was returned\n   *   by the Pub/Sub system in the `Pull` response. Must not be empty.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const ackIds = [];\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   ackIds: ackIds,\n   * };\n   * client.acknowledge(request).catch(err => {\n   *   console.error(err);\n   * });\n   */\n  acknowledge(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      subscription: request.subscription,\n    });\n\n    return this._innerApiCalls.acknowledge(request, options, callback);\n  }\n\n  /**\n   * Pulls messages from the server. The server may return `UNAVAILABLE` if\n   * there are too many concurrent pull requests pending for the given\n   * subscription.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The subscription from which messages should be pulled.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {number} request.maxMessages\n   *   The maximum number of messages to return for this request. Must be a\n   *   positive integer. The Pub/Sub system may return fewer than the number\n   *   specified.\n   * @param {boolean} [request.returnImmediately]\n   *   If this field set to true, the system will respond immediately even if\n   *   it there are no messages available to return in the `Pull` response.\n   *   Otherwise, the system may wait (for a bounded amount of time) until at\n   *   least one message is available, rather than returning no messages.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [PullResponse]{@link google.pubsub.v1.PullResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [PullResponse]{@link google.pubsub.v1.PullResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const maxMessages = 0;\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   maxMessages: maxMessages,\n   * };\n   * client.pull(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  pull(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      subscription: request.subscription,\n    });\n\n    return this._innerApiCalls.pull(request, options, callback);\n  }\n\n  /**\n   * Establishes a stream with the server, which sends messages down to the\n   * client. The client streams acknowledgements and ack deadline modifications\n   * back to the server. The server will close the stream and return the status\n   * on any error. The server may close the stream with status `UNAVAILABLE` to\n   * reassign server-side resources, in which case, the client should\n   * re-establish the stream. Flow control can be achieved by configuring the\n   * underlying RPC channel.\n   *\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which is both readable and writable. It accepts objects\n   *   representing [StreamingPullRequest]{@link google.pubsub.v1.StreamingPullRequest} for write() method, and\n   *   will emit objects representing [StreamingPullResponse]{@link google.pubsub.v1.StreamingPullResponse} on 'data' event asynchronously.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const stream = client.streamingPull().on('data', response => {\n   *   // doThingsWith(response)\n   * });\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const streamAckDeadlineSeconds = 0;\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   streamAckDeadlineSeconds: streamAckDeadlineSeconds,\n   * };\n   * // Write request objects.\n   * stream.write(request);\n   */\n  streamingPull(options) {\n    options = options || {};\n\n    return this._innerApiCalls.streamingPull(options);\n  }\n\n  /**\n   * Modifies the `PushConfig` for a specified subscription.\n   *\n   * This may be used to change a push subscription to a pull one (signified by\n   * an empty `PushConfig`) or vice versa, or change the endpoint URL and other\n   * attributes of a push subscription. Messages will accumulate for delivery\n   * continuously through the call regardless of changes to the `PushConfig`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The name of the subscription.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {Object} request.pushConfig\n   *   The push configuration for future deliveries.\n   *\n   *   An empty `pushConfig` indicates that the Pub/Sub system should\n   *   stop pushing messages from the given subscription and allow\n   *   messages to be pulled and acknowledged - effectively pausing\n   *   the subscription if `Pull` or `StreamingPull` is not called.\n   *\n   *   This object should have the same structure as [PushConfig]{@link google.pubsub.v1.PushConfig}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const pushConfig = {};\n   * const request = {\n   *   subscription: formattedSubscription,\n   *   pushConfig: pushConfig,\n   * };\n   * client.modifyPushConfig(request).catch(err => {\n   *   console.error(err);\n   * });\n   */\n  modifyPushConfig(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      subscription: request.subscription,\n    });\n\n    return this._innerApiCalls.modifyPushConfig(request, options, callback);\n  }\n\n  /**\n   * Lists the existing snapshots. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list snapshots.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListSnapshotsResponse]{@link google.pubsub.v1.ListSnapshotsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Snapshot]{@link google.pubsub.v1.Snapshot} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListSnapshotsResponse]{@link google.pubsub.v1.ListSnapshotsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   * client.listSnapshots({project: formattedProject})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listSnapshots(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listSnapshots({project: formattedProject}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  listSnapshots(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      project: request.project,\n    });\n\n    return this._innerApiCalls.listSnapshots(request, options, callback);\n  }\n\n  /**\n   * Equivalent to {@link listSnapshots}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listSnapshots} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list snapshots.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Snapshot]{@link google.pubsub.v1.Snapshot} on 'data' event.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedProject = client.projectPath('[PROJECT]');\n   * client.listSnapshotsStream({project: formattedProject})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n  listSnapshotsStream(request, options) {\n    options = options || {};\n\n    return this._descriptors.page.listSnapshots.createStream(\n      this._innerApiCalls.listSnapshots,\n      request,\n      options\n    );\n  }\n\n  /**\n   * Creates a snapshot from the requested subscription. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.\n   * <br><br>If the snapshot already exists, returns `ALREADY_EXISTS`.\n   * If the requested subscription doesn't exist, returns `NOT_FOUND`.\n   * If the backlog in the subscription is too old -- and the resulting snapshot\n   * would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned.\n   * See also the `Snapshot.expire_time` field. If the name is not provided in\n   * the request, the server will assign a random\n   * name for this snapshot on the same project as the subscription, conforming\n   * to the\n   * [resource name\n   * format](https://cloud.google.com/pubsub/docs/admin#resource_names). The\n   * generated name is populated in the returned Snapshot object. Note that for\n   * REST API requests, you must specify a name in the request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Optional user-provided name for this snapshot.\n   *   If the name is not provided in the request, the server will assign a random\n   *   name for this snapshot on the same project as the subscription.\n   *   Note that for REST API requests, you must specify a name.  See the\n   *   <a href=\"https://cloud.google.com/pubsub/docs/admin#resource_names\">\n   *   resource name rules</a>.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {string} request.subscription\n   *   The subscription whose backlog the snapshot retains.\n   *   Specifically, the created snapshot is guaranteed to retain:\n   *    (a) The existing backlog on the subscription. More precisely, this is\n   *        defined as the messages in the subscription's backlog that are\n   *        unacknowledged upon the successful completion of the\n   *        `CreateSnapshot` request; as well as:\n   *    (b) Any messages published to the subscription's topic following the\n   *        successful completion of the CreateSnapshot request.\n   *   Format is `projects/{project}/subscriptions/{sub}`.\n   * @param {Object.<string, string>} [request.labels]\n   *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n   *   managing labels</a>.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.snapshotPath('[PROJECT]', '[SNAPSHOT]');\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const request = {\n   *   name: formattedName,\n   *   subscription: formattedSubscription,\n   * };\n   * client.createSnapshot(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  createSnapshot(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      name: request.name,\n    });\n\n    return this._innerApiCalls.createSnapshot(request, options, callback);\n  }\n\n  /**\n   * Updates an existing snapshot. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {Object} request.snapshot\n   *   The updated snapshot object.\n   *\n   *   This object should have the same structure as [Snapshot]{@link google.pubsub.v1.Snapshot}\n   * @param {Object} request.updateMask\n   *   Indicates which fields in the provided snapshot to update.\n   *   Must be specified and non-empty.\n   *\n   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Snapshot]{@link google.pubsub.v1.Snapshot}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const seconds = 123456;\n   * const expireTime = {\n   *   seconds: seconds,\n   * };\n   * const snapshot = {\n   *   expireTime: expireTime,\n   * };\n   * const pathsElement = 'expire_time';\n   * const paths = [pathsElement];\n   * const updateMask = {\n   *   paths: paths,\n   * };\n   * const request = {\n   *   snapshot: snapshot,\n   *   updateMask: updateMask,\n   * };\n   * client.updateSnapshot(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  updateSnapshot(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      'snapshot.name': request.snapshot.name,\n    });\n\n    return this._innerApiCalls.updateSnapshot(request, options, callback);\n  }\n\n  /**\n   * Removes an existing snapshot. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot.<br><br>\n   * When the snapshot is deleted, all messages retained in the snapshot\n   * are immediately dropped. After a snapshot is deleted, a new one may be\n   * created with the same name, but the new one has no association with the old\n   * snapshot or its subscription, unless the same subscription is specified.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.snapshot\n   *   The name of the snapshot to delete.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSnapshot = client.snapshotPath('[PROJECT]', '[SNAPSHOT]');\n   * client.deleteSnapshot({snapshot: formattedSnapshot}).catch(err => {\n   *   console.error(err);\n   * });\n   */\n  deleteSnapshot(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      snapshot: request.snapshot,\n    });\n\n    return this._innerApiCalls.deleteSnapshot(request, options, callback);\n  }\n\n  /**\n   * Seeks an existing subscription to a point in time or to a given snapshot,\n   * whichever is provided in the request. Snapshots are used in\n   * <a href=\"https://cloud.google.com/pubsub/docs/replay-overview\">Seek</a>\n   * operations, which allow\n   * you to manage message acknowledgments in bulk. That is, you can set the\n   * acknowledgment state of messages in an existing subscription to the state\n   * captured by a snapshot. Note that both the subscription and the snapshot\n   * must be on the same topic.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.subscription\n   *   The subscription to affect.\n   * @param {Object} [request.time]\n   *   The time to seek to.\n   *   Messages retained in the subscription that were published before this\n   *   time are marked as acknowledged, and messages retained in the\n   *   subscription that were published after this time are marked as\n   *   unacknowledged. Note that this operation affects only those messages\n   *   retained in the subscription (configured by the combination of\n   *   `message_retention_duration` and `retain_acked_messages`). For example,\n   *   if `time` corresponds to a point before the message retention\n   *   window (or to a point before the system's notion of the subscription\n   *   creation time), only retained messages will be marked as unacknowledged,\n   *   and already-expunged messages will not be restored.\n   *\n   *   This object should have the same structure as [Timestamp]{@link google.protobuf.Timestamp}\n   * @param {string} [request.snapshot]\n   *   The snapshot to seek to. The snapshot's topic must be the same as that of\n   *   the provided subscription.\n   *   Format is `projects/{project}/snapshots/{snap}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [SeekResponse]{@link google.pubsub.v1.SeekResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [SeekResponse]{@link google.pubsub.v1.SeekResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedSubscription = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * client.seek({subscription: formattedSubscription})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  seek(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      subscription: request.subscription,\n    });\n\n    return this._innerApiCalls.seek(request, options, callback);\n  }\n\n  /**\n   * Sets the access control policy on the specified resource. Replaces any\n   * existing policy.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being specified.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} request.policy\n   *   REQUIRED: The complete policy to be applied to the `resource`. The size of\n   *   the policy is limited to a few 10s of KB. An empty policy is a\n   *   valid policy but certain Cloud Platform services (such as Projects)\n   *   might reject them.\n   *\n   *   This object should have the same structure as [Policy]{@link google.iam.v1.Policy}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const policy = {};\n   * const request = {\n   *   resource: formattedResource,\n   *   policy: policy,\n   * };\n   * client.setIamPolicy(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  setIamPolicy(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      resource: request.resource,\n    });\n\n    return this._innerApiCalls.setIamPolicy(request, options, callback);\n  }\n\n  /**\n   * Gets the access control policy for a resource.\n   * Returns an empty policy if the resource exists and does not have a policy\n   * set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} [request.options]\n   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to\n   *   `GetIamPolicy`. This field is only used by Cloud IAM.\n   *\n   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * client.getIamPolicy({resource: formattedResource})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  getIamPolicy(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      resource: request.resource,\n    });\n\n    return this._innerApiCalls.getIamPolicy(request, options, callback);\n  }\n\n  /**\n   * Returns permissions that a caller has on the specified resource.\n   * If the resource does not exist, this will return an empty set of\n   * permissions, not a NOT_FOUND error.\n   *\n   * Note: This operation is designed to be used for building permission-aware\n   * UIs and command-line tools, not for authorization checking. This operation\n   * may \"fail open\" without warning.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy detail is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {string[]} request.permissions\n   *   The set of permissions to check for the `resource`. Permissions with\n   *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n   *   information see\n   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.SubscriberClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.subscriptionPath('[PROJECT]', '[SUBSCRIPTION]');\n   * const permissions = [];\n   * const request = {\n   *   resource: formattedResource,\n   *   permissions: permissions,\n   * };\n   * client.testIamPermissions(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  testIamPermissions(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      resource: request.resource,\n    });\n\n    return this._innerApiCalls.testIamPermissions(request, options, callback);\n  }\n\n  // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {String} project\n   * @returns {String}\n   */\n  projectPath(project) {\n    return this._pathTemplates.projectPathTemplate.render({\n      project: project,\n    });\n  }\n\n  /**\n   * Return a fully-qualified snapshot resource name string.\n   *\n   * @param {String} project\n   * @param {String} snapshot\n   * @returns {String}\n   */\n  snapshotPath(project, snapshot) {\n    return this._pathTemplates.snapshotPathTemplate.render({\n      project: project,\n      snapshot: snapshot,\n    });\n  }\n\n  /**\n   * Return a fully-qualified subscription resource name string.\n   *\n   * @param {String} project\n   * @param {String} subscription\n   * @returns {String}\n   */\n  subscriptionPath(project, subscription) {\n    return this._pathTemplates.subscriptionPathTemplate.render({\n      project: project,\n      subscription: subscription,\n    });\n  }\n\n  /**\n   * Return a fully-qualified topic resource name string.\n   *\n   * @param {String} project\n   * @param {String} topic\n   * @returns {String}\n   */\n  topicPath(project, topic) {\n    return this._pathTemplates.topicPathTemplate.render({\n      project: project,\n      topic: topic,\n    });\n  }\n\n  /**\n   * Parse the projectName from a project resource.\n   *\n   * @param {String} projectName\n   *   A fully-qualified path representing a project resources.\n   * @returns {String} - A string representing the project.\n   */\n  matchProjectFromProjectName(projectName) {\n    return this._pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n\n  /**\n   * Parse the snapshotName from a snapshot resource.\n   *\n   * @param {String} snapshotName\n   *   A fully-qualified path representing a snapshot resources.\n   * @returns {String} - A string representing the project.\n   */\n  matchProjectFromSnapshotName(snapshotName) {\n    return this._pathTemplates.snapshotPathTemplate.match(snapshotName).project;\n  }\n\n  /**\n   * Parse the snapshotName from a snapshot resource.\n   *\n   * @param {String} snapshotName\n   *   A fully-qualified path representing a snapshot resources.\n   * @returns {String} - A string representing the snapshot.\n   */\n  matchSnapshotFromSnapshotName(snapshotName) {\n    return this._pathTemplates.snapshotPathTemplate.match(snapshotName)\n      .snapshot;\n  }\n\n  /**\n   * Parse the subscriptionName from a subscription resource.\n   *\n   * @param {String} subscriptionName\n   *   A fully-qualified path representing a subscription resources.\n   * @returns {String} - A string representing the project.\n   */\n  matchProjectFromSubscriptionName(subscriptionName) {\n    return this._pathTemplates.subscriptionPathTemplate.match(subscriptionName)\n      .project;\n  }\n\n  /**\n   * Parse the subscriptionName from a subscription resource.\n   *\n   * @param {String} subscriptionName\n   *   A fully-qualified path representing a subscription resources.\n   * @returns {String} - A string representing the subscription.\n   */\n  matchSubscriptionFromSubscriptionName(subscriptionName) {\n    return this._pathTemplates.subscriptionPathTemplate.match(subscriptionName)\n      .subscription;\n  }\n\n  /**\n   * Parse the topicName from a topic resource.\n   *\n   * @param {String} topicName\n   *   A fully-qualified path representing a topic resources.\n   * @returns {String} - A string representing the project.\n   */\n  matchProjectFromTopicName(topicName) {\n    return this._pathTemplates.topicPathTemplate.match(topicName).project;\n  }\n\n  /**\n   * Parse the topicName from a topic resource.\n   *\n   * @param {String} topicName\n   *   A fully-qualified path representing a topic resources.\n   * @returns {String} - A string representing the topic.\n   */\n  matchTopicFromTopicName(topicName) {\n    return this._pathTemplates.topicPathTemplate.match(topicName).topic;\n  }\n}\n\nmodule.exports = SubscriberClient;\n"]},"metadata":{},"sourceType":"script"}