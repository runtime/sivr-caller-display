{"ast":null,"code":"var gp12pem = require('google-p12-pem');\n\nvar request = require('request');\n\nvar mime = require('mime');\n\nvar jws = require('jws');\n\nvar fs = require('fs');\n\nvar GOOGLE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/token';\nvar GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n/**\n * Create a GoogleToken.\n *\n * @param {object}   options  Configuration object.\n */\n\nfunction GoogleToken(options) {\n  if (!(this instanceof GoogleToken)) {\n    return new GoogleToken(options);\n  }\n\n  this._configure(options);\n}\n\nGoogleToken.prototype._mime = mime;\n/**\n * Returns whether the token has expired.\n *\n * @return {Boolean} true if the token has expired, false otherwise.\n */\n\nGoogleToken.prototype.hasExpired = function () {\n  var now = new Date().getTime();\n\n  if (this.token && this.expires_at) {\n    return now >= this.expires_at;\n  } else {\n    return true;\n  }\n};\n\nGoogleToken.prototype._gp12pem = gp12pem;\n/**\n * Returns a cached token or retrieves a new one from Google.\n *\n * @param  {Function} callback The callback function.\n */\n\nGoogleToken.prototype.getToken = function (callback) {\n  var self = this;\n\n  if (!this.hasExpired()) {\n    return callback(null, this.token);\n  } else {\n    if (!this.key && !this.keyFile) {\n      callback(new Error('No key or keyFile set.'));\n      return;\n    } else if (!this.key && this.keyFile) {\n      var mimeType = this._mime.lookup(this.keyFile);\n\n      if (mimeType === 'application/json') {\n        // json file\n        fs.readFile(this.keyFile, handleJSONKey);\n      } else {\n        // Must be a .p12 file or .pem key\n        if (!self.iss) {\n          var error = new Error('email is required.');\n          error.code = 'MISSING_CREDENTIALS';\n          callback(error);\n          return;\n        }\n\n        if (mimeType === 'application/x-pkcs12') {\n          // convert to .pem on the fly\n          self._gp12pem(this.keyFile, handleKey);\n        } else {\n          // assume .pem key otherwise\n          fs.readFile(this.keyFile, handleKey);\n        }\n      }\n    } else {\n      return this._requestToken(callback);\n    }\n  }\n\n  function handleJSONKey(err, key) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    try {\n      var body = JSON.parse(key);\n      self.key = body.private_key;\n      self.iss = body.client_email;\n    } catch (e) {\n      callback(e);\n      return;\n    }\n\n    if (!self.key || !self.iss) {\n      var error = new Error('private_key and client_email are required.');\n      error.code = 'MISSING_CREDENTIALS';\n      callback(error);\n      return;\n    }\n\n    self._requestToken(callback);\n  }\n\n  function handleKey(err, key) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    self.key = key;\n\n    self._requestToken(callback);\n  }\n};\n/**\n * Revoke the token if one is set.\n *\n * @param  {Function} callback The callback function.\n */\n\n\nGoogleToken.prototype.revokeToken = function (callback) {\n  var self = this;\n\n  if (this.token) {\n    this._request(GOOGLE_REVOKE_TOKEN_URL + this.token, function (err, res) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      self._configure({\n        email: self.iss,\n        sub: self.sub,\n        key: self.key,\n        keyFile: self.keyFile,\n        scope: self.scope\n      });\n\n      callback();\n    });\n  } else {\n    callback(new Error('No token to revoke.'));\n  }\n};\n/**\n * Configure the GoogleToken for re-use.\n * @param  {object} options Configuration object.\n */\n\n\nGoogleToken.prototype._configure = function (options) {\n  var self = this;\n  options = options || {};\n  this.keyFile = options.keyFile;\n  this.key = options.key;\n  this._request = request;\n  this.token = this.expires_at = this.raw_token = null;\n  this.iss = options.email || options.iss;\n\n  if (options.sub) {\n    this.sub = options.sub;\n  }\n\n  if (typeof options.scope === 'object') {\n    this.scope = options.scope.join(' ');\n  } else {\n    this.scope = options.scope;\n  }\n};\n/**\n * Request the token from Google.\n *\n * @param  {Function} callback The callback function.\n */\n\n\nGoogleToken.prototype._requestToken = function (callback) {\n  var self = this;\n  var iat = Math.floor(new Date().getTime() / 1000);\n  var payload = {\n    iss: this.iss,\n    scope: this.scope,\n    aud: GOOGLE_TOKEN_URL,\n    exp: iat + 3600,\n    // 3600 seconds = 1 hour\n    iat: iat\n  };\n\n  if (this.sub) {\n    payload.sub = this.sub;\n  }\n\n  var toSign = {\n    header: {\n      alg: 'RS256',\n      typ: 'JWT'\n    },\n    payload: payload,\n    secret: this.key\n  };\n  return this._signJWT(toSign, function (err, signedJWT) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    return self._request({\n      method: 'post',\n      url: GOOGLE_TOKEN_URL,\n      form: {\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n        assertion: signedJWT\n      }\n    }, function (err, res, body) {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        body = {};\n      }\n\n      err = err || body.error && new Error(body.error + (body.error_description ? ': ' + body.error_description : ''));\n\n      if (err) {\n        self.token = null;\n        self.token_expires = null;\n        callback(err, null);\n        return;\n      }\n\n      self.raw_token = body;\n      self.token = body.access_token;\n      self.expires_at = (iat + body.expires_in) * 1000;\n      return callback(null, self.token);\n    });\n  });\n};\n/**\n * Sign the JWT object, returning any errors in the callback.\n *\n * @param  {object}   opts     The configuration object.\n * @param  {Function} callback The callback function.\n */\n\n\nGoogleToken.prototype._signJWT = function (opts, callback) {\n  try {\n    var signedJWT = jws.sign(opts);\n    return callback(null, signedJWT);\n  } catch (err) {\n    callback(err, null);\n  }\n};\n\nmodule.exports = GoogleToken;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/google-auto-auth/node_modules/gtoken/lib/index.js"],"names":["gp12pem","require","request","mime","jws","fs","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","GoogleToken","options","_configure","prototype","_mime","hasExpired","now","Date","getTime","token","expires_at","_gp12pem","getToken","callback","self","key","keyFile","Error","mimeType","lookup","readFile","handleJSONKey","iss","error","code","handleKey","_requestToken","err","body","JSON","parse","private_key","client_email","e","revokeToken","_request","res","email","sub","scope","raw_token","join","iat","Math","floor","payload","aud","exp","toSign","header","alg","typ","secret","_signJWT","signedJWT","method","url","form","grant_type","assertion","error_description","token_expires","access_token","expires_in","opts","sign","module","exports"],"mappings":"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","sourcesContent":["var gp12pem = require('google-p12-pem');\nvar request = require('request');\nvar mime = require('mime');\nvar jws = require('jws');\nvar fs = require('fs');\n\nvar GOOGLE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/token';\nvar GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n\n/**\n * Create a GoogleToken.\n *\n * @param {object}   options  Configuration object.\n */\nfunction GoogleToken(options) {\n  if (!(this instanceof GoogleToken)) {\n    return new GoogleToken(options);\n  }\n  this._configure(options);\n}\n\nGoogleToken.prototype._mime = mime;\n\n/**\n * Returns whether the token has expired.\n *\n * @return {Boolean} true if the token has expired, false otherwise.\n */\nGoogleToken.prototype.hasExpired = function() {\n  var now = (new Date()).getTime();\n  if (this.token && this.expires_at) {\n    return now >= this.expires_at;\n  } else {\n    return true;\n  }\n};\n\nGoogleToken.prototype._gp12pem = gp12pem;\n\n/**\n * Returns a cached token or retrieves a new one from Google.\n *\n * @param  {Function} callback The callback function.\n */\nGoogleToken.prototype.getToken = function(callback) {\n  var self = this;\n\n  if (!this.hasExpired()) {\n    return callback(null, this.token);\n  } else {\n    if (!this.key && !this.keyFile) {\n      callback(new Error('No key or keyFile set.'));\n      return;\n    } else if (!this.key && this.keyFile) {\n      var mimeType = this._mime.lookup(this.keyFile);\n      if (mimeType === 'application/json') {\n        // json file\n        fs.readFile(this.keyFile, handleJSONKey);\n      } else {\n        // Must be a .p12 file or .pem key\n        if (!self.iss) {\n          var error = new Error('email is required.');\n          error.code = 'MISSING_CREDENTIALS';\n          callback(error);\n          return;\n        }\n\n        if (mimeType === 'application/x-pkcs12') {\n          // convert to .pem on the fly\n          self._gp12pem(this.keyFile, handleKey);\n        } else {\n          // assume .pem key otherwise\n          fs.readFile(this.keyFile, handleKey);\n        }\n      }\n    } else {\n      return this._requestToken(callback);\n    }\n  }\n\n  function handleJSONKey(err, key) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    try {\n      var body = JSON.parse(key);\n      self.key = body.private_key;\n      self.iss = body.client_email;\n    } catch (e) {\n      callback(e);\n      return;\n    }\n\n    if (!self.key || !self.iss) {\n      var error = new Error('private_key and client_email are required.');\n      error.code = 'MISSING_CREDENTIALS';\n      callback(error);\n      return;\n    }\n\n    self._requestToken(callback);\n  }\n\n  function handleKey(err, key) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    self.key = key;\n    self._requestToken(callback);\n  }\n};\n\n/**\n * Revoke the token if one is set.\n *\n * @param  {Function} callback The callback function.\n */\nGoogleToken.prototype.revokeToken = function(callback) {\n  var self = this;\n  if (this.token) {\n    this._request(GOOGLE_REVOKE_TOKEN_URL + this.token, function(err, res) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      self._configure({\n        email: self.iss,\n        sub: self.sub,\n        key: self.key,\n        keyFile: self.keyFile,\n        scope: self.scope\n      });\n      callback();\n    });\n  } else {\n    callback(new Error('No token to revoke.'));\n  }\n};\n\n/**\n * Configure the GoogleToken for re-use.\n * @param  {object} options Configuration object.\n */\nGoogleToken.prototype._configure = function(options) {\n  var self = this;\n  options = options || {};\n  this.keyFile = options.keyFile;\n  this.key = options.key;\n  this._request = request;\n  this.token = this.expires_at = this.raw_token = null;\n  this.iss = options.email || options.iss;\n\n  if (options.sub) {\n    this.sub = options.sub;\n  }\n\n  if (typeof options.scope === 'object') {\n    this.scope = options.scope.join(' ');\n  } else {\n    this.scope = options.scope;\n  }\n};\n\n/**\n * Request the token from Google.\n *\n * @param  {Function} callback The callback function.\n */\nGoogleToken.prototype._requestToken = function(callback) {\n  var self = this;\n  var iat = Math.floor(new Date().getTime() / 1000);\n  var payload = {\n    iss: this.iss,\n    scope: this.scope,\n    aud: GOOGLE_TOKEN_URL,\n    exp: iat + 3600, // 3600 seconds = 1 hour\n    iat: iat\n  };\n\n  if (this.sub) {\n    payload.sub = this.sub;\n  }\n\n  var toSign = {\n    header: {\n      alg: 'RS256',\n      typ: 'JWT'\n    },\n    payload: payload,\n    secret: this.key\n  };\n\n  return this._signJWT(toSign, function(err, signedJWT) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    return self._request({\n      method: 'post',\n      url: GOOGLE_TOKEN_URL,\n      form: {\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n        assertion: signedJWT\n      }\n    }, function(err, res, body) {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        body = {};\n      }\n\n      err = err || body.error && new Error(body.error +\n          (body.error_description ? ': ' + body.error_description : ''));\n\n      if (err) {\n        self.token = null;\n        self.token_expires = null;\n        callback(err, null);\n        return;\n      }\n\n      self.raw_token = body;\n      self.token = body.access_token;\n      self.expires_at = (iat + body.expires_in) * 1000;\n      return callback(null, self.token);\n    });\n  });\n};\n\n/**\n * Sign the JWT object, returning any errors in the callback.\n *\n * @param  {object}   opts     The configuration object.\n * @param  {Function} callback The callback function.\n */\nGoogleToken.prototype._signJWT = function(opts, callback) {\n  try {\n    var signedJWT = jws.sign(opts);\n    return callback(null, signedJWT);\n  } catch (err) {\n    callback(err, null);\n  }\n};\n\nmodule.exports = GoogleToken;\n"]},"metadata":{},"sourceType":"script"}