{"ast":null,"code":"/*\n * logger.js: Core logger object used by winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\nvar events = require('events'),\n    util = require('util'),\n    async = require('async'),\n    config = require('./config'),\n    common = require('./common'),\n    exception = require('./exception'),\n    Stream = require('stream').Stream; //\n// ### function Logger (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Logger object responsible\n// for persisting log messages and metadata to one or more transports.\n//\n\n\nvar Logger = exports.Logger = function (options) {\n  events.EventEmitter.call(this);\n  options = options || {};\n  var self = this,\n      handleExceptions = false; //\n  // Set Levels and default logging level\n  //\n\n  this.padLevels = options.padLevels || false;\n  this.setLevels(options.levels);\n\n  if (options.colors) {\n    config.addColors(options.colors);\n  } //\n  // Hoist other options onto this instance.\n  //\n\n\n  this.level = options.level || 'info';\n  this.emitErrs = options.emitErrs || false;\n  this.stripColors = options.stripColors || false;\n  this.exitOnError = typeof options.exitOnError !== 'undefined' ? options.exitOnError : true; //\n  // Setup other intelligent default settings.\n  //\n\n  this.transports = {};\n  this.rewriters = [];\n  this.filters = [];\n  this.exceptionHandlers = {};\n  this.profilers = {};\n  this._names = [];\n  this._hnames = [];\n\n  if (options.transports) {\n    options.transports.forEach(function (transport) {\n      self.add(transport, null, true);\n\n      if (transport.handleExceptions) {\n        handleExceptions = true;\n      }\n    });\n  }\n\n  if (options.rewriters) {\n    options.rewriters.forEach(function (rewriter) {\n      self.addRewriter(rewriter);\n    });\n  }\n\n  if (options.exceptionHandlers) {\n    handleExceptions = true;\n    options.exceptionHandlers.forEach(function (handler) {\n      self._hnames.push(handler.name);\n\n      self.exceptionHandlers[handler.name] = handler;\n    });\n  }\n\n  if (options.handleExceptions || handleExceptions) {\n    this.handleExceptions();\n  }\n}; //\n// Inherit from `events.EventEmitter`.\n//\n\n\nutil.inherits(Logger, events.EventEmitter); //\n// ### function extend (target)\n// #### @target {Object} Target to extend.\n// Extends the target object with a 'log' method\n// along with a method for each level in this instance.\n//\n\nLogger.prototype.extend = function (target) {\n  var self = this;\n  ['log', 'profile', 'startTimer'].concat(Object.keys(this.levels)).forEach(function (method) {\n    target[method] = function () {\n      return self[method].apply(self, arguments);\n    };\n  });\n  return this;\n}; //\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\n\n\nLogger.prototype.log = function (level) {\n  var self = this,\n      args = Array.prototype.slice.call(arguments, 1);\n\n  while (args[args.length - 1] === null) {\n    args.pop();\n  }\n\n  var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null,\n      meta = typeof args[args.length - 1] === 'object' && Object.prototype.toString.call(args[args.length - 1]) !== '[object RegExp]' ? args.pop() : {},\n      msg = util.format.apply(null, args); // If we should pad for levels, do so\n\n  if (this.padLevels) {\n    msg = new Array(this.levelLength - level.length + 1).join(' ') + msg;\n  }\n\n  function onError(err) {\n    if (callback) {\n      callback(err);\n    } else if (self.emitErrs) {\n      self.emit('error', err);\n    }\n  }\n\n  if (Object.keys(this.transports).length === 0) {\n    return onError(new Error('Cannot log with no transports.'));\n  } else if (typeof self.levels[level] === 'undefined') {\n    return onError(new Error('Unknown log level: ' + level));\n  }\n\n  this.rewriters.forEach(function (rewriter) {\n    meta = rewriter(level, msg, meta, self);\n  });\n  this.filters.forEach(function (filter) {\n    var filtered = filter(msg, meta, level, self);\n    if (typeof filtered === 'string') msg = filtered;else {\n      msg = filtered.msg;\n      meta = filtered.meta;\n    }\n  }); //\n  // For consideration of terminal 'color\" programs like colors.js,\n  // which can add ANSI escape color codes to strings, we destyle the\n  // ANSI color escape codes when `this.stripColors` is set.\n  //\n  // see: http://en.wikipedia.org/wiki/ANSI_escape_code\n  //\n\n  if (this.stripColors) {\n    var code = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n    msg = ('' + msg).replace(code, '');\n  } //\n  // Log for each transport and emit 'logging' event\n  //\n\n\n  function emit(name, next) {\n    var transport = self.transports[name];\n\n    if (transport.level && self.levels[transport.level] <= self.levels[level] || !transport.level && self.levels[self.level] <= self.levels[level]) {\n      transport.log(level, msg, meta, function (err) {\n        if (err) {\n          err.transport = transport;\n          cb(err);\n          return next();\n        }\n\n        self.emit('logging', transport, level, msg, meta);\n        next();\n      });\n    } else {\n      next();\n    }\n  } //\n  // Respond to the callback\n  //\n\n\n  function cb(err) {\n    if (callback) {\n      if (err) return callback(err);\n      callback(null, level, msg, meta);\n    }\n\n    callback = null;\n\n    if (!err) {\n      self.emit('logged', level, msg, meta);\n    }\n  }\n\n  async.forEach(this._names, emit, cb);\n  return this;\n}; //\n// ### function query (options, callback)\n// #### @options {Object} Query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Queries the all transports for this instance with the specified `options`.\n// This will aggregate each transport's results into one object containing\n// a property per transport.\n//\n\n\nLogger.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var self = this,\n      options = options || {},\n      results = {},\n      query = common.clone(options.query) || {},\n      transports; //\n  // Helper function to query a single transport\n  //\n\n  function queryTransport(transport, next) {\n    if (options.query) {\n      options.query = transport.formatQuery(query);\n    }\n\n    transport.query(options, function (err, results) {\n      if (err) {\n        return next(err);\n      }\n\n      next(null, transport.formatResults(results, options.format));\n    });\n  } //\n  // Helper function to accumulate the results from\n  // `queryTransport` into the `results`.\n  //\n\n\n  function addResults(transport, next) {\n    queryTransport(transport, function (err, result) {\n      //\n      // queryTransport could potentially invoke the callback\n      // multiple times since Transport code can be unpredictable.\n      //\n      if (next) {\n        result = err || result;\n\n        if (result) {\n          results[transport.name] = result;\n        }\n\n        next();\n      }\n\n      next = null;\n    });\n  } //\n  // If an explicit transport is being queried then\n  // respond with the results from only that transport\n  //\n\n\n  if (options.transport) {\n    options.transport = options.transport.toLowerCase();\n    return queryTransport(this.transports[options.transport], callback);\n  } //\n  // Create a list of all transports for this instance.\n  //\n\n\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.query;\n  }); //\n  // Iterate over the transports in parallel setting the\n  // appropriate key in the `results`\n  //\n\n  async.forEach(transports, addResults, function () {\n    callback(null, results);\n  });\n}; //\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for all transports. Options object is optional.\n//\n\n\nLogger.prototype.stream = function (options) {\n  var self = this,\n      options = options || {},\n      out = new Stream(),\n      streams = [],\n      transports;\n\n  if (options.transport) {\n    var transport = this.transports[options.transport];\n    delete options.transport;\n\n    if (transport && transport.stream) {\n      return transport.stream(options);\n    }\n  }\n\n  out._streams = streams;\n\n  out.destroy = function () {\n    var i = streams.length;\n\n    while (i--) streams[i].destroy();\n  }; //\n  // Create a list of all transports for this instance.\n  //\n\n\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.stream;\n  });\n  transports.forEach(function (transport) {\n    var stream = transport.stream(options);\n    if (!stream) return;\n    streams.push(stream);\n    stream.on('log', function (log) {\n      log.transport = log.transport || [];\n      log.transport.push(transport.name);\n      out.emit('log', log);\n    });\n    stream.on('error', function (err) {\n      err.transport = err.transport || [];\n      err.transport.push(transport.name);\n      out.emit('error', err);\n    });\n  });\n  return out;\n}; //\n// ### function close ()\n// Cleans up resources (streams, event listeners) for all\n// transports associated with this instance (if necessary).\n//\n\n\nLogger.prototype.close = function () {\n  var self = this;\n\n  this._names.forEach(function (name) {\n    var transport = self.transports[name];\n\n    if (transport && transport.close) {\n      transport.close();\n    }\n  });\n\n  this.emit('close');\n}; //\n// ### function handleExceptions ()\n// Handles `uncaughtException` events for the current process\n//\n\n\nLogger.prototype.handleExceptions = function () {\n  var args = Array.prototype.slice.call(arguments),\n      handlers = [],\n      self = this;\n  args.forEach(function (a) {\n    if (Array.isArray(a)) {\n      handlers = handlers.concat(a);\n    } else {\n      handlers.push(a);\n    }\n  });\n  handlers.forEach(function (handler) {\n    self.exceptionHandlers[handler.name] = handler;\n  });\n  this._hnames = Object.keys(self.exceptionHandlers);\n\n  if (!this.catchExceptions) {\n    this.catchExceptions = this._uncaughtException.bind(this);\n    process.on('uncaughtException', this.catchExceptions);\n  }\n}; //\n// ### function unhandleExceptions ()\n// Removes any handlers to `uncaughtException` events\n// for the current process\n//\n\n\nLogger.prototype.unhandleExceptions = function () {\n  var self = this;\n\n  if (this.catchExceptions) {\n    Object.keys(this.exceptionHandlers).forEach(function (name) {\n      var handler = self.exceptionHandlers[name];\n\n      if (handler.close) {\n        handler.close();\n      }\n    });\n    this.exceptionHandlers = {};\n    Object.keys(this.transports).forEach(function (name) {\n      var transport = self.transports[name];\n\n      if (transport.handleExceptions) {\n        transport.handleExceptions = false;\n      }\n    });\n    process.removeListener('uncaughtException', this.catchExceptions);\n    this.catchExceptions = false;\n  }\n}; //\n// ### function add (transport, [options])\n// #### @transport {Transport} Prototype of the Transport object to add.\n// #### @options {Object} **Optional** Options for the Transport to add.\n// #### @instance {Boolean} **Optional** Value indicating if `transport` is already instantiated.\n// Adds a transport of the specified type to this instance.\n//\n\n\nLogger.prototype.add = function (transport, options, created) {\n  var instance = created ? transport : new transport(options);\n\n  if (!instance.name && !instance.log) {\n    throw new Error('Unknown transport with no log() method');\n  } else if (this.transports[instance.name]) {\n    throw new Error('Transport already attached: ' + instance.name);\n  }\n\n  this.transports[instance.name] = instance;\n  this._names = Object.keys(this.transports); //\n  // Listen for the `error` event on the new Transport\n  //\n\n  instance._onError = this._onError.bind(this, instance);\n\n  if (!created) {\n    instance.on('error', instance._onError);\n  } //\n  // If this transport has `handleExceptions` set to `true`\n  // and we are not already handling exceptions, do so.\n  //\n\n\n  if (instance.handleExceptions && !this.catchExceptions) {\n    this.handleExceptions();\n  }\n\n  return this;\n}; //\n// ### function addRewriter (transport, [options])\n// #### @transport {Transport} Prototype of the Transport object to add.\n// #### @options {Object} **Optional** Options for the Transport to add.\n// #### @instance {Boolean} **Optional** Value indicating if `transport` is already instantiated.\n// Adds a transport of the specified type to this instance.\n//\n\n\nLogger.prototype.addRewriter = function (rewriter) {\n  this.rewriters.push(rewriter);\n}; //\n// ### function addFilter (filter)\n// #### @filter {function} Filter function, called with the message and\n// optional metadata as the two arguments.\n// Expected to return either the filtered message or an object with properties:\n//   - msg = the filtered message string\n//   - meta = the filtered metadata object\n//\n\n\nLogger.prototype.addFilter = function (filter) {\n  this.filters.push(filter);\n}; //\n// ### function clear ()\n// Remove all transports from this instance\n//\n\n\nLogger.prototype.clear = function () {\n  for (var name in this.transports) {\n    this.remove({\n      name: name\n    });\n  }\n}; //\n// ### function remove (transport)\n// #### @transport {Transport|String} Transport or Name to remove.\n// Removes a transport of the specified type from this instance.\n//\n\n\nLogger.prototype.remove = function (transport) {\n  var name = typeof transport !== 'string' ? transport.name || transport.prototype.name : transport;\n\n  if (!this.transports[name]) {\n    throw new Error('Transport ' + name + ' not attached to this instance');\n  }\n\n  var instance = this.transports[name];\n  delete this.transports[name];\n  this._names = Object.keys(this.transports);\n\n  if (instance.close) {\n    instance.close();\n  }\n\n  if (instance._onError) {\n    instance.removeListener('error', instance._onError);\n  }\n\n  return this;\n};\n\nvar ProfileHandler = function (logger) {\n  this.logger = logger;\n  this.start = Date.now();\n\n  this.done = function (msg) {\n    var args, callback, meta;\n    args = Array.prototype.slice.call(arguments);\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    meta = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n    meta.durationMs = Date.now() - this.start;\n    return this.logger.info(msg, meta, callback);\n  };\n};\n\nLogger.prototype.startTimer = function () {\n  return new ProfileHandler(this);\n}; //\n// ### function profile (id, [msg, meta, callback])\n// #### @id {string} Unique id of the profiler\n// #### @msg {string} **Optional** Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Tracks the time inbetween subsequent calls to this method\n// with the same `id` parameter. The second call to this method\n// will log the difference in milliseconds along with the message.\n//\n\n\nLogger.prototype.profile = function (id) {\n  var now = Date.now(),\n      then,\n      args,\n      msg,\n      meta,\n      callback;\n\n  if (this.profilers[id]) {\n    then = this.profilers[id];\n    delete this.profilers[id]; // Support variable arguments: msg, meta, callback\n\n    args = Array.prototype.slice.call(arguments);\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    meta = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n    msg = args.length === 2 ? args[1] : id; // Set the duration property of the metadata\n\n    meta.durationMs = now - then;\n    return this.info(msg, meta, callback);\n  } else {\n    this.profilers[id] = now;\n  }\n\n  return this;\n}; //\n// ### function setLevels (target)\n// #### @target {Object} Target levels to use on this instance\n// Sets the `target` levels specified on this instance.\n//\n\n\nLogger.prototype.setLevels = function (target) {\n  return common.setLevels(this, this.levels, target);\n}; //\n// ### function cli ()\n// Configures this instance to have the default\n// settings for command-line interfaces: no timestamp,\n// colors enabled, padded output, and additional levels.\n//\n\n\nLogger.prototype.cli = function () {\n  this.padLevels = true;\n  this.setLevels(config.cli.levels);\n  config.addColors(config.cli.colors);\n\n  if (this.transports.console) {\n    this.transports.console.colorize = this.transports.console.colorize || true;\n    this.transports.console.timestamp = this.transports.console.timestamp || false;\n  }\n\n  return this;\n}; //\n// ### @private function _uncaughtException (err)\n// #### @err {Error} Error to handle\n// Logs all relevant information around the `err` and\n// exits the current process.\n//\n\n\nLogger.prototype._uncaughtException = function (err) {\n  var self = this,\n      responded = false,\n      info = exception.getAllInfo(err),\n      handlers = this._getExceptionHandlers(),\n      timeout,\n      doExit; //\n  // Calculate if we should exit on this error\n  //\n\n\n  doExit = typeof this.exitOnError === 'function' ? this.exitOnError(err) : this.exitOnError;\n\n  function logAndWait(transport, next) {\n    transport.logException('uncaughtException: ' + (err.message || err), info, next, err);\n  }\n\n  function gracefulExit() {\n    if (doExit && !responded) {\n      //\n      // Remark: Currently ignoring any exceptions from transports\n      //         when catching uncaught exceptions.\n      //\n      clearTimeout(timeout);\n      responded = true;\n      process.exit(1);\n    }\n  }\n\n  if (!handlers || handlers.length === 0) {\n    return gracefulExit();\n  } //\n  // Log to all transports and allow the operation to take\n  // only up to `3000ms`.\n  //\n\n\n  async.forEach(handlers, logAndWait, gracefulExit);\n\n  if (doExit) {\n    timeout = setTimeout(gracefulExit, 3000);\n  }\n}; //\n// ### @private function _getExceptionHandlers ()\n// Returns the list of transports and exceptionHandlers\n// for this instance.\n//\n\n\nLogger.prototype._getExceptionHandlers = function () {\n  var self = this;\n  return this._hnames.map(function (name) {\n    return self.exceptionHandlers[name];\n  }).concat(this._names.map(function (name) {\n    return self.transports[name].handleExceptions && self.transports[name];\n  })).filter(Boolean);\n}; //\n// ### @private function _onError (transport, err)\n// #### @transport {Object} Transport on which the error occured\n// #### @err {Error} Error that occurred on the transport\n// Bubbles the error, `err`, that occured on the specified `transport`\n// up from this instance if `emitErrs` has been set.\n//\n\n\nLogger.prototype._onError = function (transport, err) {\n  if (this.emitErrs) {\n    this.emit('error', err, transport);\n  }\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/winston/lib/winston/logger.js"],"names":["events","require","util","async","config","common","exception","Stream","Logger","exports","options","EventEmitter","call","self","handleExceptions","padLevels","setLevels","levels","colors","addColors","level","emitErrs","stripColors","exitOnError","transports","rewriters","filters","exceptionHandlers","profilers","_names","_hnames","forEach","transport","add","rewriter","addRewriter","handler","push","name","inherits","prototype","extend","target","concat","Object","keys","method","apply","arguments","log","args","Array","slice","length","pop","callback","meta","toString","msg","format","levelLength","join","onError","err","emit","Error","filter","filtered","code","replace","next","cb","query","results","clone","queryTransport","formatQuery","formatResults","addResults","result","toLowerCase","map","stream","out","streams","_streams","destroy","i","on","close","handlers","a","isArray","catchExceptions","_uncaughtException","bind","process","unhandleExceptions","removeListener","created","instance","_onError","addFilter","clear","remove","ProfileHandler","logger","start","Date","now","done","durationMs","info","startTimer","profile","id","then","cli","console","colorize","timestamp","responded","getAllInfo","_getExceptionHandlers","timeout","doExit","logAndWait","logException","message","gracefulExit","clearTimeout","exit","setTimeout","Boolean"],"mappings":"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","sourcesContent":["/*\n * logger.js: Core logger object used by winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\n\nvar events = require('events'),\n    util = require('util'),\n    async = require('async'),\n    config = require('./config'),\n    common = require('./common'),\n    exception = require('./exception'),\n    Stream = require('stream').Stream;\n\n//\n// ### function Logger (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Logger object responsible\n// for persisting log messages and metadata to one or more transports.\n//\nvar Logger = exports.Logger = function (options) {\n  events.EventEmitter.call(this);\n  options = options || {};\n\n  var self = this,\n      handleExceptions = false;\n\n  //\n  // Set Levels and default logging level\n  //\n  this.padLevels = options.padLevels || false;\n  this.setLevels(options.levels);\n  if (options.colors) {\n    config.addColors(options.colors);\n  }\n\n  //\n  // Hoist other options onto this instance.\n  //\n  this.level       = options.level || 'info';\n  this.emitErrs    = options.emitErrs || false;\n  this.stripColors = options.stripColors || false;\n  this.exitOnError = typeof options.exitOnError !== 'undefined'\n    ? options.exitOnError\n    : true;\n\n  //\n  // Setup other intelligent default settings.\n  //\n  this.transports        = {};\n  this.rewriters         = [];\n  this.filters           = [];\n  this.exceptionHandlers = {};\n  this.profilers         = {};\n  this._names            = [];\n  this._hnames           = [];\n\n  if (options.transports) {\n    options.transports.forEach(function (transport) {\n      self.add(transport, null, true);\n\n      if (transport.handleExceptions) {\n        handleExceptions = true;\n      }\n    });\n  }\n\n  if (options.rewriters) {\n    options.rewriters.forEach(function (rewriter) {\n      self.addRewriter(rewriter);\n    });\n  }\n\n  if (options.exceptionHandlers) {\n    handleExceptions = true;\n    options.exceptionHandlers.forEach(function (handler) {\n      self._hnames.push(handler.name);\n      self.exceptionHandlers[handler.name] = handler;\n    });\n  }\n\n  if (options.handleExceptions || handleExceptions) {\n    this.handleExceptions();\n  }\n};\n\n//\n// Inherit from `events.EventEmitter`.\n//\nutil.inherits(Logger, events.EventEmitter);\n\n//\n// ### function extend (target)\n// #### @target {Object} Target to extend.\n// Extends the target object with a 'log' method\n// along with a method for each level in this instance.\n//\nLogger.prototype.extend = function (target) {\n  var self = this;\n  ['log', 'profile', 'startTimer'].concat(Object.keys(this.levels)).forEach(function (method) {\n    target[method] = function () {\n      return self[method].apply(self, arguments);\n    };\n  });\n\n  return this;\n};\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nLogger.prototype.log = function (level) {\n  var self = this,\n      args = Array.prototype.slice.call(arguments, 1);\n\n  while(args[args.length - 1] === null) {\n    args.pop();\n  }\n\n  var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null,\n      meta     = typeof args[args.length - 1] === 'object' && Object.prototype.toString.call(args[args.length - 1]) !== '[object RegExp]' ? args.pop() : {},\n      msg      = util.format.apply(null, args);\n\n  // If we should pad for levels, do so\n  if (this.padLevels) {\n    msg = new Array(this.levelLength - level.length + 1).join(' ') + msg;\n  }\n\n  function onError (err) {\n    if (callback) {\n      callback(err);\n    }\n    else if (self.emitErrs) {\n      self.emit('error', err);\n    }\n  }\n\n\n  if (Object.keys(this.transports).length === 0) {\n    return onError(new Error('Cannot log with no transports.'));\n  }\n  else if (typeof self.levels[level] === 'undefined') {\n    return onError(new Error('Unknown log level: ' + level));\n  }\n\n  this.rewriters.forEach(function (rewriter) {\n    meta = rewriter(level, msg, meta, self);\n  });\n\n  this.filters.forEach(function(filter) {\n    var filtered = filter(msg, meta, level, self);\n    if (typeof filtered === 'string')\n      msg = filtered;\n    else {\n      msg = filtered.msg;\n      meta = filtered.meta;\n    }\n  });\n\n  //\n  // For consideration of terminal 'color\" programs like colors.js,\n  // which can add ANSI escape color codes to strings, we destyle the\n  // ANSI color escape codes when `this.stripColors` is set.\n  //\n  // see: http://en.wikipedia.org/wiki/ANSI_escape_code\n  //\n  if (this.stripColors) {\n    var code = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n    msg = ('' + msg).replace(code, '');\n  }\n\n  //\n  // Log for each transport and emit 'logging' event\n  //\n  function emit(name, next) {\n    var transport = self.transports[name];\n    if ((transport.level && self.levels[transport.level] <= self.levels[level])\n      || (!transport.level && self.levels[self.level] <= self.levels[level])) {\n      transport.log(level, msg, meta, function (err) {\n        if (err) {\n          err.transport = transport;\n          cb(err);\n          return next();\n        }\n        self.emit('logging', transport, level, msg, meta);\n        next();\n      });\n    } else {\n      next();\n    }\n  }\n\n  //\n  // Respond to the callback\n  //\n  function cb(err) {\n    if (callback) {\n      if (err) return callback(err);\n      callback(null, level, msg, meta);\n    }\n    callback = null;\n    if (!err) {\n      self.emit('logged', level, msg, meta);\n    }\n  }\n\n  async.forEach(this._names, emit, cb);\n\n  return this;\n};\n\n//\n// ### function query (options, callback)\n// #### @options {Object} Query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Queries the all transports for this instance with the specified `options`.\n// This will aggregate each transport's results into one object containing\n// a property per transport.\n//\nLogger.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var self = this,\n      options = options || {},\n      results = {},\n      query = common.clone(options.query) || {},\n      transports;\n\n  //\n  // Helper function to query a single transport\n  //\n  function queryTransport(transport, next) {\n    if (options.query) {\n      options.query = transport.formatQuery(query);\n    }\n\n    transport.query(options, function (err, results) {\n      if (err) {\n        return next(err);\n      }\n\n      next(null, transport.formatResults(results, options.format));\n    });\n  }\n\n  //\n  // Helper function to accumulate the results from\n  // `queryTransport` into the `results`.\n  //\n  function addResults (transport, next) {\n    queryTransport(transport, function (err, result) {\n      //\n      // queryTransport could potentially invoke the callback\n      // multiple times since Transport code can be unpredictable.\n      //\n      if (next) {\n        result = err || result;\n        if (result) {\n          results[transport.name] = result;\n        }\n\n        next();\n      }\n\n      next = null;\n    });\n  }\n\n  //\n  // If an explicit transport is being queried then\n  // respond with the results from only that transport\n  //\n  if (options.transport) {\n    options.transport = options.transport.toLowerCase();\n    return queryTransport(this.transports[options.transport], callback);\n  }\n\n  //\n  // Create a list of all transports for this instance.\n  //\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.query;\n  });\n\n  //\n  // Iterate over the transports in parallel setting the\n  // appropriate key in the `results`\n  //\n  async.forEach(transports, addResults, function () {\n    callback(null, results);\n  });\n};\n\n//\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for all transports. Options object is optional.\n//\nLogger.prototype.stream = function (options) {\n  var self = this,\n      options = options || {},\n      out = new Stream,\n      streams = [],\n      transports;\n\n  if (options.transport) {\n    var transport = this.transports[options.transport];\n    delete options.transport;\n    if (transport && transport.stream) {\n      return transport.stream(options);\n    }\n  }\n\n  out._streams = streams;\n  out.destroy = function () {\n    var i = streams.length;\n    while (i--) streams[i].destroy();\n  };\n\n  //\n  // Create a list of all transports for this instance.\n  //\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.stream;\n  });\n\n  transports.forEach(function (transport) {\n    var stream = transport.stream(options);\n    if (!stream) return;\n\n    streams.push(stream);\n\n    stream.on('log', function (log) {\n      log.transport = log.transport || [];\n      log.transport.push(transport.name);\n      out.emit('log', log);\n    });\n\n    stream.on('error', function (err) {\n      err.transport = err.transport || [];\n      err.transport.push(transport.name);\n      out.emit('error', err);\n    });\n  });\n\n  return out;\n};\n\n//\n// ### function close ()\n// Cleans up resources (streams, event listeners) for all\n// transports associated with this instance (if necessary).\n//\nLogger.prototype.close = function () {\n  var self = this;\n\n  this._names.forEach(function (name) {\n    var transport = self.transports[name];\n    if (transport && transport.close) {\n      transport.close();\n    }\n  });\n\n  this.emit('close');\n};\n\n//\n// ### function handleExceptions ()\n// Handles `uncaughtException` events for the current process\n//\nLogger.prototype.handleExceptions = function () {\n  var args = Array.prototype.slice.call(arguments),\n      handlers = [],\n      self = this;\n\n  args.forEach(function (a) {\n    if (Array.isArray(a)) {\n      handlers = handlers.concat(a);\n    }\n    else {\n      handlers.push(a);\n    }\n  });\n\n  handlers.forEach(function (handler) {\n    self.exceptionHandlers[handler.name] = handler;\n  });\n\n  this._hnames = Object.keys(self.exceptionHandlers);\n\n  if (!this.catchExceptions) {\n    this.catchExceptions = this._uncaughtException.bind(this);\n    process.on('uncaughtException', this.catchExceptions);\n  }\n};\n\n//\n// ### function unhandleExceptions ()\n// Removes any handlers to `uncaughtException` events\n// for the current process\n//\nLogger.prototype.unhandleExceptions = function () {\n  var self = this;\n\n  if (this.catchExceptions) {\n    Object.keys(this.exceptionHandlers).forEach(function (name) {\n      var handler = self.exceptionHandlers[name];\n      if (handler.close) {\n        handler.close();\n      }\n    });\n\n    this.exceptionHandlers = {};\n    Object.keys(this.transports).forEach(function (name) {\n      var transport = self.transports[name];\n      if (transport.handleExceptions) {\n        transport.handleExceptions = false;\n      }\n    })\n\n    process.removeListener('uncaughtException', this.catchExceptions);\n    this.catchExceptions = false;\n  }\n};\n\n//\n// ### function add (transport, [options])\n// #### @transport {Transport} Prototype of the Transport object to add.\n// #### @options {Object} **Optional** Options for the Transport to add.\n// #### @instance {Boolean} **Optional** Value indicating if `transport` is already instantiated.\n// Adds a transport of the specified type to this instance.\n//\nLogger.prototype.add = function (transport, options, created) {\n  var instance = created ? transport : (new (transport)(options));\n\n  if (!instance.name && !instance.log) {\n    throw new Error('Unknown transport with no log() method');\n  }\n  else if (this.transports[instance.name]) {\n    throw new Error('Transport already attached: ' + instance.name);\n  }\n\n  this.transports[instance.name] = instance;\n  this._names = Object.keys(this.transports);\n\n  //\n  // Listen for the `error` event on the new Transport\n  //\n  instance._onError = this._onError.bind(this, instance)\n  if (!created) {\n    instance.on('error', instance._onError);\n  }\n\n  //\n  // If this transport has `handleExceptions` set to `true`\n  // and we are not already handling exceptions, do so.\n  //\n  if (instance.handleExceptions && !this.catchExceptions) {\n    this.handleExceptions();\n  }\n\n  return this;\n};\n\n//\n// ### function addRewriter (transport, [options])\n// #### @transport {Transport} Prototype of the Transport object to add.\n// #### @options {Object} **Optional** Options for the Transport to add.\n// #### @instance {Boolean} **Optional** Value indicating if `transport` is already instantiated.\n// Adds a transport of the specified type to this instance.\n//\nLogger.prototype.addRewriter = function (rewriter) {\n  this.rewriters.push(rewriter);\n}\n\n//\n// ### function addFilter (filter)\n// #### @filter {function} Filter function, called with the message and\n// optional metadata as the two arguments.\n// Expected to return either the filtered message or an object with properties:\n//   - msg = the filtered message string\n//   - meta = the filtered metadata object\n//\nLogger.prototype.addFilter = function (filter) {\n  this.filters.push(filter);\n}\n\n//\n// ### function clear ()\n// Remove all transports from this instance\n//\nLogger.prototype.clear = function () {\n  for (var name in this.transports) {\n    this.remove({ name: name });\n  }\n};\n\n//\n// ### function remove (transport)\n// #### @transport {Transport|String} Transport or Name to remove.\n// Removes a transport of the specified type from this instance.\n//\nLogger.prototype.remove = function (transport) {\n  var name = typeof transport !== 'string'\n    ? transport.name || transport.prototype.name\n    : transport;\n\n  if (!this.transports[name]) {\n    throw new Error('Transport ' + name + ' not attached to this instance');\n  }\n\n  var instance = this.transports[name];\n  delete this.transports[name];\n  this._names = Object.keys(this.transports);\n\n  if (instance.close) {\n    instance.close();\n  }\n\n  if (instance._onError) {\n    instance.removeListener('error', instance._onError);\n  }\n  return this;\n};\n\nvar ProfileHandler = function (logger) {\n  this.logger = logger;\n\n  this.start = Date.now();\n\n  this.done = function (msg) {\n    var args, callback, meta;\n    args     = Array.prototype.slice.call(arguments);\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    meta     = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n\n    meta.durationMs = (Date.now()) - this.start;\n\n    return this.logger.info(msg, meta, callback);\n  }\n}\n\nLogger.prototype.startTimer = function () {\n  return new ProfileHandler(this);\n}\n\n//\n// ### function profile (id, [msg, meta, callback])\n// #### @id {string} Unique id of the profiler\n// #### @msg {string} **Optional** Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Tracks the time inbetween subsequent calls to this method\n// with the same `id` parameter. The second call to this method\n// will log the difference in milliseconds along with the message.\n//\nLogger.prototype.profile = function (id) {\n  var now = Date.now(), then, args,\n      msg, meta, callback;\n\n  if (this.profilers[id]) {\n    then = this.profilers[id];\n    delete this.profilers[id];\n\n    // Support variable arguments: msg, meta, callback\n    args     = Array.prototype.slice.call(arguments);\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    meta     = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n    msg      = args.length === 2 ? args[1] : id;\n\n    // Set the duration property of the metadata\n    meta.durationMs = now - then;\n    return this.info(msg, meta, callback);\n  }\n  else {\n    this.profilers[id] = now;\n  }\n\n  return this;\n};\n\n//\n// ### function setLevels (target)\n// #### @target {Object} Target levels to use on this instance\n// Sets the `target` levels specified on this instance.\n//\nLogger.prototype.setLevels = function (target) {\n  return common.setLevels(this, this.levels, target);\n};\n\n//\n// ### function cli ()\n// Configures this instance to have the default\n// settings for command-line interfaces: no timestamp,\n// colors enabled, padded output, and additional levels.\n//\nLogger.prototype.cli = function () {\n  this.padLevels = true;\n  this.setLevels(config.cli.levels);\n  config.addColors(config.cli.colors);\n\n  if (this.transports.console) {\n    this.transports.console.colorize = this.transports.console.colorize || true;\n    this.transports.console.timestamp = this.transports.console.timestamp || false;\n  }\n\n  return this;\n};\n\n//\n// ### @private function _uncaughtException (err)\n// #### @err {Error} Error to handle\n// Logs all relevant information around the `err` and\n// exits the current process.\n//\nLogger.prototype._uncaughtException = function (err) {\n  var self = this,\n      responded = false,\n      info = exception.getAllInfo(err),\n      handlers = this._getExceptionHandlers(),\n      timeout,\n      doExit;\n\n  //\n  // Calculate if we should exit on this error\n  //\n  doExit = typeof this.exitOnError === 'function'\n    ? this.exitOnError(err)\n    : this.exitOnError;\n\n  function logAndWait(transport, next) {\n    transport.logException('uncaughtException: ' + (err.message || err), info, next, err);\n  }\n\n  function gracefulExit() {\n    if (doExit && !responded) {\n      //\n      // Remark: Currently ignoring any exceptions from transports\n      //         when catching uncaught exceptions.\n      //\n      clearTimeout(timeout);\n      responded = true;\n      process.exit(1);\n    }\n  }\n\n  if (!handlers || handlers.length === 0) {\n    return gracefulExit();\n  }\n\n  //\n  // Log to all transports and allow the operation to take\n  // only up to `3000ms`.\n  //\n  async.forEach(handlers, logAndWait, gracefulExit);\n  if (doExit) {\n    timeout = setTimeout(gracefulExit, 3000);\n  }\n};\n\n//\n// ### @private function _getExceptionHandlers ()\n// Returns the list of transports and exceptionHandlers\n// for this instance.\n//\nLogger.prototype._getExceptionHandlers = function () {\n  var self = this;\n\n  return this._hnames.map(function (name) {\n    return self.exceptionHandlers[name];\n  }).concat(this._names.map(function (name) {\n    return self.transports[name].handleExceptions && self.transports[name];\n  })).filter(Boolean);\n};\n\n//\n// ### @private function _onError (transport, err)\n// #### @transport {Object} Transport on which the error occured\n// #### @err {Error} Error that occurred on the transport\n// Bubbles the error, `err`, that occured on the specified `transport`\n// up from this instance if `emitErrs` has been set.\n//\nLogger.prototype._onError = function (transport, err) {\n  if (this.emitErrs) {\n    this.emit('error', err, transport);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}