{"ast":null,"code":"'use strict';\n\nvar request = require('request');\n\nvar through = require('through2');\n\nvar DEFAULTS = {\n  objectMode: false,\n  request: request,\n  retries: 2,\n  noResponseRetries: 2,\n  currentRetryAttempt: 0,\n  shouldRetryFn: function (response) {\n    var retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n    // 1xx - Retry (Informational, request still processing)\n    // 2xx - Do not retry (Success)\n    // 3xx - Do not retry (Redirect)\n    // 4xx - Do not retry (Client errors)\n    // 429 - Retry (\"Too Many Requests\")\n    // 5xx - Retry (Server errors)\n    [100, 199], [429, 429], [500, 599]];\n    var statusCode = response.statusCode;\n    var range;\n\n    while (range = retryRanges.shift()) {\n      if (statusCode >= range[0] && statusCode <= range[1]) {\n        // Not a successful status or redirect.\n        return true;\n      }\n    }\n  }\n};\n\nfunction retryRequest(requestOpts, opts, callback) {\n  var streamMode = typeof arguments[arguments.length - 1] !== 'function';\n\n  if (typeof opts === 'function') {\n    callback = opts;\n  }\n\n  opts = opts || DEFAULTS;\n\n  if (typeof opts.objectMode === 'undefined') {\n    opts.objectMode = DEFAULTS.objectMode;\n  }\n\n  if (typeof opts.request === 'undefined') {\n    opts.request = DEFAULTS.request;\n  }\n\n  if (typeof opts.retries !== 'number') {\n    opts.retries = DEFAULTS.retries;\n  }\n\n  if (typeof opts.currentRetryAttempt !== 'number') {\n    opts.currentRetryAttempt = DEFAULTS.currentRetryAttempt;\n  }\n\n  if (typeof opts.noResponseRetries !== 'number') {\n    opts.noResponseRetries = DEFAULTS.noResponseRetries;\n  }\n\n  if (typeof opts.shouldRetryFn !== 'function') {\n    opts.shouldRetryFn = DEFAULTS.shouldRetryFn;\n  }\n\n  var currentRetryAttempt = opts.currentRetryAttempt;\n  var numNoResponseAttempts = 0;\n  var streamResponseHandled = false;\n  var retryStream;\n  var requestStream;\n  var delayStream;\n  var activeRequest;\n  var retryRequest = {\n    abort: function () {\n      if (activeRequest && activeRequest.abort) {\n        activeRequest.abort();\n      }\n    }\n  };\n\n  if (streamMode) {\n    retryStream = through({\n      objectMode: opts.objectMode\n    });\n    retryStream.abort = resetStreams;\n  }\n\n  if (currentRetryAttempt > 0) {\n    retryAfterDelay(currentRetryAttempt);\n  } else {\n    makeRequest();\n  }\n\n  if (streamMode) {\n    return retryStream;\n  } else {\n    return retryRequest;\n  }\n\n  function resetStreams() {\n    delayStream = null;\n\n    if (requestStream) {\n      requestStream.abort && requestStream.abort();\n      requestStream.cancel && requestStream.cancel();\n\n      if (requestStream.destroy) {\n        requestStream.destroy();\n      } else if (requestStream.end) {\n        requestStream.end();\n      }\n    }\n  }\n\n  function makeRequest() {\n    currentRetryAttempt++;\n\n    if (streamMode) {\n      streamResponseHandled = false;\n      delayStream = through({\n        objectMode: opts.objectMode\n      });\n      requestStream = opts.request(requestOpts);\n      setImmediate(function () {\n        retryStream.emit('request');\n      });\n      requestStream // gRPC via google-cloud-node can emit an `error` as well as a `response`\n      // Whichever it emits, we run with-- we can't run with both. That's what\n      // is up with the `streamResponseHandled` tracking.\n      .on('error', function (err) {\n        if (streamResponseHandled) {\n          return;\n        }\n\n        streamResponseHandled = true;\n        onResponse(err);\n      }).on('response', function (resp, body) {\n        if (streamResponseHandled) {\n          return;\n        }\n\n        streamResponseHandled = true;\n        onResponse(null, resp, body);\n      }).on('complete', retryStream.emit.bind(retryStream, 'complete'));\n      requestStream.pipe(delayStream);\n    } else {\n      activeRequest = opts.request(requestOpts, onResponse);\n    }\n  }\n\n  function retryAfterDelay(currentRetryAttempt) {\n    if (streamMode) {\n      resetStreams();\n    }\n\n    setTimeout(makeRequest, getNextRetryDelay(currentRetryAttempt));\n  }\n\n  function onResponse(err, response, body) {\n    // An error such as DNS resolution.\n    if (err) {\n      numNoResponseAttempts++;\n\n      if (numNoResponseAttempts <= opts.noResponseRetries) {\n        retryAfterDelay(numNoResponseAttempts);\n      } else {\n        if (streamMode) {\n          retryStream.emit('error', err);\n          retryStream.end();\n        } else {\n          callback(err, response, body);\n        }\n      }\n\n      return;\n    } // Send the response to see if we should try again.\n\n\n    if (currentRetryAttempt <= opts.retries && opts.shouldRetryFn(response)) {\n      retryAfterDelay(currentRetryAttempt);\n      return;\n    } // No more attempts need to be made, just continue on.\n\n\n    if (streamMode) {\n      retryStream.emit('response', response);\n      delayStream.pipe(retryStream);\n      requestStream.on('error', function (err) {\n        retryStream.destroy(err);\n      });\n    } else {\n      callback(err, response, body);\n    }\n  }\n}\n\nmodule.exports = retryRequest;\n\nfunction getNextRetryDelay(retryNumber) {\n  return Math.pow(2, retryNumber) * 1000 + Math.floor(Math.random() * 1000);\n}\n\nmodule.exports.getNextRetryDelay = getNextRetryDelay;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/google-auto-auth/node_modules/retry-request/index.js"],"names":["request","require","through","DEFAULTS","objectMode","retries","noResponseRetries","currentRetryAttempt","shouldRetryFn","response","retryRanges","statusCode","range","shift","retryRequest","requestOpts","opts","callback","streamMode","arguments","length","numNoResponseAttempts","streamResponseHandled","retryStream","requestStream","delayStream","activeRequest","abort","resetStreams","retryAfterDelay","makeRequest","cancel","destroy","end","setImmediate","emit","on","err","onResponse","resp","body","bind","pipe","setTimeout","getNextRetryDelay","module","exports","retryNumber","Math","pow","floor","random"],"mappings":"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","sourcesContent":["'use strict';\n\nvar request = require('request');\nvar through = require('through2');\n\nvar DEFAULTS = {\n  objectMode: false,\n  request: request,\n  retries: 2,\n  noResponseRetries: 2,\n  currentRetryAttempt: 0,\n  shouldRetryFn: function (response) {\n    var retryRanges = [\n      // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n      // 1xx - Retry (Informational, request still processing)\n      // 2xx - Do not retry (Success)\n      // 3xx - Do not retry (Redirect)\n      // 4xx - Do not retry (Client errors)\n      // 429 - Retry (\"Too Many Requests\")\n      // 5xx - Retry (Server errors)\n      [100, 199],\n      [429, 429],\n      [500, 599]\n    ];\n\n    var statusCode = response.statusCode;\n\n    var range;\n    while ((range = retryRanges.shift())) {\n      if (statusCode >= range[0] && statusCode <= range[1]) {\n        // Not a successful status or redirect.\n        return true;\n      }\n    }\n  }\n};\n\nfunction retryRequest(requestOpts, opts, callback) {\n  var streamMode = typeof arguments[arguments.length - 1] !== 'function';\n\n  if (typeof opts === 'function') {\n    callback = opts;\n  }\n\n  opts = opts || DEFAULTS;\n\n  if (typeof opts.objectMode === 'undefined') {\n    opts.objectMode = DEFAULTS.objectMode;\n  }\n  if (typeof opts.request === 'undefined') {\n    opts.request = DEFAULTS.request;\n  }\n  if (typeof opts.retries !== 'number') {\n    opts.retries = DEFAULTS.retries;\n  }\n  if (typeof opts.currentRetryAttempt !== 'number') {\n    opts.currentRetryAttempt = DEFAULTS.currentRetryAttempt;\n  }\n  if (typeof opts.noResponseRetries !== 'number') {\n    opts.noResponseRetries = DEFAULTS.noResponseRetries;\n  }\n  if (typeof opts.shouldRetryFn !== 'function') {\n    opts.shouldRetryFn = DEFAULTS.shouldRetryFn;\n  }\n\n  var currentRetryAttempt = opts.currentRetryAttempt;\n\n  var numNoResponseAttempts = 0;\n  var streamResponseHandled = false;\n\n  var retryStream;\n  var requestStream;\n  var delayStream;\n\n  var activeRequest;\n  var retryRequest = {\n    abort: function () {\n      if (activeRequest && activeRequest.abort) {\n        activeRequest.abort();\n      }\n    }\n  };\n\n  if (streamMode) {\n    retryStream = through({ objectMode: opts.objectMode });\n    retryStream.abort = resetStreams;\n  }\n\n  if (currentRetryAttempt > 0) {\n    retryAfterDelay(currentRetryAttempt);\n  } else {\n    makeRequest();\n  }\n\n  if (streamMode) {\n    return retryStream;\n  } else {\n    return retryRequest;\n  }\n\n  function resetStreams() {\n    delayStream = null;\n\n    if (requestStream) {\n      requestStream.abort && requestStream.abort();\n      requestStream.cancel && requestStream.cancel();\n\n      if (requestStream.destroy) {\n        requestStream.destroy();\n      } else if (requestStream.end) {\n        requestStream.end();\n      }\n    }\n  }\n\n  function makeRequest() {\n    currentRetryAttempt++;\n\n    if (streamMode) {\n      streamResponseHandled = false;\n\n      delayStream = through({ objectMode: opts.objectMode });\n      requestStream = opts.request(requestOpts);\n\n      setImmediate(function () {\n        retryStream.emit('request');\n      });\n\n      requestStream\n        // gRPC via google-cloud-node can emit an `error` as well as a `response`\n        // Whichever it emits, we run with-- we can't run with both. That's what\n        // is up with the `streamResponseHandled` tracking.\n        .on('error', function (err) {\n          if (streamResponseHandled) {\n            return;\n          }\n\n          streamResponseHandled = true;\n          onResponse(err);\n        })\n        .on('response', function (resp, body) {\n          if (streamResponseHandled) {\n            return;\n          }\n\n          streamResponseHandled = true;\n          onResponse(null, resp, body);\n        })\n        .on('complete', retryStream.emit.bind(retryStream, 'complete'));\n\n      requestStream.pipe(delayStream);\n    } else {\n      activeRequest = opts.request(requestOpts, onResponse);\n    }\n  }\n\n  function retryAfterDelay(currentRetryAttempt) {\n    if (streamMode) {\n      resetStreams();\n    }\n\n    setTimeout(makeRequest, getNextRetryDelay(currentRetryAttempt));\n  }\n\n  function onResponse(err, response, body) {\n    // An error such as DNS resolution.\n    if (err) {\n      numNoResponseAttempts++;\n\n      if (numNoResponseAttempts <= opts.noResponseRetries) {\n        retryAfterDelay(numNoResponseAttempts);\n      } else {\n        if (streamMode) {\n          retryStream.emit('error', err);\n          retryStream.end();\n        } else {\n          callback(err, response, body);\n        }\n      }\n\n      return;\n    }\n\n    // Send the response to see if we should try again.\n    if (currentRetryAttempt <= opts.retries && opts.shouldRetryFn(response)) {\n      retryAfterDelay(currentRetryAttempt);\n      return;\n    }\n\n    // No more attempts need to be made, just continue on.\n    if (streamMode) {\n      retryStream.emit('response', response);\n      delayStream.pipe(retryStream);\n      requestStream.on('error', function (err) {\n        retryStream.destroy(err);\n      });\n    } else {\n      callback(err, response, body);\n    }\n  }\n}\n\nmodule.exports = retryRequest;\n\nfunction getNextRetryDelay(retryNumber) {\n  return (Math.pow(2, retryNumber) * 1000) + Math.floor(Math.random() * 1000);\n}\n\nmodule.exports.getNextRetryDelay = getNextRetryDelay;\n"]},"metadata":{},"sourceType":"script"}