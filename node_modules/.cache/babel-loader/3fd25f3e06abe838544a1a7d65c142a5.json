{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst gcp = require(\"../../../gcp\");\n\nconst fsutils = require(\"../../../fsutils\");\n\nconst prompt_1 = require(\"../../../prompt\");\n\nconst logger = require(\"../../../logger\");\n\nconst utils = require(\"../../../utils\");\n\nconst DEFAULT_RULES_FILE = \"firestore.rules\";\nconst RULES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/firestore/firestore.rules\", \"utf8\");\n\nfunction initRules(setup, config) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.info();\n    logger.info(\"Firestore Security Rules allow you to define how and when to allow\");\n    logger.info(\"requests. You can keep these rules in your project directory\");\n    logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n    logger.info();\n    return prompt_1.prompt(setup.config.firestore, [{\n      type: \"input\",\n      name: \"rules\",\n      message: \"What file should be used for Firestore Rules?\",\n      default: DEFAULT_RULES_FILE\n    }]).then(() => {\n      const filename = setup.config.firestore.rules;\n\n      if (fsutils.fileExistsSync(filename)) {\n        const msg = \"File \" + clc.bold(filename) + \" already exists.\" + \" Do you want to overwrite it with the Firestore Rules from the Firebase Console?\";\n        return prompt_1.promptOnce({\n          type: \"confirm\",\n          message: msg,\n          default: false\n        });\n      }\n\n      return Promise.resolve(true);\n    }).then(overwrite => {\n      if (!overwrite) {\n        return Promise.resolve();\n      }\n\n      return getRulesFromConsole(setup.projectId).then(contents => {\n        return config.writeProjectFile(setup.config.firestore.rules, contents);\n      });\n    });\n  });\n}\n\nexports.initRules = initRules;\n\nfunction getRulesFromConsole(projectId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return gcp.rules.getLatestRulesetName(projectId, \"cloud.firestore\").then(name => {\n      if (!name) {\n        logger.debug(\"No rulesets found, using default.\");\n        return [{\n          name: DEFAULT_RULES_FILE,\n          content: RULES_TEMPLATE\n        }];\n      }\n\n      logger.debug(\"Found ruleset: \" + name);\n      return gcp.rules.getRulesetContent(name);\n    }).then(rules => {\n      if (rules.length <= 0) {\n        return utils.reject(\"Ruleset has no files\", {\n          exit: 1\n        });\n      }\n\n      if (rules.length > 1) {\n        return utils.reject(\"Ruleset has too many files: \" + rules.length, {\n          exit: 1\n        });\n      }\n\n      return rules[0].content;\n    });\n  });\n}","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/init/features/firestore/rules.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","clc","require","fs","gcp","fsutils","prompt_1","logger","utils","DEFAULT_RULES_FILE","RULES_TEMPLATE","readFileSync","__dirname","initRules","setup","config","info","bold","prompt","firestore","type","name","message","default","filename","rules","fileExistsSync","msg","promptOnce","overwrite","getRulesFromConsole","projectId","contents","writeProjectFile","getLatestRulesetName","debug","content","getRulesetContent","length","exit"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst gcp = require(\"../../../gcp\");\nconst fsutils = require(\"../../../fsutils\");\nconst prompt_1 = require(\"../../../prompt\");\nconst logger = require(\"../../../logger\");\nconst utils = require(\"../../../utils\");\nconst DEFAULT_RULES_FILE = \"firestore.rules\";\nconst RULES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/firestore/firestore.rules\", \"utf8\");\nfunction initRules(setup, config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.info();\n        logger.info(\"Firestore Security Rules allow you to define how and when to allow\");\n        logger.info(\"requests. You can keep these rules in your project directory\");\n        logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n        logger.info();\n        return prompt_1.prompt(setup.config.firestore, [\n            {\n                type: \"input\",\n                name: \"rules\",\n                message: \"What file should be used for Firestore Rules?\",\n                default: DEFAULT_RULES_FILE,\n            },\n        ])\n            .then(() => {\n            const filename = setup.config.firestore.rules;\n            if (fsutils.fileExistsSync(filename)) {\n                const msg = \"File \" +\n                    clc.bold(filename) +\n                    \" already exists.\" +\n                    \" Do you want to overwrite it with the Firestore Rules from the Firebase Console?\";\n                return prompt_1.promptOnce({\n                    type: \"confirm\",\n                    message: msg,\n                    default: false,\n                });\n            }\n            return Promise.resolve(true);\n        })\n            .then((overwrite) => {\n            if (!overwrite) {\n                return Promise.resolve();\n            }\n            return getRulesFromConsole(setup.projectId).then((contents) => {\n                return config.writeProjectFile(setup.config.firestore.rules, contents);\n            });\n        });\n    });\n}\nexports.initRules = initRules;\nfunction getRulesFromConsole(projectId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return gcp.rules\n            .getLatestRulesetName(projectId, \"cloud.firestore\")\n            .then((name) => {\n            if (!name) {\n                logger.debug(\"No rulesets found, using default.\");\n                return [{ name: DEFAULT_RULES_FILE, content: RULES_TEMPLATE }];\n            }\n            logger.debug(\"Found ruleset: \" + name);\n            return gcp.rules.getRulesetContent(name);\n        })\n            .then((rules) => {\n            if (rules.length <= 0) {\n                return utils.reject(\"Ruleset has no files\", { exit: 1 });\n            }\n            if (rules.length > 1) {\n                return utils.reject(\"Ruleset has too many files: \" + rules.length, { exit: 1 });\n            }\n            return rules[0].content;\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}