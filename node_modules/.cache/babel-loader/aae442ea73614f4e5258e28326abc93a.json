{"ast":null,"code":"\"use strict\";\n\nconst Uploader = require(\"./uploader\");\n\nvar _require = require(\"../../listFiles\"),\n    listFiles = _require.listFiles;\n\nvar logger = require(\"../../logger\");\n\nvar track = require(\"../../track\");\n\nvar utils = require(\"../../utils\");\n\nvar clc = require(\"cli-color\");\n\nvar SPINNER = [\"⠋\", \"⠙\", \"⠹\", \"⠸\", \"⠼\", \"⠴\", \"⠦\", \"⠧\", \"⠇\", \"⠏\"];\n\nmodule.exports = function (context, options) {\n  if (!context.hosting || !context.hosting.deploys) {\n    return Promise.resolve();\n  }\n\n  var spins = 0;\n\n  function _updateSpinner(newMessage) {\n    if (debugging) {\n      utils.logLabeledBullet(\"hosting\", newMessage);\n    } else {\n      process.stdout.write(clc.erase.line + clc.move.left(9999));\n      process.stdout.write(clc.bold.cyan(SPINNER[spins % SPINNER.length] + \"  hosting: \") + newMessage);\n    }\n\n    spins++;\n  }\n\n  function _runDeploys(deploys, debugging) {\n    const deploy = deploys.shift();\n    utils.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"beginning deploy...\");\n    var t0 = Date.now();\n    const publicDir = options.config.path(deploy.config.public);\n    const files = listFiles(publicDir, deploy.config.ignore);\n    utils.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"found \" + files.length + \" files in \" + clc.bold(deploy.config.public));\n    const uploader = new Uploader({\n      version: deploy.version,\n      files: files,\n      public: options.config.path(deploy.config.public),\n      cwd: options.cwd\n    });\n    var progressInterval = setInterval(function () {\n      _updateSpinner(uploader.statusMessage());\n    }, debugging ? 2000 : 200);\n    return uploader.start().then(function () {\n      clearInterval(progressInterval);\n\n      if (!debugging) {\n        process.stdout.write(clc.erase.line + clc.move.left(9999));\n      }\n\n      utils.logLabeledSuccess(\"hosting[\" + deploy.site + \"]\", \"file upload complete\");\n      var dt = Date.now() - t0;\n      logger.debug(\"[hosting] deploy completed after \" + dt + \"ms\");\n      return track(\"Hosting Deploy\", \"success\", dt);\n    }).catch(function (err) {\n      clearInterval(progressInterval);\n      return Promise.reject(err);\n    }).then(function () {\n      if (deploys.length) {\n        return _runDeploys(deploys);\n      }\n    });\n  }\n\n  var debugging = options.debug || options.nonInteractive;\n  const deploys = [].concat(context.hosting.deploys);\n  return _runDeploys(deploys, debugging);\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/deploy/hosting/deploy.js"],"names":["Uploader","require","listFiles","logger","track","utils","clc","SPINNER","module","exports","context","options","hosting","deploys","Promise","resolve","spins","_updateSpinner","newMessage","debugging","logLabeledBullet","process","stdout","write","erase","line","move","left","bold","cyan","length","_runDeploys","deploy","shift","site","t0","Date","now","publicDir","config","path","public","files","ignore","uploader","version","cwd","progressInterval","setInterval","statusMessage","start","then","clearInterval","logLabeledSuccess","dt","debug","catch","err","reject","nonInteractive","concat"],"mappings":"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","sourcesContent":["\"use strict\";\nconst Uploader = require(\"./uploader\");\nvar { listFiles } = require(\"../../listFiles\");\nvar logger = require(\"../../logger\");\nvar track = require(\"../../track\");\nvar utils = require(\"../../utils\");\nvar clc = require(\"cli-color\");\nvar SPINNER = [\"⠋\", \"⠙\", \"⠹\", \"⠸\", \"⠼\", \"⠴\", \"⠦\", \"⠧\", \"⠇\", \"⠏\"];\nmodule.exports = function (context, options) {\n    if (!context.hosting || !context.hosting.deploys) {\n        return Promise.resolve();\n    }\n    var spins = 0;\n    function _updateSpinner(newMessage) {\n        if (debugging) {\n            utils.logLabeledBullet(\"hosting\", newMessage);\n        }\n        else {\n            process.stdout.write(clc.erase.line + clc.move.left(9999));\n            process.stdout.write(clc.bold.cyan(SPINNER[spins % SPINNER.length] + \"  hosting: \") + newMessage);\n        }\n        spins++;\n    }\n    function _runDeploys(deploys, debugging) {\n        const deploy = deploys.shift();\n        utils.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"beginning deploy...\");\n        var t0 = Date.now();\n        const publicDir = options.config.path(deploy.config.public);\n        const files = listFiles(publicDir, deploy.config.ignore);\n        utils.logLabeledBullet(\"hosting[\" + deploy.site + \"]\", \"found \" + files.length + \" files in \" + clc.bold(deploy.config.public));\n        const uploader = new Uploader({\n            version: deploy.version,\n            files: files,\n            public: options.config.path(deploy.config.public),\n            cwd: options.cwd,\n        });\n        var progressInterval = setInterval(function () {\n            _updateSpinner(uploader.statusMessage());\n        }, debugging ? 2000 : 200);\n        return uploader\n            .start()\n            .then(function () {\n            clearInterval(progressInterval);\n            if (!debugging) {\n                process.stdout.write(clc.erase.line + clc.move.left(9999));\n            }\n            utils.logLabeledSuccess(\"hosting[\" + deploy.site + \"]\", \"file upload complete\");\n            var dt = Date.now() - t0;\n            logger.debug(\"[hosting] deploy completed after \" + dt + \"ms\");\n            return track(\"Hosting Deploy\", \"success\", dt);\n        })\n            .catch(function (err) {\n            clearInterval(progressInterval);\n            return Promise.reject(err);\n        })\n            .then(function () {\n            if (deploys.length) {\n                return _runDeploys(deploys);\n            }\n        });\n    }\n    var debugging = options.debug || options.nonInteractive;\n    const deploys = [].concat(context.hosting.deploys);\n    return _runDeploys(deploys, debugging);\n};\n"]},"metadata":{},"sourceType":"script"}