{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst utils_1 = require(\"./utils\");\n\nconst logger = require(\"../logger\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst utils = require(\"../utils\");\n\nfunction checkResponse(response, spec) {\n  let valid = true;\n  let responses;\n\n  if (spec.required && !response) {\n    utils.logWarning(\"You are required to enter a value for this question\");\n    return false;\n  }\n\n  if (spec.type === \"MULTISELECT\") {\n    responses = response.split(\",\");\n  } else {\n    responses = [response];\n  }\n\n  if (spec.validationRegex) {\n    const re = new RegExp(spec.validationRegex);\n\n    _.forEach(responses, resp => {\n      if ((spec.required || resp !== \"\") && !re.test(resp)) {\n        const genericWarn = `${resp} is not a valid answer since it` + ` does not fit the regular expression \"${spec.validationRegex}\"`;\n        utils.logWarning(spec.validationErrorMessage || genericWarn);\n        valid = false;\n      }\n    });\n  }\n\n  if (spec.type === \"MULTISELECT\" || spec.type === \"SELECT\") {\n    _.forEach(responses, r => {\n      let validChoice = _.some(spec.options, option => {\n        return r === option.value;\n      });\n\n      if (!validChoice) {\n        utils.logWarning(`${r} is not a valid option for ${spec.param}.`);\n        valid = false;\n      }\n    });\n  }\n\n  return valid;\n}\n\nexports.checkResponse = checkResponse;\n\nfunction askForParam(paramSpec) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let valid = false;\n    let response = \"\";\n    const description = paramSpec.description || \"\";\n    const label = paramSpec.label.trim();\n    logger.info(`\\n${clc.bold(label)}${clc.bold(paramSpec.required ? \"\" : \" (Optional)\")}: ${marked(description).trim()}`);\n\n    while (!valid) {\n      switch (paramSpec.type) {\n        case \"SELECT\":\n          response = yield prompt_1.promptOnce({\n            name: \"input\",\n            type: \"list\",\n            default: () => {\n              if (paramSpec.default) {\n                return getInquirerDefault(_.get(paramSpec, \"options\", []), paramSpec.default);\n              }\n            },\n            message: \"Which option do you want enabled for this parameter? \" + \"Select an option with the arrow keys, and use Enter to confirm your choice. \" + \"You may only select one option.\",\n            choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options)\n          });\n          break;\n\n        case \"MULTISELECT\":\n          response = yield utils_1.onceWithJoin({\n            name: \"input\",\n            type: \"checkbox\",\n            default: () => {\n              if (paramSpec.default) {\n                const defaults = paramSpec.default.split(\",\");\n                return defaults.map(def => {\n                  return getInquirerDefault(_.get(paramSpec, \"options\", []), def);\n                });\n              }\n            },\n            message: \"Which options do you want enabled for this parameter? \" + \"Press Space to select, then Enter to confirm your choices. \" + \"You may select multiple options.\",\n            choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options)\n          });\n          break;\n\n        default:\n          response = yield prompt_1.promptOnce({\n            name: paramSpec.param,\n            type: \"input\",\n            default: paramSpec.default,\n            message: `Enter a value for ${label}:`\n          });\n      }\n\n      valid = checkResponse(response, paramSpec);\n    }\n\n    return response;\n  });\n}\n\nexports.askForParam = askForParam;\n\nfunction getInquirerDefault(options, def) {\n  const defaultOption = _.find(options, option => {\n    return option.value === def;\n  });\n\n  return defaultOption ? defaultOption.label || defaultOption.value : \"\";\n}\n\nexports.getInquirerDefault = getInquirerDefault;\n\nfunction ask(paramSpecs, firebaseProjectParams) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (_.isEmpty(paramSpecs)) {\n      logger.debug(\"No params were specified for this extension.\");\n      return {};\n    }\n\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"answer the questions below to configure your extension:\");\n    const substituted = extensionsHelper_1.substituteParams(paramSpecs, firebaseProjectParams);\n    const result = {};\n\n    const promises = _.map(substituted, paramSpec => {\n      return () => __awaiter(this, void 0, void 0, function* () {\n        result[paramSpec.param] = yield askForParam(paramSpec);\n      });\n    });\n\n    yield promises.reduce((prev, cur) => prev.then(cur), Promise.resolve());\n    logger.info();\n    return result;\n  });\n}\n\nexports.ask = ask;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/extensions/askUserForParam.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","clc","marked","extensionsHelper_1","utils_1","logger","prompt_1","utils","checkResponse","response","spec","valid","responses","required","logWarning","type","split","validationRegex","re","RegExp","forEach","resp","test","genericWarn","validationErrorMessage","r","validChoice","some","options","option","param","askForParam","paramSpec","description","label","trim","info","bold","promptOnce","name","default","getInquirerDefault","get","message","choices","convertExtensionOptionToLabeledList","onceWithJoin","defaults","map","def","defaultOption","find","ask","paramSpecs","firebaseProjectParams","isEmpty","debug","logLabeledBullet","logPrefix","substituted","substituteParams","promises","reduce","prev","cur"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst utils_1 = require(\"./utils\");\nconst logger = require(\"../logger\");\nconst prompt_1 = require(\"../prompt\");\nconst utils = require(\"../utils\");\nfunction checkResponse(response, spec) {\n    let valid = true;\n    let responses;\n    if (spec.required && !response) {\n        utils.logWarning(\"You are required to enter a value for this question\");\n        return false;\n    }\n    if (spec.type === \"MULTISELECT\") {\n        responses = response.split(\",\");\n    }\n    else {\n        responses = [response];\n    }\n    if (spec.validationRegex) {\n        const re = new RegExp(spec.validationRegex);\n        _.forEach(responses, (resp) => {\n            if ((spec.required || resp !== \"\") && !re.test(resp)) {\n                const genericWarn = `${resp} is not a valid answer since it` +\n                    ` does not fit the regular expression \"${spec.validationRegex}\"`;\n                utils.logWarning(spec.validationErrorMessage || genericWarn);\n                valid = false;\n            }\n        });\n    }\n    if (spec.type === \"MULTISELECT\" || spec.type === \"SELECT\") {\n        _.forEach(responses, (r) => {\n            let validChoice = _.some(spec.options, (option) => {\n                return r === option.value;\n            });\n            if (!validChoice) {\n                utils.logWarning(`${r} is not a valid option for ${spec.param}.`);\n                valid = false;\n            }\n        });\n    }\n    return valid;\n}\nexports.checkResponse = checkResponse;\nfunction askForParam(paramSpec) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let valid = false;\n        let response = \"\";\n        const description = paramSpec.description || \"\";\n        const label = paramSpec.label.trim();\n        logger.info(`\\n${clc.bold(label)}${clc.bold(paramSpec.required ? \"\" : \" (Optional)\")}: ${marked(description).trim()}`);\n        while (!valid) {\n            switch (paramSpec.type) {\n                case \"SELECT\":\n                    response = yield prompt_1.promptOnce({\n                        name: \"input\",\n                        type: \"list\",\n                        default: () => {\n                            if (paramSpec.default) {\n                                return getInquirerDefault(_.get(paramSpec, \"options\", []), paramSpec.default);\n                            }\n                        },\n                        message: \"Which option do you want enabled for this parameter? \" +\n                            \"Select an option with the arrow keys, and use Enter to confirm your choice. \" +\n                            \"You may only select one option.\",\n                        choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options),\n                    });\n                    break;\n                case \"MULTISELECT\":\n                    response = yield utils_1.onceWithJoin({\n                        name: \"input\",\n                        type: \"checkbox\",\n                        default: () => {\n                            if (paramSpec.default) {\n                                const defaults = paramSpec.default.split(\",\");\n                                return defaults.map((def) => {\n                                    return getInquirerDefault(_.get(paramSpec, \"options\", []), def);\n                                });\n                            }\n                        },\n                        message: \"Which options do you want enabled for this parameter? \" +\n                            \"Press Space to select, then Enter to confirm your choices. \" +\n                            \"You may select multiple options.\",\n                        choices: utils_1.convertExtensionOptionToLabeledList(paramSpec.options),\n                    });\n                    break;\n                default:\n                    response = yield prompt_1.promptOnce({\n                        name: paramSpec.param,\n                        type: \"input\",\n                        default: paramSpec.default,\n                        message: `Enter a value for ${label}:`,\n                    });\n            }\n            valid = checkResponse(response, paramSpec);\n        }\n        return response;\n    });\n}\nexports.askForParam = askForParam;\nfunction getInquirerDefault(options, def) {\n    const defaultOption = _.find(options, (option) => {\n        return option.value === def;\n    });\n    return defaultOption ? defaultOption.label || defaultOption.value : \"\";\n}\nexports.getInquirerDefault = getInquirerDefault;\nfunction ask(paramSpecs, firebaseProjectParams) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (_.isEmpty(paramSpecs)) {\n            logger.debug(\"No params were specified for this extension.\");\n            return {};\n        }\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, \"answer the questions below to configure your extension:\");\n        const substituted = extensionsHelper_1.substituteParams(paramSpecs, firebaseProjectParams);\n        const result = {};\n        const promises = _.map(substituted, (paramSpec) => {\n            return () => __awaiter(this, void 0, void 0, function* () {\n                result[paramSpec.param] = yield askForParam(paramSpec);\n            });\n        });\n        yield promises.reduce((prev, cur) => prev.then(cur), Promise.resolve());\n        logger.info();\n        return result;\n    });\n}\nexports.ask = ask;\n"]},"metadata":{},"sourceType":"script"}