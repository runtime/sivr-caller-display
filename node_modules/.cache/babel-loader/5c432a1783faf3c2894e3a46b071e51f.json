{"ast":null,"code":"/*\n * console.js: Transport for outputting to the console\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\nvar events = require('events'),\n    util = require('util'),\n    common = require('../common'),\n    Transport = require('./transport').Transport; //\n// ### function Console (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Console transport object responsible\n// for persisting log messages and metadata to a terminal or TTY.\n//\n\n\nvar Console = exports.Console = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n  this.json = options.json || false;\n  this.colorize = options.colorize || false;\n  this.prettyPrint = options.prettyPrint || false;\n  this.timestamp = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\n  this.showLevel = options.showLevel === undefined ? true : options.showLevel;\n  this.label = options.label || null;\n  this.logstash = options.logstash || false;\n  this.depth = options.depth || null;\n  this.align = options.align || false;\n  this.stderrLevels = setStderrLevels(options.stderrLevels, options.debugStdout);\n\n  if (this.json) {\n    this.stringify = options.stringify || function (obj) {\n      return JSON.stringify(obj, null, 2);\n    };\n  } //\n  // Convert stderrLevels into an Object for faster key-lookup times than an Array.\n  //\n  // For backwards compatibility, stderrLevels defaults to ['error', 'debug']\n  // or ['error'] depending on whether options.debugStdout is true.\n  //\n\n\n  function setStderrLevels(levels, debugStdout) {\n    var defaultMsg = 'Cannot have non-string elements in stderrLevels Array';\n\n    if (debugStdout) {\n      if (levels) {\n        //\n        // Don't allow setting both debugStdout and stderrLevels together,\n        // since this could cause behaviour a programmer might not expect.\n        //\n        throw new Error('Cannot set debugStdout and stderrLevels together');\n      }\n\n      return common.stringArrayToSet(['error'], defaultMsg);\n    }\n\n    if (!levels) {\n      return common.stringArrayToSet(['error', 'debug'], defaultMsg);\n    } else if (!Array.isArray(levels)) {\n      throw new Error('Cannot set stderrLevels to type other than Array');\n    }\n\n    return common.stringArrayToSet(levels, defaultMsg);\n  }\n\n  ;\n}; //\n// Inherit from `winston.Transport`.\n//\n\n\nutil.inherits(Console, Transport); //\n// Expose the name of this Transport on the prototype\n//\n\nConsole.prototype.name = 'console'; //\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\n\nConsole.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n\n  var self = this,\n      output;\n  output = common.log({\n    colorize: this.colorize,\n    json: this.json,\n    level: level,\n    message: msg,\n    meta: meta,\n    stringify: this.stringify,\n    timestamp: this.timestamp,\n    showLevel: this.showLevel,\n    prettyPrint: this.prettyPrint,\n    raw: this.raw,\n    label: this.label,\n    logstash: this.logstash,\n    depth: this.depth,\n    formatter: this.formatter,\n    align: this.align,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  });\n\n  if (this.stderrLevels[level]) {\n    process.stderr.write(output + '\\n');\n  } else {\n    process.stdout.write(output + '\\n');\n  } //\n  // Emit the `logged` event immediately because the event loop\n  // will not exit until `process.stdout` has drained anyway.\n  //\n\n\n  self.emit('logged');\n  callback(null, true);\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/winston/lib/winston/transports/console.js"],"names":["events","require","util","common","Transport","Console","exports","options","call","json","colorize","prettyPrint","timestamp","showLevel","undefined","label","logstash","depth","align","stderrLevels","setStderrLevels","debugStdout","stringify","obj","JSON","levels","defaultMsg","Error","stringArrayToSet","Array","isArray","inherits","prototype","name","log","level","msg","meta","callback","silent","self","output","message","raw","formatter","humanReadableUnhandledException","process","stderr","write","stdout","emit"],"mappings":"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","sourcesContent":["/*\n * console.js: Transport for outputting to the console\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\n\nvar events = require('events'),\n    util = require('util'),\n    common = require('../common'),\n    Transport = require('./transport').Transport;\n\n//\n// ### function Console (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Console transport object responsible\n// for persisting log messages and metadata to a terminal or TTY.\n//\nvar Console = exports.Console = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n\n  this.json         = options.json        || false;\n  this.colorize     = options.colorize    || false;\n  this.prettyPrint  = options.prettyPrint || false;\n  this.timestamp    = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\n  this.showLevel    = options.showLevel === undefined ? true : options.showLevel;\n  this.label        = options.label       || null;\n  this.logstash     = options.logstash    || false;\n  this.depth        = options.depth       || null;\n  this.align        = options.align       || false;\n  this.stderrLevels = setStderrLevels(options.stderrLevels, options.debugStdout);\n\n  if (this.json) {\n    this.stringify = options.stringify || function (obj) {\n      return JSON.stringify(obj, null, 2);\n    };\n  }\n\n  //\n  // Convert stderrLevels into an Object for faster key-lookup times than an Array.\n  //\n  // For backwards compatibility, stderrLevels defaults to ['error', 'debug']\n  // or ['error'] depending on whether options.debugStdout is true.\n  //\n  function setStderrLevels (levels, debugStdout) {\n    var defaultMsg = 'Cannot have non-string elements in stderrLevels Array';\n    if (debugStdout) {\n      if (levels) {\n        //\n        // Don't allow setting both debugStdout and stderrLevels together,\n        // since this could cause behaviour a programmer might not expect.\n        //\n        throw new Error('Cannot set debugStdout and stderrLevels together');\n      }\n\n      return common.stringArrayToSet(['error'], defaultMsg);\n    }\n\n    if (!levels) {\n      return common.stringArrayToSet(['error', 'debug'], defaultMsg);\n    } else if (!(Array.isArray(levels))) {\n      throw new Error('Cannot set stderrLevels to type other than Array');\n    }\n\n    return common.stringArrayToSet(levels, defaultMsg);\n  };\n};\n\n//\n// Inherit from `winston.Transport`.\n//\nutil.inherits(Console, Transport);\n\n//\n// Expose the name of this Transport on the prototype\n//\nConsole.prototype.name = 'console';\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nConsole.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n\n  var self = this,\n      output;\n\n  output = common.log({\n    colorize:    this.colorize,\n    json:        this.json,\n    level:       level,\n    message:     msg,\n    meta:        meta,\n    stringify:   this.stringify,\n    timestamp:   this.timestamp,\n    showLevel:   this.showLevel,\n    prettyPrint: this.prettyPrint,\n    raw:         this.raw,\n    label:       this.label,\n    logstash:    this.logstash,\n    depth:       this.depth,\n    formatter:   this.formatter,\n    align:       this.align,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  });\n\n  if (this.stderrLevels[level]) {\n    process.stderr.write(output + '\\n');\n  } else {\n    process.stdout.write(output + '\\n');\n  }\n\n  //\n  // Emit the `logged` event immediately because the event loop\n  // will not exit until `process.stdout` has drained anyway.\n  //\n  self.emit('logged');\n  callback(null, true);\n};\n"]},"metadata":{},"sourceType":"script"}