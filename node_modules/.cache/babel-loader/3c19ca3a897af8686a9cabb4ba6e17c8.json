{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst error_1 = require(\"../../error\");\n\nconst indexes_1 = require(\"../../firestore/indexes\");\n\nconst logger = require(\"../../logger\");\n\nconst utils = require(\"../../utils\");\n\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\n\nfunction deployRules(context) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const rulesDeploy = _.get(context, \"firestore.rulesDeploy\");\n\n    if (!context.firestoreRules || !rulesDeploy) {\n      return;\n    }\n\n    yield rulesDeploy.createRulesets(rulesDeploy_1.RulesetServiceType.CLOUD_FIRESTORE);\n  });\n}\n\nfunction deployIndexes(context, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!context.firestoreIndexes) {\n      return;\n    }\n\n    const indexesFileName = _.get(context, \"firestore.indexes.name\");\n\n    const indexesSrc = _.get(context, \"firestore.indexes.content\");\n\n    if (!indexesSrc) {\n      logger.debug(\"No Firestore indexes present.\");\n      return;\n    }\n\n    const indexes = indexesSrc.indexes;\n\n    if (!indexes) {\n      throw new error_1.FirebaseError(`Index file must contain an \"indexes\" property.`);\n    }\n\n    const fieldOverrides = indexesSrc.fieldOverrides || [];\n    yield new indexes_1.FirestoreIndexes().deploy(options.project, indexes, fieldOverrides);\n    utils.logSuccess(`${clc.bold.green(\"firestore:\")} deployed indexes in ${clc.bold(indexesFileName)} successfully`);\n  });\n}\n\nfunction default_1(context, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    yield Promise.all([deployRules(context), deployIndexes(context, options)]);\n  });\n}\n\nexports.default = default_1;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/deploy/firestore/deploy.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","clc","error_1","indexes_1","logger","utils","rulesDeploy_1","deployRules","context","rulesDeploy","get","firestoreRules","createRulesets","RulesetServiceType","CLOUD_FIRESTORE","deployIndexes","options","firestoreIndexes","indexesFileName","indexesSrc","debug","indexes","FirebaseError","fieldOverrides","FirestoreIndexes","deploy","project","logSuccess","bold","green","default_1","all","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst error_1 = require(\"../../error\");\nconst indexes_1 = require(\"../../firestore/indexes\");\nconst logger = require(\"../../logger\");\nconst utils = require(\"../../utils\");\nconst rulesDeploy_1 = require(\"../../rulesDeploy\");\nfunction deployRules(context) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const rulesDeploy = _.get(context, \"firestore.rulesDeploy\");\n        if (!context.firestoreRules || !rulesDeploy) {\n            return;\n        }\n        yield rulesDeploy.createRulesets(rulesDeploy_1.RulesetServiceType.CLOUD_FIRESTORE);\n    });\n}\nfunction deployIndexes(context, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!context.firestoreIndexes) {\n            return;\n        }\n        const indexesFileName = _.get(context, \"firestore.indexes.name\");\n        const indexesSrc = _.get(context, \"firestore.indexes.content\");\n        if (!indexesSrc) {\n            logger.debug(\"No Firestore indexes present.\");\n            return;\n        }\n        const indexes = indexesSrc.indexes;\n        if (!indexes) {\n            throw new error_1.FirebaseError(`Index file must contain an \"indexes\" property.`);\n        }\n        const fieldOverrides = indexesSrc.fieldOverrides || [];\n        yield new indexes_1.FirestoreIndexes().deploy(options.project, indexes, fieldOverrides);\n        utils.logSuccess(`${clc.bold.green(\"firestore:\")} deployed indexes in ${clc.bold(indexesFileName)} successfully`);\n    });\n}\nfunction default_1(context, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield Promise.all([deployRules(context), deployIndexes(context, options)]);\n    });\n}\nexports.default = default_1;\n"]},"metadata":{},"sourceType":"script"}