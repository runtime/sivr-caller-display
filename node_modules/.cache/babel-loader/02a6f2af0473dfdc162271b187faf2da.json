{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst pathLib = require(\"path\");\n\nconst removeRemote_1 = require(\"./removeRemote\");\n\nconst listRemote_1 = require(\"./listRemote\");\n\nconst stack_1 = require(\"../throttler/stack\");\n\nfunction chunkList(ls, chunkSize) {\n  const chunks = [];\n\n  for (let i = 0; i < ls.length; i += chunkSize) {\n    chunks.push(ls.slice(i, i + chunkSize));\n  }\n\n  return chunks;\n}\n\nconst INITIAL_DELETE_BATCH_SIZE = 25;\nconst INITIAL_LIST_NUM_SUB_PATH = 100;\nconst MAX_LIST_NUM_SUB_PATH = 204800;\n\nclass DatabaseRemove {\n  constructor(instance, path) {\n    this.path = path;\n    this.remote = new removeRemote_1.RTDBRemoveRemote(instance);\n    this.deleteJobStack = new stack_1.Stack({\n      name: \"delete stack\",\n      concurrency: 1,\n      retries: 3\n    });\n    this.listRemote = new listRemote_1.RTDBListRemote(instance);\n    this.listStack = new stack_1.Stack({\n      name: \"list stack\",\n      concurrency: 1,\n      retries: 3\n    });\n  }\n\n  execute() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.deletePath(this.path);\n    });\n  }\n\n  deletePath(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (yield this.deleteJobStack.run(() => this.remote.deletePath(path))) {\n        return Promise.resolve(true);\n      }\n\n      let listNumSubPath = INITIAL_LIST_NUM_SUB_PATH;\n      let batchSizeLow = 1;\n      let batchSizeHigh = MAX_LIST_NUM_SUB_PATH + 1;\n      let batchSize = INITIAL_DELETE_BATCH_SIZE;\n\n      while (true) {\n        const subPathList = yield this.listStack.run(() => this.listRemote.listPath(path, listNumSubPath));\n\n        if (subPathList.length === 0) {\n          return Promise.resolve(false);\n        }\n\n        const chunks = chunkList(subPathList, batchSize);\n        let nSmallChunks = 0;\n\n        for (const chunk of chunks) {\n          if (yield this.deleteSubPath(path, chunk)) {\n            nSmallChunks += 1;\n          }\n        }\n\n        if (nSmallChunks > chunks.length / 2) {\n          batchSizeLow = batchSize;\n          batchSize = Math.floor(Math.min(batchSize * 2, (batchSizeHigh + batchSize) / 2));\n        } else {\n          batchSizeHigh = batchSize;\n          batchSize = Math.floor((batchSizeLow + batchSize) / 2);\n        }\n\n        if (listNumSubPath * 2 <= MAX_LIST_NUM_SUB_PATH) {\n          listNumSubPath = listNumSubPath * 2;\n        } else {\n          listNumSubPath = Math.floor(MAX_LIST_NUM_SUB_PATH / batchSize) * batchSize;\n        }\n      }\n    });\n  }\n\n  deleteSubPath(path, subPaths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (subPaths.length === 0) {\n        throw new Error(\"deleteSubPath is called with empty subPaths list\");\n      }\n\n      if (subPaths.length === 1) {\n        return this.deletePath(pathLib.join(path, subPaths[0]));\n      }\n\n      if (yield this.deleteJobStack.run(() => this.remote.deleteSubPath(path, subPaths))) {\n        return Promise.resolve(true);\n      }\n\n      const mid = Math.floor(subPaths.length / 2);\n      yield this.deleteSubPath(path, subPaths.slice(0, mid));\n      yield this.deleteSubPath(path, subPaths.slice(mid));\n      return Promise.resolve(false);\n    });\n  }\n\n}\n\nexports.default = DatabaseRemove;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/database/remove.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","pathLib","require","removeRemote_1","listRemote_1","stack_1","chunkList","ls","chunkSize","chunks","i","length","push","slice","INITIAL_DELETE_BATCH_SIZE","INITIAL_LIST_NUM_SUB_PATH","MAX_LIST_NUM_SUB_PATH","DatabaseRemove","constructor","instance","path","remote","RTDBRemoveRemote","deleteJobStack","Stack","name","concurrency","retries","listRemote","RTDBListRemote","listStack","execute","deletePath","run","listNumSubPath","batchSizeLow","batchSizeHigh","batchSize","subPathList","listPath","nSmallChunks","chunk","deleteSubPath","Math","floor","min","subPaths","Error","join","mid","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst pathLib = require(\"path\");\nconst removeRemote_1 = require(\"./removeRemote\");\nconst listRemote_1 = require(\"./listRemote\");\nconst stack_1 = require(\"../throttler/stack\");\nfunction chunkList(ls, chunkSize) {\n    const chunks = [];\n    for (let i = 0; i < ls.length; i += chunkSize) {\n        chunks.push(ls.slice(i, i + chunkSize));\n    }\n    return chunks;\n}\nconst INITIAL_DELETE_BATCH_SIZE = 25;\nconst INITIAL_LIST_NUM_SUB_PATH = 100;\nconst MAX_LIST_NUM_SUB_PATH = 204800;\nclass DatabaseRemove {\n    constructor(instance, path) {\n        this.path = path;\n        this.remote = new removeRemote_1.RTDBRemoveRemote(instance);\n        this.deleteJobStack = new stack_1.Stack({\n            name: \"delete stack\",\n            concurrency: 1,\n            retries: 3,\n        });\n        this.listRemote = new listRemote_1.RTDBListRemote(instance);\n        this.listStack = new stack_1.Stack({\n            name: \"list stack\",\n            concurrency: 1,\n            retries: 3,\n        });\n    }\n    execute() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.deletePath(this.path);\n        });\n    }\n    deletePath(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (yield this.deleteJobStack.run(() => this.remote.deletePath(path))) {\n                return Promise.resolve(true);\n            }\n            let listNumSubPath = INITIAL_LIST_NUM_SUB_PATH;\n            let batchSizeLow = 1;\n            let batchSizeHigh = MAX_LIST_NUM_SUB_PATH + 1;\n            let batchSize = INITIAL_DELETE_BATCH_SIZE;\n            while (true) {\n                const subPathList = yield this.listStack.run(() => this.listRemote.listPath(path, listNumSubPath));\n                if (subPathList.length === 0) {\n                    return Promise.resolve(false);\n                }\n                const chunks = chunkList(subPathList, batchSize);\n                let nSmallChunks = 0;\n                for (const chunk of chunks) {\n                    if (yield this.deleteSubPath(path, chunk)) {\n                        nSmallChunks += 1;\n                    }\n                }\n                if (nSmallChunks > chunks.length / 2) {\n                    batchSizeLow = batchSize;\n                    batchSize = Math.floor(Math.min(batchSize * 2, (batchSizeHigh + batchSize) / 2));\n                }\n                else {\n                    batchSizeHigh = batchSize;\n                    batchSize = Math.floor((batchSizeLow + batchSize) / 2);\n                }\n                if (listNumSubPath * 2 <= MAX_LIST_NUM_SUB_PATH) {\n                    listNumSubPath = listNumSubPath * 2;\n                }\n                else {\n                    listNumSubPath = Math.floor(MAX_LIST_NUM_SUB_PATH / batchSize) * batchSize;\n                }\n            }\n        });\n    }\n    deleteSubPath(path, subPaths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (subPaths.length === 0) {\n                throw new Error(\"deleteSubPath is called with empty subPaths list\");\n            }\n            if (subPaths.length === 1) {\n                return this.deletePath(pathLib.join(path, subPaths[0]));\n            }\n            if (yield this.deleteJobStack.run(() => this.remote.deleteSubPath(path, subPaths))) {\n                return Promise.resolve(true);\n            }\n            const mid = Math.floor(subPaths.length / 2);\n            yield this.deleteSubPath(path, subPaths.slice(0, mid));\n            yield this.deleteSubPath(path, subPaths.slice(mid));\n            return Promise.resolve(false);\n        });\n    }\n}\nexports.default = DatabaseRemove;\n"]},"metadata":{},"sourceType":"script"}