{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst error_1 = require(\"../../error\");\n\nconst projects_1 = require(\"../../management/projects\");\n\nconst logger = require(\"../../logger\");\n\nconst prompt_1 = require(\"../../prompt\");\n\nconst utils = require(\"../../utils\");\n\nconst OPTION_NO_PROJECT = \"Don't set up a default project\";\nconst OPTION_USE_PROJECT = \"Use an existing project\";\nconst OPTION_NEW_PROJECT = \"Create a new project\";\nconst OPTION_ADD_FIREBASE = \"Add Firebase to an existing Google Cloud Platform project\";\n\nfunction toProjectInfo(projectMetaData) {\n  const projectId = projectMetaData.projectId,\n        displayName = projectMetaData.displayName,\n        resources = projectMetaData.resources;\n  return {\n    id: projectId,\n    label: `${projectId}` + (displayName ? ` (${displayName})` : \"\"),\n    instance: _.get(resources, \"realtimeDatabaseInstance\"),\n    location: _.get(resources, \"locationId\")\n  };\n}\n\nfunction promptAndCreateNewProject() {\n  return __awaiter(this, void 0, void 0, function* () {\n    utils.logBullet(\"If you want to create a project in a Google Cloud organization or folder, please use \" + `\"firebase projects:create\" instead, and return to this command when you've created the project.`);\n    const promptAnswer = {};\n    yield prompt_1.prompt(promptAnswer, projects_1.PROJECTS_CREATE_QUESTIONS);\n\n    if (!promptAnswer.projectId) {\n      throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n    }\n\n    return yield projects_1.createFirebaseProjectAndLog(promptAnswer.projectId, {\n      displayName: promptAnswer.displayName\n    });\n  });\n}\n\nfunction promptAndAddFirebaseToCloudProject() {\n  return __awaiter(this, void 0, void 0, function* () {\n    const projectId = yield projects_1.promptAvailableProjectId();\n\n    if (!projectId) {\n      throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n    }\n\n    return yield projects_1.addFirebaseToCloudProjectAndLog(projectId);\n  });\n}\n\nfunction projectChoicePrompt(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const choices = [{\n      name: OPTION_USE_PROJECT,\n      value: OPTION_USE_PROJECT\n    }, {\n      name: OPTION_NEW_PROJECT,\n      value: OPTION_NEW_PROJECT\n    }, {\n      name: OPTION_ADD_FIREBASE,\n      value: OPTION_ADD_FIREBASE\n    }, {\n      name: OPTION_NO_PROJECT,\n      value: OPTION_NO_PROJECT\n    }];\n    const projectSetupOption = yield prompt_1.promptOnce({\n      type: \"list\",\n      name: \"id\",\n      message: \"Please select an option:\",\n      choices\n    });\n\n    switch (projectSetupOption) {\n      case OPTION_USE_PROJECT:\n        return projects_1.getOrPromptProject(options);\n\n      case OPTION_NEW_PROJECT:\n        return promptAndCreateNewProject();\n\n      case OPTION_ADD_FIREBASE:\n        return promptAndAddFirebaseToCloudProject();\n\n      default:\n        return;\n    }\n  });\n}\n\nfunction doSetup(setup, config, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    setup.project = {};\n    logger.info();\n    logger.info(`First, let's associate this project directory with a Firebase project.`);\n    logger.info(`You can create multiple project aliases by running ${clc.bold(\"firebase use --add\")}, `);\n    logger.info(`but for now we'll just set up a default project.`);\n    logger.info();\n\n    const projectFromRcFile = _.get(setup.rcfile, \"projects.default\");\n\n    if (projectFromRcFile) {\n      utils.logBullet(`.firebaserc already has a default project, using ${projectFromRcFile}.`);\n      const rcProject = yield projects_1.getFirebaseProject(projectFromRcFile);\n      setup.projectId = rcProject.projectId;\n      setup.projectLocation = _.get(rcProject, \"resources.locationId\");\n      return;\n    }\n\n    let projectMetaData;\n\n    if (options.project) {\n      projectMetaData = yield projects_1.getFirebaseProject(options.project);\n    } else {\n      projectMetaData = yield projectChoicePrompt(options);\n\n      if (!projectMetaData) {\n        return;\n      }\n    }\n\n    const projectInfo = toProjectInfo(projectMetaData);\n    utils.logBullet(`Using project ${projectInfo.label}`);\n\n    _.set(setup.rcfile, \"projects.default\", projectInfo.id);\n\n    setup.projectId = projectInfo.id;\n    setup.instance = projectInfo.instance;\n    setup.projectLocation = projectInfo.location;\n    utils.makeActiveProject(config.projectDir, projectInfo.id);\n  });\n}\n\nexports.doSetup = doSetup;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/init/features/project.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","clc","require","_","error_1","projects_1","logger","prompt_1","utils","OPTION_NO_PROJECT","OPTION_USE_PROJECT","OPTION_NEW_PROJECT","OPTION_ADD_FIREBASE","toProjectInfo","projectMetaData","projectId","displayName","resources","id","label","instance","get","location","promptAndCreateNewProject","logBullet","promptAnswer","prompt","PROJECTS_CREATE_QUESTIONS","FirebaseError","createFirebaseProjectAndLog","promptAndAddFirebaseToCloudProject","promptAvailableProjectId","addFirebaseToCloudProjectAndLog","projectChoicePrompt","options","choices","name","projectSetupOption","promptOnce","type","message","getOrPromptProject","doSetup","setup","config","project","info","bold","projectFromRcFile","rcfile","rcProject","getFirebaseProject","projectLocation","projectInfo","set","makeActiveProject","projectDir"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst error_1 = require(\"../../error\");\nconst projects_1 = require(\"../../management/projects\");\nconst logger = require(\"../../logger\");\nconst prompt_1 = require(\"../../prompt\");\nconst utils = require(\"../../utils\");\nconst OPTION_NO_PROJECT = \"Don't set up a default project\";\nconst OPTION_USE_PROJECT = \"Use an existing project\";\nconst OPTION_NEW_PROJECT = \"Create a new project\";\nconst OPTION_ADD_FIREBASE = \"Add Firebase to an existing Google Cloud Platform project\";\nfunction toProjectInfo(projectMetaData) {\n    const { projectId, displayName, resources } = projectMetaData;\n    return {\n        id: projectId,\n        label: `${projectId}` + (displayName ? ` (${displayName})` : \"\"),\n        instance: _.get(resources, \"realtimeDatabaseInstance\"),\n        location: _.get(resources, \"locationId\"),\n    };\n}\nfunction promptAndCreateNewProject() {\n    return __awaiter(this, void 0, void 0, function* () {\n        utils.logBullet(\"If you want to create a project in a Google Cloud organization or folder, please use \" +\n            `\"firebase projects:create\" instead, and return to this command when you've created the project.`);\n        const promptAnswer = {};\n        yield prompt_1.prompt(promptAnswer, projects_1.PROJECTS_CREATE_QUESTIONS);\n        if (!promptAnswer.projectId) {\n            throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n        }\n        return yield projects_1.createFirebaseProjectAndLog(promptAnswer.projectId, {\n            displayName: promptAnswer.displayName,\n        });\n    });\n}\nfunction promptAndAddFirebaseToCloudProject() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const projectId = yield projects_1.promptAvailableProjectId();\n        if (!projectId) {\n            throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n        }\n        return yield projects_1.addFirebaseToCloudProjectAndLog(projectId);\n    });\n}\nfunction projectChoicePrompt(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const choices = [\n            { name: OPTION_USE_PROJECT, value: OPTION_USE_PROJECT },\n            { name: OPTION_NEW_PROJECT, value: OPTION_NEW_PROJECT },\n            { name: OPTION_ADD_FIREBASE, value: OPTION_ADD_FIREBASE },\n            { name: OPTION_NO_PROJECT, value: OPTION_NO_PROJECT },\n        ];\n        const projectSetupOption = yield prompt_1.promptOnce({\n            type: \"list\",\n            name: \"id\",\n            message: \"Please select an option:\",\n            choices,\n        });\n        switch (projectSetupOption) {\n            case OPTION_USE_PROJECT:\n                return projects_1.getOrPromptProject(options);\n            case OPTION_NEW_PROJECT:\n                return promptAndCreateNewProject();\n            case OPTION_ADD_FIREBASE:\n                return promptAndAddFirebaseToCloudProject();\n            default:\n                return;\n        }\n    });\n}\nfunction doSetup(setup, config, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        setup.project = {};\n        logger.info();\n        logger.info(`First, let's associate this project directory with a Firebase project.`);\n        logger.info(`You can create multiple project aliases by running ${clc.bold(\"firebase use --add\")}, `);\n        logger.info(`but for now we'll just set up a default project.`);\n        logger.info();\n        const projectFromRcFile = _.get(setup.rcfile, \"projects.default\");\n        if (projectFromRcFile) {\n            utils.logBullet(`.firebaserc already has a default project, using ${projectFromRcFile}.`);\n            const rcProject = yield projects_1.getFirebaseProject(projectFromRcFile);\n            setup.projectId = rcProject.projectId;\n            setup.projectLocation = _.get(rcProject, \"resources.locationId\");\n            return;\n        }\n        let projectMetaData;\n        if (options.project) {\n            projectMetaData = yield projects_1.getFirebaseProject(options.project);\n        }\n        else {\n            projectMetaData = yield projectChoicePrompt(options);\n            if (!projectMetaData) {\n                return;\n            }\n        }\n        const projectInfo = toProjectInfo(projectMetaData);\n        utils.logBullet(`Using project ${projectInfo.label}`);\n        _.set(setup.rcfile, \"projects.default\", projectInfo.id);\n        setup.projectId = projectInfo.id;\n        setup.instance = projectInfo.instance;\n        setup.projectLocation = projectInfo.location;\n        utils.makeActiveProject(config.projectDir, projectInfo.id);\n    });\n}\nexports.doSetup = doSetup;\n"]},"metadata":{},"sourceType":"script"}