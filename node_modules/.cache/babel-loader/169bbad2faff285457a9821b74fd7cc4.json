{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst opn = require(\"open\");\n\nconst cloudbilling = require(\"../gcp/cloudbilling\");\n\nconst _require = require(\"../error\"),\n      FirebaseError = _require.FirebaseError;\n\nconst logger = require(\"../logger\");\n\nconst extensionsHelper = require(\"./extensionsHelper\");\n\nconst prompt = require(\"../prompt\");\n\nconst utils = require(\"../utils\");\n\nfunction _logBillingStatus(enabled, projectId) {\n  return enabled ? utils.logLabeledSuccess(extensionsHelper.logPrefix, `${clc.bold(projectId)} has successfully been upgraded.`) : Promise.reject(new FirebaseError(`${extensionsHelper.logPrefix}: ${clc.bold(projectId)} could not be upgraded. Please add a billing account via the Firebase console before proceeding.`));\n}\n\nfunction _openBillingAccount(projectId, url, open) {\n  if (open) {\n    opn(url).catch(err => {\n      logger.debug(\"Unable to open billing URL: \" + err.stack);\n    });\n  }\n\n  return prompt.promptOnce({\n    name: \"continue\",\n    type: \"confirm\",\n    message: \"Press enter when finished upgrading your project to continue setting up your extension.\",\n    default: true\n  }).then(() => {\n    return cloudbilling.checkBillingEnabled(projectId);\n  });\n}\n\nfunction _chooseBillingAccount(projectId, extensionName, accounts) {\n  const choices = _.map(accounts, \"displayName\");\n\n  choices.push(\"Add new billing account\");\n  const question = {\n    name: \"billing\",\n    type: \"list\",\n    message: `The extension ${clc.underline(extensionName)} requires your project to be upgraded to the Blaze plan. You have access to the following billing accounts.\nPlease select the one that you would like to associate with this project:`,\n    choices: choices\n  };\n  return prompt.promptOnce(question).then(answer => {\n    if (answer === \"Add new billing account\") {\n      const billingURL = `https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`;\n      return _openBillingAccount(projectId, billingURL, true);\n    } else {\n      const billingAccount = _.find(accounts, [\"displayName\", answer]);\n\n      return cloudbilling.setBillingAccount(projectId, billingAccount.name);\n    }\n  }).then(enabled => {\n    return _logBillingStatus(enabled, projectId);\n  });\n}\n\nfunction _setUpBillingAccount(projectId, extensionName) {\n  const billingURL = `https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`;\n  logger.info();\n  logger.info(`The extension ${clc.bold(extensionName)} requires your project to be upgraded to the Blaze plan. Please visit the following link to add a billing account:`);\n  logger.info();\n  logger.info(clc.bold.underline(billingURL));\n  logger.info();\n  return prompt.promptOnce({\n    name: \"open-url\",\n    type: \"confirm\",\n    message: \"Press enter to open the URL.\",\n    default: true\n  }).then(open => {\n    return _openBillingAccount(projectId, billingURL, open);\n  }).then(enabled => {\n    return _logBillingStatus(enabled, projectId);\n  });\n}\n\nmodule.exports = function (projectId, extensionName, required) {\n  if (!required) {\n    return Promise.resolve();\n  }\n\n  return cloudbilling.checkBillingEnabled(projectId).then(enabled => {\n    return enabled ? Promise.reject(\"billing enabled\") : cloudbilling.listBillingAccounts();\n  }).then(billingAccounts => {\n    if (billingAccounts) {\n      const accounts = _.filter(billingAccounts, [\"open\", true]);\n\n      return accounts.length > 0 ? _chooseBillingAccount(projectId, extensionName, accounts) : _setUpBillingAccount(projectId, extensionName);\n    }\n  }).catch(err => {\n    if (err === \"billing enabled\") {\n      return;\n    }\n\n    throw err;\n  });\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/extensions/checkProjectBilling.js"],"names":["_","require","clc","opn","cloudbilling","FirebaseError","logger","extensionsHelper","prompt","utils","_logBillingStatus","enabled","projectId","logLabeledSuccess","logPrefix","bold","Promise","reject","_openBillingAccount","url","open","catch","err","debug","stack","promptOnce","name","type","message","default","then","checkBillingEnabled","_chooseBillingAccount","extensionName","accounts","choices","map","push","question","underline","answer","billingURL","billingAccount","find","setBillingAccount","_setUpBillingAccount","info","module","exports","required","resolve","listBillingAccounts","billingAccounts","filter","length"],"mappings":"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","sourcesContent":["\"use strict\";\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst opn = require(\"open\");\nconst cloudbilling = require(\"../gcp/cloudbilling\");\nconst { FirebaseError } = require(\"../error\");\nconst logger = require(\"../logger\");\nconst extensionsHelper = require(\"./extensionsHelper\");\nconst prompt = require(\"../prompt\");\nconst utils = require(\"../utils\");\nfunction _logBillingStatus(enabled, projectId) {\n    return enabled\n        ? utils.logLabeledSuccess(extensionsHelper.logPrefix, `${clc.bold(projectId)} has successfully been upgraded.`)\n        : Promise.reject(new FirebaseError(`${extensionsHelper.logPrefix}: ${clc.bold(projectId)} could not be upgraded. Please add a billing account via the Firebase console before proceeding.`));\n}\nfunction _openBillingAccount(projectId, url, open) {\n    if (open) {\n        opn(url).catch((err) => {\n            logger.debug(\"Unable to open billing URL: \" + err.stack);\n        });\n    }\n    return prompt\n        .promptOnce({\n        name: \"continue\",\n        type: \"confirm\",\n        message: \"Press enter when finished upgrading your project to continue setting up your extension.\",\n        default: true,\n    })\n        .then(() => {\n        return cloudbilling.checkBillingEnabled(projectId);\n    });\n}\nfunction _chooseBillingAccount(projectId, extensionName, accounts) {\n    const choices = _.map(accounts, \"displayName\");\n    choices.push(\"Add new billing account\");\n    const question = {\n        name: \"billing\",\n        type: \"list\",\n        message: `The extension ${clc.underline(extensionName)} requires your project to be upgraded to the Blaze plan. You have access to the following billing accounts.\nPlease select the one that you would like to associate with this project:`,\n        choices: choices,\n    };\n    return prompt\n        .promptOnce(question)\n        .then((answer) => {\n        if (answer === \"Add new billing account\") {\n            const billingURL = `https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`;\n            return _openBillingAccount(projectId, billingURL, true);\n        }\n        else {\n            const billingAccount = _.find(accounts, [\"displayName\", answer]);\n            return cloudbilling.setBillingAccount(projectId, billingAccount.name);\n        }\n    })\n        .then((enabled) => {\n        return _logBillingStatus(enabled, projectId);\n    });\n}\nfunction _setUpBillingAccount(projectId, extensionName) {\n    const billingURL = `https://console.cloud.google.com/billing/linkedaccount?project=${projectId}`;\n    logger.info();\n    logger.info(`The extension ${clc.bold(extensionName)} requires your project to be upgraded to the Blaze plan. Please visit the following link to add a billing account:`);\n    logger.info();\n    logger.info(clc.bold.underline(billingURL));\n    logger.info();\n    return prompt\n        .promptOnce({\n        name: \"open-url\",\n        type: \"confirm\",\n        message: \"Press enter to open the URL.\",\n        default: true,\n    })\n        .then((open) => {\n        return _openBillingAccount(projectId, billingURL, open);\n    })\n        .then((enabled) => {\n        return _logBillingStatus(enabled, projectId);\n    });\n}\nmodule.exports = function (projectId, extensionName, required) {\n    if (!required) {\n        return Promise.resolve();\n    }\n    return cloudbilling\n        .checkBillingEnabled(projectId)\n        .then((enabled) => {\n        return enabled ? Promise.reject(\"billing enabled\") : cloudbilling.listBillingAccounts();\n    })\n        .then((billingAccounts) => {\n        if (billingAccounts) {\n            const accounts = _.filter(billingAccounts, [\"open\", true]);\n            return accounts.length > 0\n                ? _chooseBillingAccount(projectId, extensionName, accounts)\n                : _setUpBillingAccount(projectId, extensionName);\n        }\n    })\n        .catch((err) => {\n        if (err === \"billing enabled\") {\n            return;\n        }\n        throw err;\n    });\n};\n"]},"metadata":{},"sourceType":"script"}