{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar clc = require(\"cli-color\");\n\nvar _ = require(\"lodash\");\n\nvar _require = require(\"../../error\"),\n    FirebaseError = _require.FirebaseError;\n\nvar gcp = require(\"../../gcp\");\n\nvar logger = require(\"../../logger\");\n\nvar track = require(\"../../track\");\n\nvar utils = require(\"../../utils\");\n\nvar helper = require(\"../../functionsDeployHelper\");\n\nvar runtimeSelector = require(\"../../runtimeChoiceSelector\");\n\nvar _require2 = require(\"../../functionsConfig\"),\n    getAppEngineLocation = _require2.getAppEngineLocation;\n\nvar _require3 = require(\"../../prompt\"),\n    promptOnce = _require3.promptOnce;\n\nvar _require4 = require(\"./createOrUpdateSchedulesAndTopics\"),\n    createOrUpdateSchedulesAndTopics = _require4.createOrUpdateSchedulesAndTopics;\n\nvar deploymentTool = require(\"../../deploymentTool\");\n\nvar timings = {};\nvar deployments = [];\nvar failedDeployments = [];\nconst DEFAULT_PUBLIC_POLICY = {\n  version: 3,\n  bindings: [{\n    role: \"roles/cloudfunctions.invoker\",\n    members: [\"allUsers\"]\n  }]\n};\n\nfunction _startTimer(name, type) {\n  timings[name] = {\n    type: type,\n    t0: process.hrtime()\n  };\n}\n\nfunction _endTimer(name) {\n  if (!timings[name]) {\n    logger.debug(\"[functions] no timer initialized for\", name);\n    return;\n  }\n\n  var duration = process.hrtime(timings[name].t0);\n  track(\"Functions Deploy (Duration)\", timings[name].type, duration[0] * 1000 + Math.round(duration[1] * 1e-6));\n}\n\nfunction _fetchTriggerUrls(projectId, ops, sourceUrl) {\n  if (!_.find(ops, [\"trigger.httpsTrigger\", {}])) {\n    return Promise.resolve();\n  }\n\n  return gcp.cloudfunctions.listAll(projectId).then(function (functions) {\n    var httpFunctions = _.chain(functions).filter({\n      sourceUploadUrl: sourceUrl\n    }).filter(\"httpsTrigger\").value();\n\n    _.forEach(httpFunctions, function (httpFunc) {\n      _.chain(ops).find({\n        func: httpFunc.name\n      }).assign({\n        triggerUrl: httpFunc.httpsTrigger.url\n      }).value();\n    });\n\n    return Promise.resolve();\n  });\n}\n\nvar printSuccess = function (op) {\n  _endTimer(op.func);\n\n  utils.logSuccess(clc.bold.green(\"functions[\" + helper.getFunctionLabel(op.func) + \"]: \") + \"Successful \" + op.type + \" operation. \");\n\n  if (op.triggerUrl && op.type !== \"delete\") {\n    logger.info(clc.bold(\"Function URL\"), \"(\" + helper.getFunctionName(op.func) + \"):\", op.triggerUrl);\n  }\n};\n\nvar printFail = function (op) {\n  _endTimer(op.func);\n\n  failedDeployments.push(helper.getFunctionName(op.func));\n  utils.logWarning(clc.bold.yellow(\"functions[\" + helper.getFunctionLabel(op.func) + \"]: \") + \"Deployment error.\");\n\n  if (op.error.code === 8) {\n    logger.debug(op.error.message);\n    logger.info(\"You have exceeded your deployment quota, please deploy your functions in batches by using the --only flag, \" + \"and wait a few minutes before deploying again. Go to \" + clc.underline(\"https://firebase.google.com/docs/cli/#deploy_specific_functions\") + \" to learn more.\");\n  } else {\n    logger.info(op.error.message);\n  }\n};\n\nvar printTooManyOps = function (projectId) {\n  utils.logWarning(clc.bold.yellow(\"functions:\") + \" too many functions are being deployed, cannot poll status.\");\n  logger.info(\"In a few minutes, you can check status at \" + utils.consoleUrl(projectId, \"/functions/logs\"));\n  logger.info(\"You can use the --only flag to deploy only a portion of your functions in the future.\");\n  deployments = [];\n};\n\nmodule.exports = function (context, options, payload) {\n  if (!options.config.has(\"functions\")) {\n    return Promise.resolve();\n  }\n\n  var projectId = context.projectId;\n  var sourceUrl = context.uploadUrl;\n  var appEngineLocation = getAppEngineLocation(context.firebaseConfig);\n  var legacySourceUrlTwo = \"gs://\" + \"staging.\" + context.firebaseConfig.storageBucket + \"/firebase-functions-source\";\n  var legacySourceUrlOne = \"gs://\" + projectId + \"-gcf/\" + projectId;\n  var functionsInfo = helper.getFunctionsInfo(payload.functions.triggers, projectId);\n  functionsInfo = functionsInfo.map(fn => {\n    if (fn.eventTrigger && fn.schedule && fn.eventTrigger.eventType === \"google.pubsub.topic.publish\") {\n      const _fn$name$split = fn.name.split(\"/\"),\n            _fn$name$split2 = _slicedToArray(_fn$name$split, 6),\n            region = _fn$name$split2[3],\n            funcName = _fn$name$split2[5];\n\n      const newResource = `${fn.eventTrigger.resource}/firebase-schedule-${funcName}-${region}`;\n      fn.eventTrigger.resource = newResource;\n    }\n\n    return fn;\n  });\n\n  var uploadedNames = _.map(functionsInfo, \"name\");\n\n  var functionFilterGroups = helper.getFilterGroups(options);\n  var deleteReleaseNames;\n  var existingScheduledFunctions;\n  delete payload.functions;\n  return gcp.cloudfunctions.listAll(projectId).then(function (existingFunctions) {\n    var pluckName = function (functionObject) {\n      return _.get(functionObject, \"name\");\n    };\n\n    var existingNames = _.map(existingFunctions, pluckName);\n\n    var isScheduled = function (functionObject) {\n      return _.get(functionObject, \"labels.deployment-scheduled\") === \"true\";\n    };\n\n    existingScheduledFunctions = _.chain(existingFunctions).filter(isScheduled).map(pluckName).value();\n    var releaseNames = helper.getReleaseNames(uploadedNames, existingNames, functionFilterGroups);\n    deleteReleaseNames = functionFilterGroups.length > 0 ? releaseNames : existingNames;\n    helper.logFilters(existingNames, releaseNames, functionFilterGroups);\n\n    _.chain(uploadedNames).difference(existingNames).intersection(releaseNames).forEach(function (name) {\n      var functionInfo = _.find(functionsInfo, {\n        name: name\n      });\n\n      var functionTrigger = helper.getFunctionTrigger(functionInfo);\n      var functionName = helper.getFunctionName(name);\n      var region = helper.getRegion(name);\n      var runtime = context.runtimeChoice || helper.getDefaultRuntime();\n      utils.logBullet(clc.bold.cyan(\"functions: \") + \"creating \" + runtimeSelector.getHumanFriendlyRuntimeName(runtime) + \" function \" + clc.bold(helper.getFunctionLabel(name)) + \"...\");\n      logger.debug(\"Trigger is: \", JSON.stringify(functionTrigger));\n      var eventType = functionTrigger.eventTrigger ? functionTrigger.eventTrigger.eventType : \"https\";\n\n      _startTimer(name, \"create\");\n\n      deployments.push({\n        name: name,\n        retryFunction: () => {\n          return gcp.cloudfunctions.create({\n            projectId: projectId,\n            region: region,\n            eventType: eventType,\n            functionName: functionName,\n            entryPoint: functionInfo.entryPoint,\n            trigger: functionTrigger,\n            labels: _.assign({}, deploymentTool.labels, functionInfo.labels),\n            sourceUploadUrl: sourceUrl,\n            runtime: runtime,\n            availableMemoryMb: functionInfo.availableMemoryMb,\n            timeout: functionInfo.timeout\n          }).then(createRes => {\n            if (_.has(functionTrigger, \"httpsTrigger\")) {\n              logger.debug(`Setting public policy for function ${functionName}`);\n              return gcp.cloudfunctions.setIamPolicy({\n                functionName,\n                projectId,\n                region,\n                policy: DEFAULT_PUBLIC_POLICY\n              }).then(() => {\n                return createRes;\n              });\n            }\n\n            return createRes;\n          });\n        },\n        trigger: functionTrigger\n      });\n    }).value();\n\n    _.chain(uploadedNames).intersection(existingNames).intersection(releaseNames).forEach(function (name) {\n      var functionInfo = _.find(functionsInfo, {\n        name: name\n      });\n\n      var functionTrigger = helper.getFunctionTrigger(functionInfo);\n      var functionName = helper.getFunctionName(name);\n      var region = helper.getRegion(name);\n      var eventType = functionTrigger.eventTrigger ? functionTrigger.eventTrigger.eventType : \"https\";\n\n      var existingFunction = _.find(existingFunctions, {\n        name: name\n      });\n\n      var existingEventType = _.get(existingFunction, \"eventTrigger.eventType\");\n\n      var migratingTrigger = false;\n\n      if (eventType.match(/google.storage.object./) && existingEventType === \"providers/cloud.storage/eventTypes/object.change\") {\n        migratingTrigger = true;\n      } else if (eventType === \"google.pubsub.topic.publish\" && existingEventType === \"providers/cloud.pubsub/eventTypes/topic.publish\") {\n        migratingTrigger = true;\n      }\n\n      if (migratingTrigger) {\n        throw new FirebaseError(\"Function \" + clc.bold(functionName) + \" was deployed using a legacy trigger type and cannot be updated without deleting \" + \"the previous function. Follow the instructions on \" + clc.underline(\"https://firebase.google.com/docs/functions/manage-functions#modify-trigger\") + \" for how to change the trigger without losing events.\\n\");\n      } else {\n        var options = {\n          projectId: projectId,\n          region: region,\n          functionName: functionName,\n          trigger: functionTrigger,\n          sourceUploadUrl: sourceUrl,\n          labels: _.assign({}, deploymentTool.labels, functionInfo.labels),\n          availableMemoryMb: functionInfo.availableMemoryMb,\n          timeout: functionInfo.timeout\n        };\n\n        if (context.runtimeChoice) {\n          options.runtime = context.runtimeChoice;\n        }\n\n        var runtime = options.runtime || _.get(existingFunction, \"runtime\", \"nodejs6\");\n\n        utils.logBullet(clc.bold.cyan(\"functions: \") + \"updating \" + runtimeSelector.getHumanFriendlyRuntimeName(runtime) + \" function \" + clc.bold(helper.getFunctionLabel(name)) + \"...\");\n        logger.debug(\"Trigger is: \", JSON.stringify(functionTrigger));\n\n        _startTimer(name, \"update\");\n\n        deployments.push({\n          name: name,\n          retryFunction: function () {\n            return gcp.cloudfunctions.update(options);\n          },\n          trigger: functionTrigger\n        });\n      }\n    }).value();\n\n    var functionsToDelete = _.chain(existingFunctions).filter(function (functionInfo) {\n      if (typeof functionInfo.labels === \"undefined\") {\n        return functionInfo.sourceArchiveUrl === legacySourceUrlOne || functionInfo.sourceArchiveUrl === legacySourceUrlTwo;\n      }\n\n      return deploymentTool.check(functionInfo.labels);\n    }).map(pluckName).difference(uploadedNames).intersection(deleteReleaseNames).value();\n\n    if (functionsToDelete.length === 0) {\n      return Promise.resolve();\n    }\n\n    var deleteList = _.map(functionsToDelete, function (func) {\n      return \"\\t\" + helper.getFunctionLabel(func);\n    }).join(\"\\n\");\n\n    if (options.nonInteractive && !options.force) {\n      var deleteCommands = _.map(functionsToDelete, function (func) {\n        return \"\\tfirebase functions:delete \" + helper.getFunctionName(func) + \" --region \" + helper.getRegion(func);\n      }).join(\"\\n\");\n\n      throw new FirebaseError(\"The following functions are found in your project but do not exist in your local source code:\\n\" + deleteList + \"\\n\\nAborting because deletion cannot proceed in non-interactive mode. To fix, manually delete the functions by running:\\n\" + clc.bold(deleteCommands));\n    } else if (!options.force) {\n      logger.info(\"\\nThe following functions are found in your project but do not exist in your local source code:\\n\" + deleteList + \"\\n\\nIf you are renaming a function or changing its region, it is recommended that you create the new \" + \"function first before deleting the old one to prevent event loss. For more info, visit \" + clc.underline(\"https://firebase.google.com/docs/functions/manage-functions#modify\" + \"\\n\"));\n    }\n\n    const next = options.force ? Promise.resolve(true) : promptOnce({\n      type: \"confirm\",\n      name: \"confirm\",\n      default: false,\n      message: \"Would you like to proceed with deletion? Selecting no will continue the rest of the deployments.\"\n    });\n    return next.then(function (proceed) {\n      if (!proceed) {\n        if (deployments.length !== 0) {\n          utils.logBullet(clc.bold.cyan(\"functions: \") + \"continuing with other deployments.\");\n        }\n\n        return;\n      }\n\n      functionsToDelete.forEach(function (name) {\n        var functionName = helper.getFunctionName(name);\n        var scheduleName = helper.getScheduleName(name, appEngineLocation);\n        var topicName = helper.getTopicName(name);\n        var region = helper.getRegion(name);\n        utils.logBullet(clc.bold.cyan(\"functions: \") + \"deleting function \" + clc.bold(helper.getFunctionLabel(name)) + \"...\");\n\n        _startTimer(name, \"delete\");\n\n        var retryFunction;\n\n        var isScheduledFunction = _.includes(existingScheduledFunctions, name);\n\n        if (isScheduledFunction) {\n          retryFunction = function () {\n            return gcp.cloudscheduler.deleteJob(scheduleName).catch(err => {\n              logger.debug(err);\n\n              if (err.context.response.statusCode != 404 && err.context.response.statusCode != 403) {\n                throw new FirebaseError(`Failed to delete schedule for ${functionName} with status ${err.status}`, err);\n              }\n            }).then(() => {\n              return gcp.pubsub.deleteTopic(topicName);\n            }).catch(err => {\n              if (err.context.response.statusCode != 404 && err.context.response.statusCode != 403) {\n                throw new FirebaseError(`Failed to delete topic for ${functionName} with status ${err.status}`, err);\n              }\n            }).then(() => {\n              return gcp.cloudfunctions.delete({\n                projectId: projectId,\n                region: region,\n                functionName: functionName\n              });\n            });\n          };\n        } else {\n          retryFunction = function () {\n            return gcp.cloudfunctions.delete({\n              projectId: projectId,\n              region: region,\n              functionName: functionName\n            });\n          };\n        }\n\n        deployments.push({\n          name: name,\n          retryFunction: retryFunction\n        });\n      });\n    });\n  }).then(function () {\n    var functionsInDeploy = functionsInfo.filter(trigger => {\n      return functionFilterGroups.length > 0 ? _.includes(deleteReleaseNames, trigger.name) : true;\n    });\n    return createOrUpdateSchedulesAndTopics(context.projectId, functionsInDeploy, existingScheduledFunctions, appEngineLocation);\n  }).then(function () {\n    return utils.promiseAllSettled(_.map(deployments, function (op) {\n      return op.retryFunction().then(function (res) {\n        return _.merge(op, res);\n      });\n    }));\n  }).then(function (allOps) {\n    var failedCalls = _.chain(allOps).filter({\n      state: \"rejected\"\n    }).map(\"reason\").value();\n\n    var successfulCalls = _.chain(allOps).filter({\n      state: \"fulfilled\"\n    }).map(\"value\").value();\n\n    failedDeployments = failedCalls.map(error => _.get(error, \"context.function\", \"\"));\n    return _fetchTriggerUrls(projectId, successfulCalls, sourceUrl).then(function () {\n      return helper.pollDeploys(successfulCalls, printSuccess, printFail, printTooManyOps, projectId);\n    }).then(() => {\n      if (deployments.length > 0) {\n        track(\"Functions Deploy (Result)\", \"failure\", failedDeployments.length);\n        track(\"Functions Deploy (Result)\", \"success\", deployments.length - failedDeployments.length);\n      }\n\n      if (failedDeployments.length > 0) {\n        logger.info(\"\\n\\nFunctions deploy had errors with the following functions:\");\n        const sortedFailedDeployments = failedDeployments.sort();\n\n        for (let i = 0; i < sortedFailedDeployments.length; i++) {\n          logger.info(`\\t${sortedFailedDeployments[i]}`);\n        }\n\n        logger.info(\"\\n\\nTo try redeploying those functions, run:\");\n        logger.info(\"    \" + clc.bold(\"firebase deploy --only \") + clc.bold(sortedFailedDeployments.map(name => `functions:${name}`).join(\",\")));\n        logger.info(\"\\n\\nTo continue deploying other features (such as database), run:\");\n        logger.info(\"    \" + clc.bold(\"firebase deploy --except functions\"));\n        return Promise.reject(new FirebaseError(\"Functions did not deploy properly.\"));\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/deploy/functions/release.js"],"names":["clc","require","_","FirebaseError","gcp","logger","track","utils","helper","runtimeSelector","getAppEngineLocation","promptOnce","createOrUpdateSchedulesAndTopics","deploymentTool","timings","deployments","failedDeployments","DEFAULT_PUBLIC_POLICY","version","bindings","role","members","_startTimer","name","type","t0","process","hrtime","_endTimer","debug","duration","Math","round","_fetchTriggerUrls","projectId","ops","sourceUrl","find","Promise","resolve","cloudfunctions","listAll","then","functions","httpFunctions","chain","filter","sourceUploadUrl","value","forEach","httpFunc","func","assign","triggerUrl","httpsTrigger","url","printSuccess","op","logSuccess","bold","green","getFunctionLabel","info","getFunctionName","printFail","push","logWarning","yellow","error","code","message","underline","printTooManyOps","consoleUrl","module","exports","context","options","payload","config","has","uploadUrl","appEngineLocation","firebaseConfig","legacySourceUrlTwo","storageBucket","legacySourceUrlOne","functionsInfo","getFunctionsInfo","triggers","map","fn","eventTrigger","schedule","eventType","split","region","funcName","newResource","resource","uploadedNames","functionFilterGroups","getFilterGroups","deleteReleaseNames","existingScheduledFunctions","existingFunctions","pluckName","functionObject","get","existingNames","isScheduled","releaseNames","getReleaseNames","length","logFilters","difference","intersection","functionInfo","functionTrigger","getFunctionTrigger","functionName","getRegion","runtime","runtimeChoice","getDefaultRuntime","logBullet","cyan","getHumanFriendlyRuntimeName","JSON","stringify","retryFunction","create","entryPoint","trigger","labels","availableMemoryMb","timeout","createRes","setIamPolicy","policy","existingFunction","existingEventType","migratingTrigger","match","update","functionsToDelete","sourceArchiveUrl","check","deleteList","join","nonInteractive","force","deleteCommands","next","default","proceed","scheduleName","getScheduleName","topicName","getTopicName","isScheduledFunction","includes","cloudscheduler","deleteJob","catch","err","response","statusCode","status","pubsub","deleteTopic","delete","functionsInDeploy","promiseAllSettled","res","merge","allOps","failedCalls","state","successfulCalls","pollDeploys","sortedFailedDeployments","sort","i","reject"],"mappings":"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","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar _ = require(\"lodash\");\nvar { FirebaseError } = require(\"../../error\");\nvar gcp = require(\"../../gcp\");\nvar logger = require(\"../../logger\");\nvar track = require(\"../../track\");\nvar utils = require(\"../../utils\");\nvar helper = require(\"../../functionsDeployHelper\");\nvar runtimeSelector = require(\"../../runtimeChoiceSelector\");\nvar { getAppEngineLocation } = require(\"../../functionsConfig\");\nvar { promptOnce } = require(\"../../prompt\");\nvar { createOrUpdateSchedulesAndTopics } = require(\"./createOrUpdateSchedulesAndTopics\");\nvar deploymentTool = require(\"../../deploymentTool\");\nvar timings = {};\nvar deployments = [];\nvar failedDeployments = [];\nconst DEFAULT_PUBLIC_POLICY = {\n    version: 3,\n    bindings: [\n        {\n            role: \"roles/cloudfunctions.invoker\",\n            members: [\"allUsers\"],\n        },\n    ],\n};\nfunction _startTimer(name, type) {\n    timings[name] = { type: type, t0: process.hrtime() };\n}\nfunction _endTimer(name) {\n    if (!timings[name]) {\n        logger.debug(\"[functions] no timer initialized for\", name);\n        return;\n    }\n    var duration = process.hrtime(timings[name].t0);\n    track(\"Functions Deploy (Duration)\", timings[name].type, duration[0] * 1000 + Math.round(duration[1] * 1e-6));\n}\nfunction _fetchTriggerUrls(projectId, ops, sourceUrl) {\n    if (!_.find(ops, [\"trigger.httpsTrigger\", {}])) {\n        return Promise.resolve();\n    }\n    return gcp.cloudfunctions.listAll(projectId).then(function (functions) {\n        var httpFunctions = _.chain(functions)\n            .filter({ sourceUploadUrl: sourceUrl })\n            .filter(\"httpsTrigger\")\n            .value();\n        _.forEach(httpFunctions, function (httpFunc) {\n            _.chain(ops)\n                .find({ func: httpFunc.name })\n                .assign({ triggerUrl: httpFunc.httpsTrigger.url })\n                .value();\n        });\n        return Promise.resolve();\n    });\n}\nvar printSuccess = function (op) {\n    _endTimer(op.func);\n    utils.logSuccess(clc.bold.green(\"functions[\" + helper.getFunctionLabel(op.func) + \"]: \") +\n        \"Successful \" +\n        op.type +\n        \" operation. \");\n    if (op.triggerUrl && op.type !== \"delete\") {\n        logger.info(clc.bold(\"Function URL\"), \"(\" + helper.getFunctionName(op.func) + \"):\", op.triggerUrl);\n    }\n};\nvar printFail = function (op) {\n    _endTimer(op.func);\n    failedDeployments.push(helper.getFunctionName(op.func));\n    utils.logWarning(clc.bold.yellow(\"functions[\" + helper.getFunctionLabel(op.func) + \"]: \") + \"Deployment error.\");\n    if (op.error.code === 8) {\n        logger.debug(op.error.message);\n        logger.info(\"You have exceeded your deployment quota, please deploy your functions in batches by using the --only flag, \" +\n            \"and wait a few minutes before deploying again. Go to \" +\n            clc.underline(\"https://firebase.google.com/docs/cli/#deploy_specific_functions\") +\n            \" to learn more.\");\n    }\n    else {\n        logger.info(op.error.message);\n    }\n};\nvar printTooManyOps = function (projectId) {\n    utils.logWarning(clc.bold.yellow(\"functions:\") + \" too many functions are being deployed, cannot poll status.\");\n    logger.info(\"In a few minutes, you can check status at \" + utils.consoleUrl(projectId, \"/functions/logs\"));\n    logger.info(\"You can use the --only flag to deploy only a portion of your functions in the future.\");\n    deployments = [];\n};\nmodule.exports = function (context, options, payload) {\n    if (!options.config.has(\"functions\")) {\n        return Promise.resolve();\n    }\n    var projectId = context.projectId;\n    var sourceUrl = context.uploadUrl;\n    var appEngineLocation = getAppEngineLocation(context.firebaseConfig);\n    var legacySourceUrlTwo = \"gs://\" + \"staging.\" + context.firebaseConfig.storageBucket + \"/firebase-functions-source\";\n    var legacySourceUrlOne = \"gs://\" + projectId + \"-gcf/\" + projectId;\n    var functionsInfo = helper.getFunctionsInfo(payload.functions.triggers, projectId);\n    functionsInfo = functionsInfo.map((fn) => {\n        if (fn.eventTrigger &&\n            fn.schedule &&\n            fn.eventTrigger.eventType === \"google.pubsub.topic.publish\") {\n            const [, , , region, , funcName] = fn.name.split(\"/\");\n            const newResource = `${fn.eventTrigger.resource}/firebase-schedule-${funcName}-${region}`;\n            fn.eventTrigger.resource = newResource;\n        }\n        return fn;\n    });\n    var uploadedNames = _.map(functionsInfo, \"name\");\n    var functionFilterGroups = helper.getFilterGroups(options);\n    var deleteReleaseNames;\n    var existingScheduledFunctions;\n    delete payload.functions;\n    return gcp.cloudfunctions\n        .listAll(projectId)\n        .then(function (existingFunctions) {\n        var pluckName = function (functionObject) {\n            return _.get(functionObject, \"name\");\n        };\n        var existingNames = _.map(existingFunctions, pluckName);\n        var isScheduled = function (functionObject) {\n            return _.get(functionObject, \"labels.deployment-scheduled\") === \"true\";\n        };\n        existingScheduledFunctions = _.chain(existingFunctions)\n            .filter(isScheduled)\n            .map(pluckName)\n            .value();\n        var releaseNames = helper.getReleaseNames(uploadedNames, existingNames, functionFilterGroups);\n        deleteReleaseNames = functionFilterGroups.length > 0 ? releaseNames : existingNames;\n        helper.logFilters(existingNames, releaseNames, functionFilterGroups);\n        _.chain(uploadedNames)\n            .difference(existingNames)\n            .intersection(releaseNames)\n            .forEach(function (name) {\n            var functionInfo = _.find(functionsInfo, { name: name });\n            var functionTrigger = helper.getFunctionTrigger(functionInfo);\n            var functionName = helper.getFunctionName(name);\n            var region = helper.getRegion(name);\n            var runtime = context.runtimeChoice || helper.getDefaultRuntime();\n            utils.logBullet(clc.bold.cyan(\"functions: \") +\n                \"creating \" +\n                runtimeSelector.getHumanFriendlyRuntimeName(runtime) +\n                \" function \" +\n                clc.bold(helper.getFunctionLabel(name)) +\n                \"...\");\n            logger.debug(\"Trigger is: \", JSON.stringify(functionTrigger));\n            var eventType = functionTrigger.eventTrigger\n                ? functionTrigger.eventTrigger.eventType\n                : \"https\";\n            _startTimer(name, \"create\");\n            deployments.push({\n                name: name,\n                retryFunction: () => {\n                    return gcp.cloudfunctions\n                        .create({\n                        projectId: projectId,\n                        region: region,\n                        eventType: eventType,\n                        functionName: functionName,\n                        entryPoint: functionInfo.entryPoint,\n                        trigger: functionTrigger,\n                        labels: _.assign({}, deploymentTool.labels, functionInfo.labels),\n                        sourceUploadUrl: sourceUrl,\n                        runtime: runtime,\n                        availableMemoryMb: functionInfo.availableMemoryMb,\n                        timeout: functionInfo.timeout,\n                    })\n                        .then((createRes) => {\n                        if (_.has(functionTrigger, \"httpsTrigger\")) {\n                            logger.debug(`Setting public policy for function ${functionName}`);\n                            return gcp.cloudfunctions\n                                .setIamPolicy({\n                                functionName,\n                                projectId,\n                                region,\n                                policy: DEFAULT_PUBLIC_POLICY,\n                            })\n                                .then(() => {\n                                return createRes;\n                            });\n                        }\n                        return createRes;\n                    });\n                },\n                trigger: functionTrigger,\n            });\n        })\n            .value();\n        _.chain(uploadedNames)\n            .intersection(existingNames)\n            .intersection(releaseNames)\n            .forEach(function (name) {\n            var functionInfo = _.find(functionsInfo, { name: name });\n            var functionTrigger = helper.getFunctionTrigger(functionInfo);\n            var functionName = helper.getFunctionName(name);\n            var region = helper.getRegion(name);\n            var eventType = functionTrigger.eventTrigger\n                ? functionTrigger.eventTrigger.eventType\n                : \"https\";\n            var existingFunction = _.find(existingFunctions, {\n                name: name,\n            });\n            var existingEventType = _.get(existingFunction, \"eventTrigger.eventType\");\n            var migratingTrigger = false;\n            if (eventType.match(/google.storage.object./) &&\n                existingEventType === \"providers/cloud.storage/eventTypes/object.change\") {\n                migratingTrigger = true;\n            }\n            else if (eventType === \"google.pubsub.topic.publish\" &&\n                existingEventType === \"providers/cloud.pubsub/eventTypes/topic.publish\") {\n                migratingTrigger = true;\n            }\n            if (migratingTrigger) {\n                throw new FirebaseError(\"Function \" +\n                    clc.bold(functionName) +\n                    \" was deployed using a legacy trigger type and cannot be updated without deleting \" +\n                    \"the previous function. Follow the instructions on \" +\n                    clc.underline(\"https://firebase.google.com/docs/functions/manage-functions#modify-trigger\") +\n                    \" for how to change the trigger without losing events.\\n\");\n            }\n            else {\n                var options = {\n                    projectId: projectId,\n                    region: region,\n                    functionName: functionName,\n                    trigger: functionTrigger,\n                    sourceUploadUrl: sourceUrl,\n                    labels: _.assign({}, deploymentTool.labels, functionInfo.labels),\n                    availableMemoryMb: functionInfo.availableMemoryMb,\n                    timeout: functionInfo.timeout,\n                };\n                if (context.runtimeChoice) {\n                    options.runtime = context.runtimeChoice;\n                }\n                var runtime = options.runtime || _.get(existingFunction, \"runtime\", \"nodejs6\");\n                utils.logBullet(clc.bold.cyan(\"functions: \") +\n                    \"updating \" +\n                    runtimeSelector.getHumanFriendlyRuntimeName(runtime) +\n                    \" function \" +\n                    clc.bold(helper.getFunctionLabel(name)) +\n                    \"...\");\n                logger.debug(\"Trigger is: \", JSON.stringify(functionTrigger));\n                _startTimer(name, \"update\");\n                deployments.push({\n                    name: name,\n                    retryFunction: function () {\n                        return gcp.cloudfunctions.update(options);\n                    },\n                    trigger: functionTrigger,\n                });\n            }\n        })\n            .value();\n        var functionsToDelete = _.chain(existingFunctions)\n            .filter(function (functionInfo) {\n            if (typeof functionInfo.labels === \"undefined\") {\n                return (functionInfo.sourceArchiveUrl === legacySourceUrlOne ||\n                    functionInfo.sourceArchiveUrl === legacySourceUrlTwo);\n            }\n            return deploymentTool.check(functionInfo.labels);\n        })\n            .map(pluckName)\n            .difference(uploadedNames)\n            .intersection(deleteReleaseNames)\n            .value();\n        if (functionsToDelete.length === 0) {\n            return Promise.resolve();\n        }\n        var deleteList = _.map(functionsToDelete, function (func) {\n            return \"\\t\" + helper.getFunctionLabel(func);\n        }).join(\"\\n\");\n        if (options.nonInteractive && !options.force) {\n            var deleteCommands = _.map(functionsToDelete, function (func) {\n                return (\"\\tfirebase functions:delete \" +\n                    helper.getFunctionName(func) +\n                    \" --region \" +\n                    helper.getRegion(func));\n            }).join(\"\\n\");\n            throw new FirebaseError(\"The following functions are found in your project but do not exist in your local source code:\\n\" +\n                deleteList +\n                \"\\n\\nAborting because deletion cannot proceed in non-interactive mode. To fix, manually delete the functions by running:\\n\" +\n                clc.bold(deleteCommands));\n        }\n        else if (!options.force) {\n            logger.info(\"\\nThe following functions are found in your project but do not exist in your local source code:\\n\" +\n                deleteList +\n                \"\\n\\nIf you are renaming a function or changing its region, it is recommended that you create the new \" +\n                \"function first before deleting the old one to prevent event loss. For more info, visit \" +\n                clc.underline(\"https://firebase.google.com/docs/functions/manage-functions#modify\" + \"\\n\"));\n        }\n        const next = options.force\n            ? Promise.resolve(true)\n            : promptOnce({\n                type: \"confirm\",\n                name: \"confirm\",\n                default: false,\n                message: \"Would you like to proceed with deletion? Selecting no will continue the rest of the deployments.\",\n            });\n        return next.then(function (proceed) {\n            if (!proceed) {\n                if (deployments.length !== 0) {\n                    utils.logBullet(clc.bold.cyan(\"functions: \") + \"continuing with other deployments.\");\n                }\n                return;\n            }\n            functionsToDelete.forEach(function (name) {\n                var functionName = helper.getFunctionName(name);\n                var scheduleName = helper.getScheduleName(name, appEngineLocation);\n                var topicName = helper.getTopicName(name);\n                var region = helper.getRegion(name);\n                utils.logBullet(clc.bold.cyan(\"functions: \") +\n                    \"deleting function \" +\n                    clc.bold(helper.getFunctionLabel(name)) +\n                    \"...\");\n                _startTimer(name, \"delete\");\n                var retryFunction;\n                var isScheduledFunction = _.includes(existingScheduledFunctions, name);\n                if (isScheduledFunction) {\n                    retryFunction = function () {\n                        return gcp.cloudscheduler\n                            .deleteJob(scheduleName)\n                            .catch((err) => {\n                            logger.debug(err);\n                            if (err.context.response.statusCode != 404 &&\n                                err.context.response.statusCode != 403) {\n                                throw new FirebaseError(`Failed to delete schedule for ${functionName} with status ${err.status}`, err);\n                            }\n                        })\n                            .then(() => {\n                            return gcp.pubsub.deleteTopic(topicName);\n                        })\n                            .catch((err) => {\n                            if (err.context.response.statusCode != 404 &&\n                                err.context.response.statusCode != 403) {\n                                throw new FirebaseError(`Failed to delete topic for ${functionName} with status ${err.status}`, err);\n                            }\n                        })\n                            .then(() => {\n                            return gcp.cloudfunctions.delete({\n                                projectId: projectId,\n                                region: region,\n                                functionName: functionName,\n                            });\n                        });\n                    };\n                }\n                else {\n                    retryFunction = function () {\n                        return gcp.cloudfunctions.delete({\n                            projectId: projectId,\n                            region: region,\n                            functionName: functionName,\n                        });\n                    };\n                }\n                deployments.push({\n                    name: name,\n                    retryFunction: retryFunction,\n                });\n            });\n        });\n    })\n        .then(function () {\n        var functionsInDeploy = functionsInfo.filter((trigger) => {\n            return functionFilterGroups.length > 0\n                ? _.includes(deleteReleaseNames, trigger.name)\n                : true;\n        });\n        return createOrUpdateSchedulesAndTopics(context.projectId, functionsInDeploy, existingScheduledFunctions, appEngineLocation);\n    })\n        .then(function () {\n        return utils.promiseAllSettled(_.map(deployments, function (op) {\n            return op.retryFunction().then(function (res) {\n                return _.merge(op, res);\n            });\n        }));\n    })\n        .then(function (allOps) {\n        var failedCalls = _.chain(allOps)\n            .filter({ state: \"rejected\" })\n            .map(\"reason\")\n            .value();\n        var successfulCalls = _.chain(allOps)\n            .filter({ state: \"fulfilled\" })\n            .map(\"value\")\n            .value();\n        failedDeployments = failedCalls.map((error) => _.get(error, \"context.function\", \"\"));\n        return _fetchTriggerUrls(projectId, successfulCalls, sourceUrl)\n            .then(function () {\n            return helper.pollDeploys(successfulCalls, printSuccess, printFail, printTooManyOps, projectId);\n        })\n            .then(() => {\n            if (deployments.length > 0) {\n                track(\"Functions Deploy (Result)\", \"failure\", failedDeployments.length);\n                track(\"Functions Deploy (Result)\", \"success\", deployments.length - failedDeployments.length);\n            }\n            if (failedDeployments.length > 0) {\n                logger.info(\"\\n\\nFunctions deploy had errors with the following functions:\");\n                const sortedFailedDeployments = failedDeployments.sort();\n                for (let i = 0; i < sortedFailedDeployments.length; i++) {\n                    logger.info(`\\t${sortedFailedDeployments[i]}`);\n                }\n                logger.info(\"\\n\\nTo try redeploying those functions, run:\");\n                logger.info(\"    \" +\n                    clc.bold(\"firebase deploy --only \") +\n                    clc.bold(sortedFailedDeployments.map((name) => `functions:${name}`).join(\",\")));\n                logger.info(\"\\n\\nTo continue deploying other features (such as database), run:\");\n                logger.info(\"    \" + clc.bold(\"firebase deploy --except functions\"));\n                return Promise.reject(new FirebaseError(\"Functions did not deploy properly.\"));\n            }\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"script"}