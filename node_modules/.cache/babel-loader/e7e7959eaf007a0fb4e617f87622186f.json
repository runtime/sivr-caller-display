{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst path = require(\"path\");\n\nconst clc = require(\"cli-color\");\n\nconst dotenv = require(\"dotenv\");\n\nconst fs = require(\"fs-extra\");\n\nconst error_1 = require(\"../error\");\n\nconst logger = require(\"../logger\");\n\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\n\nconst askUserForParam = require(\"./askUserForParam\");\n\nconst track = require(\"../track\");\n\nfunction setNewDefaults(params, newDefaults) {\n  params.forEach(param => {\n    if (newDefaults[param.param.toUpperCase()]) {\n      param.default = newDefaults[param.param.toUpperCase()];\n    }\n  });\n  return params;\n}\n\nfunction getParamsWithCurrentValuesAsDefaults(extensionInstance) {\n  const specParams = _.cloneDeep(_.get(extensionInstance, \"config.source.spec.params\", []));\n\n  const currentParams = _.cloneDeep(_.get(extensionInstance, \"config.params\", {}));\n\n  return setNewDefaults(specParams, currentParams);\n}\n\nexports.getParamsWithCurrentValuesAsDefaults = getParamsWithCurrentValuesAsDefaults;\n\nfunction getParams(projectId, paramSpecs, envFilePath) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let commandLineParams;\n\n    if (envFilePath) {\n      try {\n        const buf = fs.readFileSync(path.resolve(envFilePath));\n        commandLineParams = dotenv.parse(buf.toString().trim(), {\n          debug: true\n        });\n        track(\"Extension Env File\", \"Present\");\n      } catch (err) {\n        track(\"Extension Env File\", \"Invalid\");\n        throw new error_1.FirebaseError(`Error reading env file: ${err.message}\\n`, {\n          original: err\n        });\n      }\n    } else {\n      track(\"Extension Env File\", \"Not Present\");\n    }\n\n    const firebaseProjectParams = yield extensionsHelper_1.getFirebaseProjectParams(projectId);\n    let params;\n\n    if (commandLineParams) {\n      params = extensionsHelper_1.populateDefaultParams(commandLineParams, paramSpecs);\n      extensionsHelper_1.validateCommandLineParams(params, paramSpecs);\n    } else {\n      params = yield askUserForParam.ask(paramSpecs, firebaseProjectParams);\n    }\n\n    track(\"Extension Params\", _.isEmpty(params) ? \"Not Present\" : \"Present\", _.size(params));\n    return params;\n  });\n}\n\nexports.getParams = getParams;\n\nfunction promptForNewParams(spec, newSpec, currentParams, projectId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const firebaseProjectParams = yield extensionsHelper_1.getFirebaseProjectParams(projectId);\n\n    const comparer = (param1, param2) => {\n      return param1.type === param2.type && param1.param === param2.param;\n    };\n\n    let paramsDiffDeletions = _.differenceWith(spec.params, _.get(newSpec, \"params\", []), comparer);\n\n    paramsDiffDeletions = extensionsHelper_1.substituteParams(paramsDiffDeletions, firebaseProjectParams);\n\n    let paramsDiffAdditions = _.differenceWith(newSpec.params, _.get(spec, \"params\", []), comparer);\n\n    paramsDiffAdditions = extensionsHelper_1.substituteParams(paramsDiffAdditions, firebaseProjectParams);\n\n    if (paramsDiffDeletions.length) {\n      logger.info(\"The following params will no longer be used:\");\n      paramsDiffDeletions.forEach(param => {\n        logger.info(clc.red(`- ${param.param}: ${currentParams[param.param.toUpperCase()]}`));\n        delete currentParams[param.param.toUpperCase()];\n      });\n    }\n\n    if (paramsDiffAdditions.length) {\n      logger.info(\"Please configure the following new params:\");\n\n      for (const param of paramsDiffAdditions) {\n        const chosenValue = yield askUserForParam.askForParam(param);\n        currentParams[param.param] = chosenValue;\n      }\n    }\n\n    return currentParams;\n  });\n}\n\nexports.promptForNewParams = promptForNewParams;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/extensions/paramHelper.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","path","clc","dotenv","fs","error_1","logger","extensionsHelper_1","askUserForParam","track","setNewDefaults","params","newDefaults","forEach","param","toUpperCase","default","getParamsWithCurrentValuesAsDefaults","extensionInstance","specParams","cloneDeep","get","currentParams","getParams","projectId","paramSpecs","envFilePath","commandLineParams","buf","readFileSync","parse","toString","trim","debug","err","FirebaseError","message","original","firebaseProjectParams","getFirebaseProjectParams","populateDefaultParams","validateCommandLineParams","ask","isEmpty","size","promptForNewParams","spec","newSpec","comparer","param1","param2","type","paramsDiffDeletions","differenceWith","substituteParams","paramsDiffAdditions","length","info","red","chosenValue","askForParam"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst path = require(\"path\");\nconst clc = require(\"cli-color\");\nconst dotenv = require(\"dotenv\");\nconst fs = require(\"fs-extra\");\nconst error_1 = require(\"../error\");\nconst logger = require(\"../logger\");\nconst extensionsHelper_1 = require(\"./extensionsHelper\");\nconst askUserForParam = require(\"./askUserForParam\");\nconst track = require(\"../track\");\nfunction setNewDefaults(params, newDefaults) {\n    params.forEach((param) => {\n        if (newDefaults[param.param.toUpperCase()]) {\n            param.default = newDefaults[param.param.toUpperCase()];\n        }\n    });\n    return params;\n}\nfunction getParamsWithCurrentValuesAsDefaults(extensionInstance) {\n    const specParams = _.cloneDeep(_.get(extensionInstance, \"config.source.spec.params\", []));\n    const currentParams = _.cloneDeep(_.get(extensionInstance, \"config.params\", {}));\n    return setNewDefaults(specParams, currentParams);\n}\nexports.getParamsWithCurrentValuesAsDefaults = getParamsWithCurrentValuesAsDefaults;\nfunction getParams(projectId, paramSpecs, envFilePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let commandLineParams;\n        if (envFilePath) {\n            try {\n                const buf = fs.readFileSync(path.resolve(envFilePath));\n                commandLineParams = dotenv.parse(buf.toString().trim(), { debug: true });\n                track(\"Extension Env File\", \"Present\");\n            }\n            catch (err) {\n                track(\"Extension Env File\", \"Invalid\");\n                throw new error_1.FirebaseError(`Error reading env file: ${err.message}\\n`, { original: err });\n            }\n        }\n        else {\n            track(\"Extension Env File\", \"Not Present\");\n        }\n        const firebaseProjectParams = yield extensionsHelper_1.getFirebaseProjectParams(projectId);\n        let params;\n        if (commandLineParams) {\n            params = extensionsHelper_1.populateDefaultParams(commandLineParams, paramSpecs);\n            extensionsHelper_1.validateCommandLineParams(params, paramSpecs);\n        }\n        else {\n            params = yield askUserForParam.ask(paramSpecs, firebaseProjectParams);\n        }\n        track(\"Extension Params\", _.isEmpty(params) ? \"Not Present\" : \"Present\", _.size(params));\n        return params;\n    });\n}\nexports.getParams = getParams;\nfunction promptForNewParams(spec, newSpec, currentParams, projectId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const firebaseProjectParams = yield extensionsHelper_1.getFirebaseProjectParams(projectId);\n        const comparer = (param1, param2) => {\n            return param1.type === param2.type && param1.param === param2.param;\n        };\n        let paramsDiffDeletions = _.differenceWith(spec.params, _.get(newSpec, \"params\", []), comparer);\n        paramsDiffDeletions = extensionsHelper_1.substituteParams(paramsDiffDeletions, firebaseProjectParams);\n        let paramsDiffAdditions = _.differenceWith(newSpec.params, _.get(spec, \"params\", []), comparer);\n        paramsDiffAdditions = extensionsHelper_1.substituteParams(paramsDiffAdditions, firebaseProjectParams);\n        if (paramsDiffDeletions.length) {\n            logger.info(\"The following params will no longer be used:\");\n            paramsDiffDeletions.forEach((param) => {\n                logger.info(clc.red(`- ${param.param}: ${currentParams[param.param.toUpperCase()]}`));\n                delete currentParams[param.param.toUpperCase()];\n            });\n        }\n        if (paramsDiffAdditions.length) {\n            logger.info(\"Please configure the following new params:\");\n            for (const param of paramsDiffAdditions) {\n                const chosenValue = yield askUserForParam.askForParam(param);\n                currentParams[param.param] = chosenValue;\n            }\n        }\n        return currentParams;\n    });\n}\nexports.promptForNewParams = promptForNewParams;\n"]},"metadata":{},"sourceType":"script"}