{"ast":null,"code":"\"use strict\";\n\nconst winston = require(\"winston\");\n\nfunction expandErrors(logger) {\n  const oldLogFunc = logger.log;\n\n  logger.log = function (...logArgs) {\n    const args = logArgs.slice(0);\n\n    if (args.length >= 2 && args[1] instanceof Error) {\n      args[1] = args[1].stack;\n    }\n\n    return oldLogFunc.apply(this, args);\n  };\n\n  return logger;\n}\n\nconst logger = expandErrors(new winston.Logger());\nconst debug = logger.debug;\n\nlogger.debug = function (...args) {\n  args[0] = \"[\" + new Date().toISOString() + \"] \" + (args[0] || \"\");\n  debug(...args);\n};\n\nlogger.exitOnError = false;\nmodule.exports = logger;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/logger.js"],"names":["winston","require","expandErrors","logger","oldLogFunc","log","logArgs","args","slice","length","Error","stack","apply","Logger","debug","Date","toISOString","exitOnError","module","exports"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,QAAMC,UAAU,GAAGD,MAAM,CAACE,GAA1B;;AACAF,EAAAA,MAAM,CAACE,GAAP,GAAa,UAAU,GAAGC,OAAb,EAAsB;AAC/B,UAAMC,IAAI,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAb;;AACA,QAAID,IAAI,CAACE,MAAL,IAAe,CAAf,IAAoBF,IAAI,CAAC,CAAD,CAAJ,YAAmBG,KAA3C,EAAkD;AAC9CH,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,CAAQI,KAAlB;AACH;;AACD,WAAOP,UAAU,CAACQ,KAAX,CAAiB,IAAjB,EAAuBL,IAAvB,CAAP;AACH,GAND;;AAOA,SAAOJ,MAAP;AACH;;AACD,MAAMA,MAAM,GAAGD,YAAY,CAAC,IAAIF,OAAO,CAACa,MAAZ,EAAD,CAA3B;AACA,MAAMC,KAAK,GAAGX,MAAM,CAACW,KAArB;;AACAX,MAAM,CAACW,KAAP,GAAe,UAAU,GAAGP,IAAb,EAAmB;AAC9BA,EAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,MAAM,IAAIQ,IAAJ,GAAWC,WAAX,EAAN,GAAiC,IAAjC,IAAyCT,IAAI,CAAC,CAAD,CAAJ,IAAW,EAApD,CAAV;AACAO,EAAAA,KAAK,CAAC,GAAGP,IAAJ,CAAL;AACH,CAHD;;AAIAJ,MAAM,CAACc,WAAP,GAAqB,KAArB;AACAC,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["\"use strict\";\nconst winston = require(\"winston\");\nfunction expandErrors(logger) {\n    const oldLogFunc = logger.log;\n    logger.log = function (...logArgs) {\n        const args = logArgs.slice(0);\n        if (args.length >= 2 && args[1] instanceof Error) {\n            args[1] = args[1].stack;\n        }\n        return oldLogFunc.apply(this, args);\n    };\n    return logger;\n}\nconst logger = expandErrors(new winston.Logger());\nconst debug = logger.debug;\nlogger.debug = function (...args) {\n    args[0] = \"[\" + new Date().toISOString() + \"] \" + (args[0] || \"\");\n    debug(...args);\n};\nlogger.exitOnError = false;\nmodule.exports = logger;\n"]},"metadata":{},"sourceType":"script"}