{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar clc = require(\"cli-color\");\n\nvar fs = require(\"fs\");\n\nvar jwt = require(\"jsonwebtoken\");\n\nvar http = require(\"http\");\n\nvar opn = require(\"open\");\n\nvar path = require(\"path\");\n\nvar portfinder = require(\"portfinder\");\n\nvar url = require(\"url\");\n\nvar api = require(\"./api\");\n\nvar configstore = require(\"./configstore\");\n\nvar _require = require(\"./error\"),\n    FirebaseError = _require.FirebaseError;\n\nvar logger = require(\"./logger\");\n\nvar _require2 = require(\"./prompt\"),\n    prompt = _require2.prompt;\n\nvar scopes = require(\"./scopes\");\n\nportfinder.basePort = 9005;\n\nvar open = function (url) {\n  opn(url).catch(function (err) {\n    logger.debug(\"Unable to open URL: \" + err.stack);\n  });\n};\n\nvar INVALID_CREDENTIAL_ERROR = new FirebaseError(\"Authentication Error: Your credentials are no longer valid. Please run \" + clc.bold(\"firebase login --reauth\") + \"\\n\\n\" + \"For CI servers and headless environments, generate a new token with \" + clc.bold(\"firebase login:ci\"), {\n  exit: 1\n});\nvar FIFTEEN_MINUTES_IN_MS = 15 * 60 * 1000;\nvar SCOPES = [scopes.EMAIL, scopes.OPENID, scopes.CLOUD_PROJECTS_READONLY, scopes.FIREBASE_PLATFORM, scopes.CLOUD_PLATFORM];\n\nvar _nonce = _.random(1, 2 << 29).toString();\n\nvar _getPort = portfinder.getPortPromise;\nvar lastAccessToken = {};\n\nvar _getCallbackUrl = function (port) {\n  if (_.isUndefined(port)) {\n    return \"urn:ietf:wg:oauth:2.0:oob\";\n  }\n\n  return \"http://localhost:\" + port;\n};\n\nvar _getLoginUrl = function (callbackUrl) {\n  return api.authOrigin + \"/o/oauth2/auth?\" + _.map({\n    client_id: api.clientId,\n    scope: SCOPES.join(\" \"),\n    response_type: \"code\",\n    state: _nonce,\n    redirect_uri: callbackUrl\n  }, function (v, k) {\n    return k + \"=\" + encodeURIComponent(v);\n  }).join(\"&\");\n};\n\nvar _getTokensFromAuthorizationCode = function (code, callbackUrl) {\n  return api.request(\"POST\", \"/o/oauth2/token\", {\n    origin: api.authOrigin,\n    form: {\n      code: code,\n      client_id: api.clientId,\n      client_secret: api.clientSecret,\n      redirect_uri: callbackUrl,\n      grant_type: \"authorization_code\"\n    }\n  }).then(function (res) {\n    if (!_.has(res, \"body.access_token\") && !_.has(res, \"body.refresh_token\")) {\n      logger.debug(\"Token Fetch Error:\", res.statusCode, res.body);\n      throw INVALID_CREDENTIAL_ERROR;\n    }\n\n    lastAccessToken = _.assign({\n      expires_at: Date.now() + res.body.expires_in * 1000\n    }, res.body);\n    return lastAccessToken;\n  }, function (err) {\n    logger.debug(\"Token Fetch Error:\", err.stack);\n    throw INVALID_CREDENTIAL_ERROR;\n  });\n};\n\nvar _respondWithFile = function (req, res, statusCode, filename) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(path.join(__dirname, filename), function (err, response) {\n      if (err) {\n        return reject(err);\n      }\n\n      res.writeHead(statusCode, {\n        \"Content-Length\": response.length,\n        \"Content-Type\": \"text/html\"\n      });\n      res.end(response);\n      req.socket.destroy();\n      return resolve();\n    });\n  });\n};\n\nvar _loginWithoutLocalhost = function () {\n  var callbackUrl = _getCallbackUrl();\n\n  var authUrl = _getLoginUrl(callbackUrl);\n\n  logger.info();\n  logger.info(\"Visit this URL on any device to log in:\");\n  logger.info(clc.bold.underline(authUrl));\n  logger.info();\n  open(authUrl);\n  return prompt({}, [{\n    type: \"input\",\n    name: \"code\",\n    message: \"Paste authorization code here:\"\n  }]).then(function (answers) {\n    return _getTokensFromAuthorizationCode(answers.code, callbackUrl);\n  }).then(function (tokens) {\n    return {\n      user: jwt.decode(tokens.id_token),\n      tokens: tokens,\n      scopes: SCOPES\n    };\n  });\n};\n\nvar _loginWithLocalhost = function (port) {\n  return new Promise(function (resolve, reject) {\n    var callbackUrl = _getCallbackUrl(port);\n\n    var authUrl = _getLoginUrl(callbackUrl);\n\n    var server = http.createServer(function (req, res) {\n      var tokens;\n\n      var query = _.get(url.parse(req.url, true), \"query\", {});\n\n      if (query.state === _nonce && _.isString(query.code)) {\n        return _getTokensFromAuthorizationCode(query.code, callbackUrl).then(function (result) {\n          tokens = result;\n          return _respondWithFile(req, res, 200, \"../templates/loginSuccess.html\");\n        }).then(function () {\n          server.close();\n          return resolve({\n            user: jwt.decode(tokens.id_token),\n            tokens: tokens\n          });\n        }).catch(function () {\n          return _respondWithFile(req, res, 400, \"../templates/loginFailure.html\");\n        });\n      }\n\n      _respondWithFile(req, res, 400, \"../templates/loginFailure.html\");\n    });\n    server.listen(port, function () {\n      logger.info();\n      logger.info(\"Visit this URL on this device to log in:\");\n      logger.info(clc.bold.underline(authUrl));\n      logger.info();\n      logger.info(\"Waiting for authentication...\");\n      open(authUrl);\n    });\n    server.on(\"error\", function () {\n      _loginWithoutLocalhost().then(resolve, reject);\n    });\n  });\n};\n\nvar login = function (localhost) {\n  if (localhost) {\n    return _getPort().then(_loginWithLocalhost, _loginWithoutLocalhost);\n  }\n\n  return _loginWithoutLocalhost();\n};\n\nvar _haveValidAccessToken = function (refreshToken, authScopes) {\n  if (_.isEmpty(lastAccessToken)) {\n    var tokens = configstore.get(\"tokens\");\n\n    if (refreshToken === _.get(tokens, \"refresh_token\")) {\n      lastAccessToken = tokens;\n    }\n  }\n\n  return _.has(lastAccessToken, \"access_token\") && lastAccessToken.refresh_token === refreshToken && _.isEqual(authScopes.sort(), (lastAccessToken.scopes || []).sort()) && _.has(lastAccessToken, \"expires_at\") && lastAccessToken.expires_at > Date.now() + FIFTEEN_MINUTES_IN_MS;\n};\n\nvar _logoutCurrentSession = function (refreshToken) {\n  var tokens = configstore.get(\"tokens\");\n\n  var currentToken = _.get(tokens, \"refresh_token\");\n\n  if (refreshToken === currentToken) {\n    configstore.del(\"user\");\n    configstore.del(\"tokens\");\n    configstore.del(\"usage\");\n    configstore.del(\"analytics-uuid\");\n  }\n};\n\nvar _refreshAccessToken = function (refreshToken, authScopes) {\n  logger.debug(\"> refreshing access token with scopes:\", JSON.stringify(authScopes));\n  return api.request(\"POST\", \"/oauth2/v3/token\", {\n    origin: api.googleOrigin,\n    form: {\n      refresh_token: refreshToken,\n      client_id: api.clientId,\n      client_secret: api.clientSecret,\n      grant_type: \"refresh_token\",\n      scope: (authScopes || []).join(\" \")\n    },\n    logOptions: {\n      skipRequestBody: true,\n      skipQueryParams: true,\n      skipResponseBody: true\n    }\n  }).then(function (res) {\n    if (res.status === 401 || res.status === 400) {\n      return {\n        access_token: refreshToken\n      };\n    }\n\n    if (!_.isString(res.body.access_token)) {\n      throw INVALID_CREDENTIAL_ERROR;\n    }\n\n    lastAccessToken = _.assign({\n      expires_at: Date.now() + res.body.expires_in * 1000,\n      refresh_token: refreshToken,\n      scopes: authScopes\n    }, res.body);\n\n    var currentRefreshToken = _.get(configstore.get(\"tokens\"), \"refresh_token\");\n\n    if (refreshToken === currentRefreshToken) {\n      configstore.set(\"tokens\", lastAccessToken);\n    }\n\n    return lastAccessToken;\n  }, function (err) {\n    if (_.get(err, \"context.body.error\") === \"invalid_scope\") {\n      throw new FirebaseError(\"This command requires new authorization scopes not granted to your current session. Please run \" + clc.bold(\"firebase login --reauth\") + \"\\n\\n\" + \"For CI servers and headless environments, generate a new token with \" + clc.bold(\"firebase login:ci\"), {\n        exit: 1\n      });\n    }\n\n    throw INVALID_CREDENTIAL_ERROR;\n  });\n};\n\nvar getAccessToken = function (refreshToken, authScopes) {\n  if (_haveValidAccessToken(refreshToken, authScopes)) {\n    return Promise.resolve(lastAccessToken);\n  }\n\n  return _refreshAccessToken(refreshToken, authScopes);\n};\n\nvar logout = function (refreshToken) {\n  if (lastAccessToken.refresh_token === refreshToken) {\n    lastAccessToken = {};\n  }\n\n  _logoutCurrentSession(refreshToken);\n\n  return api.request(\"GET\", \"/o/oauth2/revoke\", {\n    origin: api.authOrigin,\n    data: {\n      token: refreshToken\n    }\n  }, function () {\n    throw new FirebaseError(\"Authentication Error.\", {\n      exit: 1\n    });\n  });\n};\n\nvar auth = {\n  login: login,\n  getAccessToken: getAccessToken,\n  logout: logout\n};\nmodule.exports = auth;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/auth.js"],"names":["_","require","clc","fs","jwt","http","opn","path","portfinder","url","api","configstore","FirebaseError","logger","prompt","scopes","basePort","open","catch","err","debug","stack","INVALID_CREDENTIAL_ERROR","bold","exit","FIFTEEN_MINUTES_IN_MS","SCOPES","EMAIL","OPENID","CLOUD_PROJECTS_READONLY","FIREBASE_PLATFORM","CLOUD_PLATFORM","_nonce","random","toString","_getPort","getPortPromise","lastAccessToken","_getCallbackUrl","port","isUndefined","_getLoginUrl","callbackUrl","authOrigin","map","client_id","clientId","scope","join","response_type","state","redirect_uri","v","k","encodeURIComponent","_getTokensFromAuthorizationCode","code","request","origin","form","client_secret","clientSecret","grant_type","then","res","has","statusCode","body","assign","expires_at","Date","now","expires_in","_respondWithFile","req","filename","Promise","resolve","reject","readFile","__dirname","response","writeHead","length","end","socket","destroy","_loginWithoutLocalhost","authUrl","info","underline","type","name","message","answers","tokens","user","decode","id_token","_loginWithLocalhost","server","createServer","query","get","parse","isString","result","close","listen","on","login","localhost","_haveValidAccessToken","refreshToken","authScopes","isEmpty","refresh_token","isEqual","sort","_logoutCurrentSession","currentToken","del","_refreshAccessToken","JSON","stringify","googleOrigin","logOptions","skipRequestBody","skipQueryParams","skipResponseBody","status","access_token","currentRefreshToken","set","getAccessToken","logout","data","token","auth","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar clc = require(\"cli-color\");\nvar fs = require(\"fs\");\nvar jwt = require(\"jsonwebtoken\");\nvar http = require(\"http\");\nvar opn = require(\"open\");\nvar path = require(\"path\");\nvar portfinder = require(\"portfinder\");\nvar url = require(\"url\");\nvar api = require(\"./api\");\nvar configstore = require(\"./configstore\");\nvar { FirebaseError } = require(\"./error\");\nvar logger = require(\"./logger\");\nvar { prompt } = require(\"./prompt\");\nvar scopes = require(\"./scopes\");\nportfinder.basePort = 9005;\nvar open = function (url) {\n    opn(url).catch(function (err) {\n        logger.debug(\"Unable to open URL: \" + err.stack);\n    });\n};\nvar INVALID_CREDENTIAL_ERROR = new FirebaseError(\"Authentication Error: Your credentials are no longer valid. Please run \" +\n    clc.bold(\"firebase login --reauth\") +\n    \"\\n\\n\" +\n    \"For CI servers and headless environments, generate a new token with \" +\n    clc.bold(\"firebase login:ci\"), { exit: 1 });\nvar FIFTEEN_MINUTES_IN_MS = 15 * 60 * 1000;\nvar SCOPES = [\n    scopes.EMAIL,\n    scopes.OPENID,\n    scopes.CLOUD_PROJECTS_READONLY,\n    scopes.FIREBASE_PLATFORM,\n    scopes.CLOUD_PLATFORM,\n];\nvar _nonce = _.random(1, 2 << 29).toString();\nvar _getPort = portfinder.getPortPromise;\nvar lastAccessToken = {};\nvar _getCallbackUrl = function (port) {\n    if (_.isUndefined(port)) {\n        return \"urn:ietf:wg:oauth:2.0:oob\";\n    }\n    return \"http://localhost:\" + port;\n};\nvar _getLoginUrl = function (callbackUrl) {\n    return (api.authOrigin +\n        \"/o/oauth2/auth?\" +\n        _.map({\n            client_id: api.clientId,\n            scope: SCOPES.join(\" \"),\n            response_type: \"code\",\n            state: _nonce,\n            redirect_uri: callbackUrl,\n        }, function (v, k) {\n            return k + \"=\" + encodeURIComponent(v);\n        }).join(\"&\"));\n};\nvar _getTokensFromAuthorizationCode = function (code, callbackUrl) {\n    return api\n        .request(\"POST\", \"/o/oauth2/token\", {\n        origin: api.authOrigin,\n        form: {\n            code: code,\n            client_id: api.clientId,\n            client_secret: api.clientSecret,\n            redirect_uri: callbackUrl,\n            grant_type: \"authorization_code\",\n        },\n    })\n        .then(function (res) {\n        if (!_.has(res, \"body.access_token\") && !_.has(res, \"body.refresh_token\")) {\n            logger.debug(\"Token Fetch Error:\", res.statusCode, res.body);\n            throw INVALID_CREDENTIAL_ERROR;\n        }\n        lastAccessToken = _.assign({\n            expires_at: Date.now() + res.body.expires_in * 1000,\n        }, res.body);\n        return lastAccessToken;\n    }, function (err) {\n        logger.debug(\"Token Fetch Error:\", err.stack);\n        throw INVALID_CREDENTIAL_ERROR;\n    });\n};\nvar _respondWithFile = function (req, res, statusCode, filename) {\n    return new Promise(function (resolve, reject) {\n        fs.readFile(path.join(__dirname, filename), function (err, response) {\n            if (err) {\n                return reject(err);\n            }\n            res.writeHead(statusCode, {\n                \"Content-Length\": response.length,\n                \"Content-Type\": \"text/html\",\n            });\n            res.end(response);\n            req.socket.destroy();\n            return resolve();\n        });\n    });\n};\nvar _loginWithoutLocalhost = function () {\n    var callbackUrl = _getCallbackUrl();\n    var authUrl = _getLoginUrl(callbackUrl);\n    logger.info();\n    logger.info(\"Visit this URL on any device to log in:\");\n    logger.info(clc.bold.underline(authUrl));\n    logger.info();\n    open(authUrl);\n    return prompt({}, [\n        {\n            type: \"input\",\n            name: \"code\",\n            message: \"Paste authorization code here:\",\n        },\n    ])\n        .then(function (answers) {\n        return _getTokensFromAuthorizationCode(answers.code, callbackUrl);\n    })\n        .then(function (tokens) {\n        return {\n            user: jwt.decode(tokens.id_token),\n            tokens: tokens,\n            scopes: SCOPES,\n        };\n    });\n};\nvar _loginWithLocalhost = function (port) {\n    return new Promise(function (resolve, reject) {\n        var callbackUrl = _getCallbackUrl(port);\n        var authUrl = _getLoginUrl(callbackUrl);\n        var server = http.createServer(function (req, res) {\n            var tokens;\n            var query = _.get(url.parse(req.url, true), \"query\", {});\n            if (query.state === _nonce && _.isString(query.code)) {\n                return _getTokensFromAuthorizationCode(query.code, callbackUrl)\n                    .then(function (result) {\n                    tokens = result;\n                    return _respondWithFile(req, res, 200, \"../templates/loginSuccess.html\");\n                })\n                    .then(function () {\n                    server.close();\n                    return resolve({\n                        user: jwt.decode(tokens.id_token),\n                        tokens: tokens,\n                    });\n                })\n                    .catch(function () {\n                    return _respondWithFile(req, res, 400, \"../templates/loginFailure.html\");\n                });\n            }\n            _respondWithFile(req, res, 400, \"../templates/loginFailure.html\");\n        });\n        server.listen(port, function () {\n            logger.info();\n            logger.info(\"Visit this URL on this device to log in:\");\n            logger.info(clc.bold.underline(authUrl));\n            logger.info();\n            logger.info(\"Waiting for authentication...\");\n            open(authUrl);\n        });\n        server.on(\"error\", function () {\n            _loginWithoutLocalhost().then(resolve, reject);\n        });\n    });\n};\nvar login = function (localhost) {\n    if (localhost) {\n        return _getPort().then(_loginWithLocalhost, _loginWithoutLocalhost);\n    }\n    return _loginWithoutLocalhost();\n};\nvar _haveValidAccessToken = function (refreshToken, authScopes) {\n    if (_.isEmpty(lastAccessToken)) {\n        var tokens = configstore.get(\"tokens\");\n        if (refreshToken === _.get(tokens, \"refresh_token\")) {\n            lastAccessToken = tokens;\n        }\n    }\n    return (_.has(lastAccessToken, \"access_token\") &&\n        lastAccessToken.refresh_token === refreshToken &&\n        _.isEqual(authScopes.sort(), (lastAccessToken.scopes || []).sort()) &&\n        _.has(lastAccessToken, \"expires_at\") &&\n        lastAccessToken.expires_at > Date.now() + FIFTEEN_MINUTES_IN_MS);\n};\nvar _logoutCurrentSession = function (refreshToken) {\n    var tokens = configstore.get(\"tokens\");\n    var currentToken = _.get(tokens, \"refresh_token\");\n    if (refreshToken === currentToken) {\n        configstore.del(\"user\");\n        configstore.del(\"tokens\");\n        configstore.del(\"usage\");\n        configstore.del(\"analytics-uuid\");\n    }\n};\nvar _refreshAccessToken = function (refreshToken, authScopes) {\n    logger.debug(\"> refreshing access token with scopes:\", JSON.stringify(authScopes));\n    return api\n        .request(\"POST\", \"/oauth2/v3/token\", {\n        origin: api.googleOrigin,\n        form: {\n            refresh_token: refreshToken,\n            client_id: api.clientId,\n            client_secret: api.clientSecret,\n            grant_type: \"refresh_token\",\n            scope: (authScopes || []).join(\" \"),\n        },\n        logOptions: { skipRequestBody: true, skipQueryParams: true, skipResponseBody: true },\n    })\n        .then(function (res) {\n        if (res.status === 401 || res.status === 400) {\n            return { access_token: refreshToken };\n        }\n        if (!_.isString(res.body.access_token)) {\n            throw INVALID_CREDENTIAL_ERROR;\n        }\n        lastAccessToken = _.assign({\n            expires_at: Date.now() + res.body.expires_in * 1000,\n            refresh_token: refreshToken,\n            scopes: authScopes,\n        }, res.body);\n        var currentRefreshToken = _.get(configstore.get(\"tokens\"), \"refresh_token\");\n        if (refreshToken === currentRefreshToken) {\n            configstore.set(\"tokens\", lastAccessToken);\n        }\n        return lastAccessToken;\n    }, function (err) {\n        if (_.get(err, \"context.body.error\") === \"invalid_scope\") {\n            throw new FirebaseError(\"This command requires new authorization scopes not granted to your current session. Please run \" +\n                clc.bold(\"firebase login --reauth\") +\n                \"\\n\\n\" +\n                \"For CI servers and headless environments, generate a new token with \" +\n                clc.bold(\"firebase login:ci\"), { exit: 1 });\n        }\n        throw INVALID_CREDENTIAL_ERROR;\n    });\n};\nvar getAccessToken = function (refreshToken, authScopes) {\n    if (_haveValidAccessToken(refreshToken, authScopes)) {\n        return Promise.resolve(lastAccessToken);\n    }\n    return _refreshAccessToken(refreshToken, authScopes);\n};\nvar logout = function (refreshToken) {\n    if (lastAccessToken.refresh_token === refreshToken) {\n        lastAccessToken = {};\n    }\n    _logoutCurrentSession(refreshToken);\n    return api.request(\"GET\", \"/o/oauth2/revoke\", {\n        origin: api.authOrigin,\n        data: {\n            token: refreshToken,\n        },\n    }, function () {\n        throw new FirebaseError(\"Authentication Error.\", {\n            exit: 1,\n        });\n    });\n};\nvar auth = {\n    login: login,\n    getAccessToken: getAccessToken,\n    logout: logout,\n};\nmodule.exports = auth;\n"]},"metadata":{},"sourceType":"script"}