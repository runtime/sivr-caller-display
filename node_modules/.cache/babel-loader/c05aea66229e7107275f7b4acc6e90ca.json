{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst error_1 = require(\"../../error\");\n\nconst _ = require(\"lodash\");\n\nconst path = require(\"path\");\n\nconst clc = require(\"cli-color\");\n\nconst logger = require(\"../../logger\");\n\nconst projectPath = require(\"../../projectPath\");\n\nconst fsutils = require(\"../../fsutils\");\n\nconst cjson = require(\"cjson\");\n\nfunction functionsDirectoryExists(cwd, sourceDirName) {\n  if (!fsutils.dirExistsSync(projectPath.resolveProjectPath(cwd, sourceDirName))) {\n    const msg = `could not deploy functions because the ${clc.bold('\"' + sourceDirName + '\"')} ` + `directory was not found. Please create it or specify a different source directory in firebase.json`;\n    throw new error_1.FirebaseError(msg);\n  }\n}\n\nexports.functionsDirectoryExists = functionsDirectoryExists;\n\nfunction functionNamesAreValid(functionNames) {\n  const validFunctionNameRegex = /^[a-zA-Z0-9_-]{1,62}$/;\n\n  const invalidNames = _.reject(_.keys(functionNames), name => {\n    return _.startsWith(name, \".\") || validFunctionNameRegex.test(name);\n  });\n\n  if (!_.isEmpty(invalidNames)) {\n    const msg = `${invalidNames.join(\", \")} function name(s) can only contain letters, ` + `numbers, hyphens, and not exceed 62 characters in length`;\n    throw new error_1.FirebaseError(msg);\n  }\n}\n\nexports.functionNamesAreValid = functionNamesAreValid;\n\nfunction packageJsonIsValid(sourceDirName, sourceDir, projectDir) {\n  const packageJsonFile = path.join(sourceDir, \"package.json\");\n\n  if (!fsutils.fileExistsSync(packageJsonFile)) {\n    const msg = `No npm package found in functions source directory. Please run 'npm init' inside ${sourceDirName}`;\n    throw new error_1.FirebaseError(msg);\n  }\n\n  try {\n    const data = cjson.load(packageJsonFile);\n    logger.debug(\"> [functions] package.json contents:\", JSON.stringify(data, null, 2));\n    assertFunctionsSourcePresent(data, sourceDir, projectDir);\n    assertEnginesFieldPresent(data, sourceDirName);\n  } catch (e) {\n    const msg = `There was an error reading ${sourceDirName}${path.sep}package.json:\\n\\n ${e.message}`;\n    throw new error_1.FirebaseError(msg);\n  }\n}\n\nexports.packageJsonIsValid = packageJsonIsValid;\n\nfunction assertFunctionsSourcePresent(data, sourceDir, projectDir) {\n  const indexJsFile = path.join(sourceDir, data.main || \"index.js\");\n\n  if (!fsutils.fileExistsSync(indexJsFile)) {\n    const msg = `${path.relative(projectDir, indexJsFile)} does not exist, can't deploy Cloud Functions`;\n    throw new error_1.FirebaseError(msg);\n  }\n}\n\nfunction assertEnginesFieldPresent(data, sourceDirName) {\n  if (!data.engines || !data.engines.node) {\n    const msg = `Engines field is required but was not found in ${sourceDirName}${path.sep}package.json.\\n` + `To fix this, add the following lines to your package.json: \\n\n      \"engines\": {\n        \"node\": \"8\"\n      }\\n`;\n    throw new error_1.FirebaseError(msg);\n  }\n}","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/deploy/functions/validate.js"],"names":["Object","defineProperty","exports","value","error_1","require","_","path","clc","logger","projectPath","fsutils","cjson","functionsDirectoryExists","cwd","sourceDirName","dirExistsSync","resolveProjectPath","msg","bold","FirebaseError","functionNamesAreValid","functionNames","validFunctionNameRegex","invalidNames","reject","keys","name","startsWith","test","isEmpty","join","packageJsonIsValid","sourceDir","projectDir","packageJsonFile","fileExistsSync","data","load","debug","JSON","stringify","assertFunctionsSourcePresent","assertEnginesFieldPresent","e","sep","message","indexJsFile","main","relative","engines","node"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst error_1 = require(\"../../error\");\nconst _ = require(\"lodash\");\nconst path = require(\"path\");\nconst clc = require(\"cli-color\");\nconst logger = require(\"../../logger\");\nconst projectPath = require(\"../../projectPath\");\nconst fsutils = require(\"../../fsutils\");\nconst cjson = require(\"cjson\");\nfunction functionsDirectoryExists(cwd, sourceDirName) {\n    if (!fsutils.dirExistsSync(projectPath.resolveProjectPath(cwd, sourceDirName))) {\n        const msg = `could not deploy functions because the ${clc.bold('\"' + sourceDirName + '\"')} ` +\n            `directory was not found. Please create it or specify a different source directory in firebase.json`;\n        throw new error_1.FirebaseError(msg);\n    }\n}\nexports.functionsDirectoryExists = functionsDirectoryExists;\nfunction functionNamesAreValid(functionNames) {\n    const validFunctionNameRegex = /^[a-zA-Z0-9_-]{1,62}$/;\n    const invalidNames = _.reject(_.keys(functionNames), (name) => {\n        return _.startsWith(name, \".\") || validFunctionNameRegex.test(name);\n    });\n    if (!_.isEmpty(invalidNames)) {\n        const msg = `${invalidNames.join(\", \")} function name(s) can only contain letters, ` +\n            `numbers, hyphens, and not exceed 62 characters in length`;\n        throw new error_1.FirebaseError(msg);\n    }\n}\nexports.functionNamesAreValid = functionNamesAreValid;\nfunction packageJsonIsValid(sourceDirName, sourceDir, projectDir) {\n    const packageJsonFile = path.join(sourceDir, \"package.json\");\n    if (!fsutils.fileExistsSync(packageJsonFile)) {\n        const msg = `No npm package found in functions source directory. Please run 'npm init' inside ${sourceDirName}`;\n        throw new error_1.FirebaseError(msg);\n    }\n    try {\n        const data = cjson.load(packageJsonFile);\n        logger.debug(\"> [functions] package.json contents:\", JSON.stringify(data, null, 2));\n        assertFunctionsSourcePresent(data, sourceDir, projectDir);\n        assertEnginesFieldPresent(data, sourceDirName);\n    }\n    catch (e) {\n        const msg = `There was an error reading ${sourceDirName}${path.sep}package.json:\\n\\n ${e.message}`;\n        throw new error_1.FirebaseError(msg);\n    }\n}\nexports.packageJsonIsValid = packageJsonIsValid;\nfunction assertFunctionsSourcePresent(data, sourceDir, projectDir) {\n    const indexJsFile = path.join(sourceDir, data.main || \"index.js\");\n    if (!fsutils.fileExistsSync(indexJsFile)) {\n        const msg = `${path.relative(projectDir, indexJsFile)} does not exist, can't deploy Cloud Functions`;\n        throw new error_1.FirebaseError(msg);\n    }\n}\nfunction assertEnginesFieldPresent(data, sourceDirName) {\n    if (!data.engines || !data.engines.node) {\n        const msg = `Engines field is required but was not found in ${sourceDirName}${path.sep}package.json.\\n` +\n            `To fix this, add the following lines to your package.json: \\n\n      \"engines\": {\n        \"node\": \"8\"\n      }\\n`;\n        throw new error_1.FirebaseError(msg);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}