{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar MAX_POLL_RETRIES = 2;\n\nfunction pollOperation(op, pollFunction, interval, pollFailCount) {\n  pollFailCount = pollFailCount || 0;\n  return new Promise(function (resolve, reject) {\n    function poll() {\n      pollFunction(op).then(function (result) {\n        if (result.done) {\n          resolve(result);\n        } else {\n          setTimeout(poll, interval);\n        }\n      }).catch(function () {\n        if (pollFailCount < MAX_POLL_RETRIES) {\n          pollFailCount += 1;\n          setTimeout(poll, interval * 2);\n        } else {\n          reject(\"Failed to get status of operation.\");\n        }\n      });\n    }\n\n    poll();\n  });\n}\n\nfunction pollAndRetryOperations(operations, pollFunction, interval, printSuccess, printFail, retryCondition) {\n  return Promise.all(_.map(operations, function (op) {\n    return pollOperation(op, pollFunction, interval).then(function (result) {\n      if (!result.error) {\n        return printSuccess(op);\n      }\n\n      if (!retryCondition(result)) {\n        return printFail(op);\n      }\n\n      return op.retryFunction().then(function (retriedOperation) {\n        return pollOperation(retriedOperation, pollFunction, interval);\n      }).then(function (retriedResult) {\n        if (retriedResult.error) {\n          return printFail(op);\n        }\n\n        return printSuccess(op);\n      });\n    });\n  }));\n}\n\nmodule.exports = {\n  pollAndRetry: pollAndRetryOperations,\n  poll: pollOperation\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/pollOperations.js"],"names":["_","require","MAX_POLL_RETRIES","pollOperation","op","pollFunction","interval","pollFailCount","Promise","resolve","reject","poll","then","result","done","setTimeout","catch","pollAndRetryOperations","operations","printSuccess","printFail","retryCondition","all","map","error","retryFunction","retriedOperation","retriedResult","module","exports","pollAndRetry"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,gBAAgB,GAAG,CAAvB;;AACA,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,YAA3B,EAAyCC,QAAzC,EAAmDC,aAAnD,EAAkE;AAC9DA,EAAAA,aAAa,GAAGA,aAAa,IAAI,CAAjC;AACA,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,aAASC,IAAT,GAAgB;AACZN,MAAAA,YAAY,CAACD,EAAD,CAAZ,CACKQ,IADL,CACU,UAAUC,MAAV,EAAkB;AACxB,YAAIA,MAAM,CAACC,IAAX,EAAiB;AACbL,UAAAA,OAAO,CAACI,MAAD,CAAP;AACH,SAFD,MAGK;AACDE,UAAAA,UAAU,CAACJ,IAAD,EAAOL,QAAP,CAAV;AACH;AACJ,OARD,EASKU,KATL,CASW,YAAY;AACnB,YAAIT,aAAa,GAAGL,gBAApB,EAAsC;AAClCK,UAAAA,aAAa,IAAI,CAAjB;AACAQ,UAAAA,UAAU,CAACJ,IAAD,EAAOL,QAAQ,GAAG,CAAlB,CAAV;AACH,SAHD,MAIK;AACDI,UAAAA,MAAM,CAAC,oCAAD,CAAN;AACH;AACJ,OAjBD;AAkBH;;AACDC,IAAAA,IAAI;AACP,GAtBM,CAAP;AAuBH;;AACD,SAASM,sBAAT,CAAgCC,UAAhC,EAA4Cb,YAA5C,EAA0DC,QAA1D,EAAoEa,YAApE,EAAkFC,SAAlF,EAA6FC,cAA7F,EAA6G;AACzG,SAAOb,OAAO,CAACc,GAAR,CAAYtB,CAAC,CAACuB,GAAF,CAAML,UAAN,EAAkB,UAAUd,EAAV,EAAc;AAC/C,WAAOD,aAAa,CAACC,EAAD,EAAKC,YAAL,EAAmBC,QAAnB,CAAb,CAA0CM,IAA1C,CAA+C,UAAUC,MAAV,EAAkB;AACpE,UAAI,CAACA,MAAM,CAACW,KAAZ,EAAmB;AACf,eAAOL,YAAY,CAACf,EAAD,CAAnB;AACH;;AACD,UAAI,CAACiB,cAAc,CAACR,MAAD,CAAnB,EAA6B;AACzB,eAAOO,SAAS,CAAChB,EAAD,CAAhB;AACH;;AACD,aAAOA,EAAE,CACJqB,aADE,GAEFb,IAFE,CAEG,UAAUc,gBAAV,EAA4B;AAClC,eAAOvB,aAAa,CAACuB,gBAAD,EAAmBrB,YAAnB,EAAiCC,QAAjC,CAApB;AACH,OAJM,EAKFM,IALE,CAKG,UAAUe,aAAV,EAAyB;AAC/B,YAAIA,aAAa,CAACH,KAAlB,EAAyB;AACrB,iBAAOJ,SAAS,CAAChB,EAAD,CAAhB;AACH;;AACD,eAAOe,YAAY,CAACf,EAAD,CAAnB;AACH,OAVM,CAAP;AAWH,KAlBM,CAAP;AAmBH,GApBkB,CAAZ,CAAP;AAqBH;;AACDwB,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,YAAY,EAAEb,sBADD;AAEbN,EAAAA,IAAI,EAAER;AAFO,CAAjB","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar MAX_POLL_RETRIES = 2;\nfunction pollOperation(op, pollFunction, interval, pollFailCount) {\n    pollFailCount = pollFailCount || 0;\n    return new Promise(function (resolve, reject) {\n        function poll() {\n            pollFunction(op)\n                .then(function (result) {\n                if (result.done) {\n                    resolve(result);\n                }\n                else {\n                    setTimeout(poll, interval);\n                }\n            })\n                .catch(function () {\n                if (pollFailCount < MAX_POLL_RETRIES) {\n                    pollFailCount += 1;\n                    setTimeout(poll, interval * 2);\n                }\n                else {\n                    reject(\"Failed to get status of operation.\");\n                }\n            });\n        }\n        poll();\n    });\n}\nfunction pollAndRetryOperations(operations, pollFunction, interval, printSuccess, printFail, retryCondition) {\n    return Promise.all(_.map(operations, function (op) {\n        return pollOperation(op, pollFunction, interval).then(function (result) {\n            if (!result.error) {\n                return printSuccess(op);\n            }\n            if (!retryCondition(result)) {\n                return printFail(op);\n            }\n            return op\n                .retryFunction()\n                .then(function (retriedOperation) {\n                return pollOperation(retriedOperation, pollFunction, interval);\n            })\n                .then(function (retriedResult) {\n                if (retriedResult.error) {\n                    return printFail(op);\n                }\n                return printSuccess(op);\n            });\n        });\n    }));\n}\nmodule.exports = {\n    pollAndRetry: pollAndRetryOperations,\n    poll: pollOperation,\n};\n"]},"metadata":{},"sourceType":"script"}