{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst controller = require(\"../emulator/controller\");\n\nconst Config = require(\"../config\");\n\nconst utils = require(\"../utils\");\n\nconst logger = require(\"../logger\");\n\nconst requireAuth = require(\"../requireAuth\");\n\nconst requireConfig = require(\"../requireConfig\");\n\nconst types_1 = require(\"../emulator/types\");\n\nexports.FLAG_ONLY = \"--only <emulators>\";\nexports.DESC_ONLY = \"only run specific emulators. \" + \"This is a comma separated list of emulators to start. \" + \"Valid options are: \" + JSON.stringify(controller.VALID_EMULATOR_STRINGS);\nexports.FLAG_INSPECT_FUNCTIONS = \"--inspect-functions [port]\";\nexports.DESC_INSPECT_FUNCTIONS = \"emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)\";\nconst DEFAULT_CONFIG = new Config({\n  database: {},\n  firestore: {},\n  functions: {},\n  hosting: {}\n}, {});\n\nfunction beforeEmulatorCommand(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const optionsWithDefaultConfig = Object.assign({}, options, {\n      config: DEFAULT_CONFIG\n    });\n    const optionsWithConfig = options.config ? options : optionsWithDefaultConfig;\n    const canStartWithoutConfig = options.only && !controller.shouldStart(optionsWithConfig, types_1.Emulators.FUNCTIONS) && !controller.shouldStart(optionsWithConfig, types_1.Emulators.HOSTING);\n\n    try {\n      yield requireAuth(options);\n    } catch (e) {\n      logger.debug(e);\n      utils.logLabeledWarning(\"emulators\", `You are not currently authenticated so some features may not work correctly. Please run ${clc.bold(\"firebase login\")} to authenticate the CLI.`);\n    }\n\n    if (canStartWithoutConfig && !options.config) {\n      utils.logWarning(\"Could not find config (firebase.json) so using defaults.\");\n      options.config = DEFAULT_CONFIG;\n    } else {\n      yield requireConfig(options);\n    }\n  });\n}\n\nexports.beforeEmulatorCommand = beforeEmulatorCommand;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/commandUtils.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","clc","require","controller","Config","utils","logger","requireAuth","requireConfig","types_1","FLAG_ONLY","DESC_ONLY","JSON","stringify","VALID_EMULATOR_STRINGS","FLAG_INSPECT_FUNCTIONS","DESC_INSPECT_FUNCTIONS","DEFAULT_CONFIG","database","firestore","functions","hosting","beforeEmulatorCommand","options","optionsWithDefaultConfig","assign","config","optionsWithConfig","canStartWithoutConfig","only","shouldStart","Emulators","FUNCTIONS","HOSTING","debug","logLabeledWarning","bold","logWarning"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,SAAO,KAAKD,CAAC,KAAKA,CAAC,GAAGE,OAAT,CAAN,EAAyB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAACO,IAAV,CAAeF,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBJ,KAAlB,EAAyB;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAAC,OAAD,CAAT,CAAmBK,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACL,KAAR,CAArB,GAAsC,IAAIN,CAAJ,CAAM,UAAUG,OAAV,EAAmB;AAAEA,QAAAA,OAAO,CAACQ,MAAM,CAACL,KAAR,CAAP;AAAwB,OAAnD,EAAqDO,IAArD,CAA0DR,SAA1D,EAAqEK,QAArE,CAAtC;AAAuH;;AAC/IH,IAAAA,IAAI,CAAC,CAACN,SAAS,GAAGA,SAAS,CAACa,KAAV,CAAgBhB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDS,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CAPD;;AAQAO,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEX,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMY,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,gBAAD,CAA3B;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,mBAAD,CAAvB;;AACAF,OAAO,CAACU,SAAR,GAAoB,oBAApB;AACAV,OAAO,CAACW,SAAR,GAAoB,kCAChB,wDADgB,GAEhB,qBAFgB,GAGhBC,IAAI,CAACC,SAAL,CAAeV,UAAU,CAACW,sBAA1B,CAHJ;AAIAd,OAAO,CAACe,sBAAR,GAAiC,4BAAjC;AACAf,OAAO,CAACgB,sBAAR,GAAiC,yGAAjC;AACA,MAAMC,cAAc,GAAG,IAAIb,MAAJ,CAAW;AAAEc,EAAAA,QAAQ,EAAE,EAAZ;AAAgBC,EAAAA,SAAS,EAAE,EAA3B;AAA+BC,EAAAA,SAAS,EAAE,EAA1C;AAA8CC,EAAAA,OAAO,EAAE;AAAvD,CAAX,EAAwE,EAAxE,CAAvB;;AACA,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AACpC,SAAO3C,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,UAAM4C,wBAAwB,GAAG1B,MAAM,CAAC2B,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2B;AAAEG,MAAAA,MAAM,EAAET;AAAV,KAA3B,CAAjC;AACA,UAAMU,iBAAiB,GAAGJ,OAAO,CAACG,MAAR,GAAiBH,OAAjB,GAA2BC,wBAArD;AACA,UAAMI,qBAAqB,GAAGL,OAAO,CAACM,IAAR,IAC1B,CAAC1B,UAAU,CAAC2B,WAAX,CAAuBH,iBAAvB,EAA0ClB,OAAO,CAACsB,SAAR,CAAkBC,SAA5D,CADyB,IAE1B,CAAC7B,UAAU,CAAC2B,WAAX,CAAuBH,iBAAvB,EAA0ClB,OAAO,CAACsB,SAAR,CAAkBE,OAA5D,CAFL;;AAGA,QAAI;AACA,YAAM1B,WAAW,CAACgB,OAAD,CAAjB;AACH,KAFD,CAGA,OAAO/B,CAAP,EAAU;AACNc,MAAAA,MAAM,CAAC4B,KAAP,CAAa1C,CAAb;AACAa,MAAAA,KAAK,CAAC8B,iBAAN,CAAwB,WAAxB,EAAsC,2FAA0FlC,GAAG,CAACmC,IAAJ,CAAS,gBAAT,CAA2B,2BAA3J;AACH;;AACD,QAAIR,qBAAqB,IAAI,CAACL,OAAO,CAACG,MAAtC,EAA8C;AAC1CrB,MAAAA,KAAK,CAACgC,UAAN,CAAiB,0DAAjB;AACAd,MAAAA,OAAO,CAACG,MAAR,GAAiBT,cAAjB;AACH,KAHD,MAIK;AACD,YAAMT,aAAa,CAACe,OAAD,CAAnB;AACH;AACJ,GApBe,CAAhB;AAqBH;;AACDvB,OAAO,CAACsB,qBAAR,GAAgCA,qBAAhC","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst controller = require(\"../emulator/controller\");\nconst Config = require(\"../config\");\nconst utils = require(\"../utils\");\nconst logger = require(\"../logger\");\nconst requireAuth = require(\"../requireAuth\");\nconst requireConfig = require(\"../requireConfig\");\nconst types_1 = require(\"../emulator/types\");\nexports.FLAG_ONLY = \"--only <emulators>\";\nexports.DESC_ONLY = \"only run specific emulators. \" +\n    \"This is a comma separated list of emulators to start. \" +\n    \"Valid options are: \" +\n    JSON.stringify(controller.VALID_EMULATOR_STRINGS);\nexports.FLAG_INSPECT_FUNCTIONS = \"--inspect-functions [port]\";\nexports.DESC_INSPECT_FUNCTIONS = \"emulate Cloud Functions in debug mode with the node inspector on the given port (9229 if not specified)\";\nconst DEFAULT_CONFIG = new Config({ database: {}, firestore: {}, functions: {}, hosting: {} }, {});\nfunction beforeEmulatorCommand(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const optionsWithDefaultConfig = Object.assign({}, options, { config: DEFAULT_CONFIG });\n        const optionsWithConfig = options.config ? options : optionsWithDefaultConfig;\n        const canStartWithoutConfig = options.only &&\n            !controller.shouldStart(optionsWithConfig, types_1.Emulators.FUNCTIONS) &&\n            !controller.shouldStart(optionsWithConfig, types_1.Emulators.HOSTING);\n        try {\n            yield requireAuth(options);\n        }\n        catch (e) {\n            logger.debug(e);\n            utils.logLabeledWarning(\"emulators\", `You are not currently authenticated so some features may not work correctly. Please run ${clc.bold(\"firebase login\")} to authenticate the CLI.`);\n        }\n        if (canStartWithoutConfig && !options.config) {\n            utils.logWarning(\"Could not find config (firebase.json) so using defaults.\");\n            options.config = DEFAULT_CONFIG;\n        }\n        else {\n            yield requireConfig(options);\n        }\n    });\n}\nexports.beforeEmulatorCommand = beforeEmulatorCommand;\n"]},"metadata":{},"sourceType":"script"}