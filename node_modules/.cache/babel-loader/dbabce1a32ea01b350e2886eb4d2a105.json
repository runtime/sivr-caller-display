{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar clc = require(\"cli-color\");\n\nvar path = require(\"path\");\n\nvar _require = require(\"../../error\"),\n    FirebaseError = _require.FirebaseError;\n\nvar parseBoltRules = require(\"../../parseBoltRules\");\n\nvar rtdb = require(\"../../rtdb\");\n\nvar utils = require(\"../../utils\");\n\nmodule.exports = function (context, options) {\n  var rulesConfig = options.config.get(\"database\");\n  var next = Promise.resolve();\n\n  if (!rulesConfig) {\n    return next;\n  }\n\n  if (_.isString(_.get(rulesConfig, \"rules\"))) {\n    rulesConfig = [_.assign(rulesConfig, {\n      instance: options.instance\n    })];\n  }\n\n  var ruleFiles = {};\n  var deploys = [];\n  rulesConfig.forEach(function (ruleConfig) {\n    if (!ruleConfig.rules) {\n      return;\n    }\n\n    ruleFiles[ruleConfig.rules] = null;\n\n    if (ruleConfig.target) {\n      options.rc.requireTarget(context.projectId, \"database\", ruleConfig.target);\n      var instances = options.rc.target(context.projectId, \"database\", ruleConfig.target);\n      deploys = deploys.concat(instances.map(function (inst) {\n        return {\n          instance: inst,\n          rules: ruleConfig.rules\n        };\n      }));\n    } else if (!ruleConfig.instance) {\n      throw new FirebaseError('Must supply either \"target\" or \"instance\" in database config');\n    } else {\n      deploys.push(ruleConfig);\n    }\n  });\n\n  _.forEach(ruleFiles, function (v, file) {\n    switch (path.extname(file)) {\n      case \".json\":\n        ruleFiles[file] = options.config.readProjectFile(file);\n        break;\n\n      case \".bolt\":\n        ruleFiles[file] = parseBoltRules(file);\n        break;\n\n      default:\n        throw new FirebaseError(\"Unexpected rules format \" + path.extname(file));\n    }\n  });\n\n  context.database = {\n    deploys: deploys,\n    ruleFiles: ruleFiles\n  };\n  utils.logBullet(clc.bold.cyan(\"database: \") + \"checking rules syntax...\");\n  return Promise.all(deploys.map(function (deploy) {\n    return rtdb.updateRules(deploy.instance, ruleFiles[deploy.rules], {\n      dryRun: true\n    }).then(function () {\n      utils.logSuccess(clc.bold.green(\"database: \") + \"rules syntax for database \" + clc.bold(deploy.instance) + \" is valid\");\n    });\n  }));\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/deploy/database/prepare.js"],"names":["_","require","clc","path","FirebaseError","parseBoltRules","rtdb","utils","module","exports","context","options","rulesConfig","config","get","next","Promise","resolve","isString","assign","instance","ruleFiles","deploys","forEach","ruleConfig","rules","target","rc","requireTarget","projectId","instances","concat","map","inst","push","v","file","extname","readProjectFile","database","logBullet","bold","cyan","all","deploy","updateRules","dryRun","then","logSuccess","green"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;eACwBA,OAAO,CAAC,aAAD,C;IAAzBG,a,YAAAA,a;;AACN,IAAIC,cAAc,GAAGJ,OAAO,CAAC,sBAAD,CAA5B;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,YAAD,CAAlB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,aAAD,CAAnB;;AACAO,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACzC,MAAIC,WAAW,GAAGD,OAAO,CAACE,MAAR,CAAeC,GAAf,CAAmB,UAAnB,CAAlB;AACA,MAAIC,IAAI,GAAGC,OAAO,CAACC,OAAR,EAAX;;AACA,MAAI,CAACL,WAAL,EAAkB;AACd,WAAOG,IAAP;AACH;;AACD,MAAIf,CAAC,CAACkB,QAAF,CAAWlB,CAAC,CAACc,GAAF,CAAMF,WAAN,EAAmB,OAAnB,CAAX,CAAJ,EAA6C;AACzCA,IAAAA,WAAW,GAAG,CAACZ,CAAC,CAACmB,MAAF,CAASP,WAAT,EAAsB;AAAEQ,MAAAA,QAAQ,EAAET,OAAO,CAACS;AAApB,KAAtB,CAAD,CAAd;AACH;;AACD,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AACAV,EAAAA,WAAW,CAACW,OAAZ,CAAoB,UAAUC,UAAV,EAAsB;AACtC,QAAI,CAACA,UAAU,CAACC,KAAhB,EAAuB;AACnB;AACH;;AACDJ,IAAAA,SAAS,CAACG,UAAU,CAACC,KAAZ,CAAT,GAA8B,IAA9B;;AACA,QAAID,UAAU,CAACE,MAAf,EAAuB;AACnBf,MAAAA,OAAO,CAACgB,EAAR,CAAWC,aAAX,CAAyBlB,OAAO,CAACmB,SAAjC,EAA4C,UAA5C,EAAwDL,UAAU,CAACE,MAAnE;AACA,UAAII,SAAS,GAAGnB,OAAO,CAACgB,EAAR,CAAWD,MAAX,CAAkBhB,OAAO,CAACmB,SAA1B,EAAqC,UAArC,EAAiDL,UAAU,CAACE,MAA5D,CAAhB;AACAJ,MAAAA,OAAO,GAAGA,OAAO,CAACS,MAAR,CAAeD,SAAS,CAACE,GAAV,CAAc,UAAUC,IAAV,EAAgB;AACnD,eAAO;AAAEb,UAAAA,QAAQ,EAAEa,IAAZ;AAAkBR,UAAAA,KAAK,EAAED,UAAU,CAACC;AAApC,SAAP;AACH,OAFwB,CAAf,CAAV;AAGH,KAND,MAOK,IAAI,CAACD,UAAU,CAACJ,QAAhB,EAA0B;AAC3B,YAAM,IAAIhB,aAAJ,CAAkB,8DAAlB,CAAN;AACH,KAFI,MAGA;AACDkB,MAAAA,OAAO,CAACY,IAAR,CAAaV,UAAb;AACH;AACJ,GAlBD;;AAmBAxB,EAAAA,CAAC,CAACuB,OAAF,CAAUF,SAAV,EAAqB,UAAUc,CAAV,EAAaC,IAAb,EAAmB;AACpC,YAAQjC,IAAI,CAACkC,OAAL,CAAaD,IAAb,CAAR;AACI,WAAK,OAAL;AACIf,QAAAA,SAAS,CAACe,IAAD,CAAT,GAAkBzB,OAAO,CAACE,MAAR,CAAeyB,eAAf,CAA+BF,IAA/B,CAAlB;AACA;;AACJ,WAAK,OAAL;AACIf,QAAAA,SAAS,CAACe,IAAD,CAAT,GAAkB/B,cAAc,CAAC+B,IAAD,CAAhC;AACA;;AACJ;AACI,cAAM,IAAIhC,aAAJ,CAAkB,6BAA6BD,IAAI,CAACkC,OAAL,CAAaD,IAAb,CAA/C,CAAN;AARR;AAUH,GAXD;;AAYA1B,EAAAA,OAAO,CAAC6B,QAAR,GAAmB;AACfjB,IAAAA,OAAO,EAAEA,OADM;AAEfD,IAAAA,SAAS,EAAEA;AAFI,GAAnB;AAIAd,EAAAA,KAAK,CAACiC,SAAN,CAAgBtC,GAAG,CAACuC,IAAJ,CAASC,IAAT,CAAc,YAAd,IAA8B,0BAA9C;AACA,SAAO1B,OAAO,CAAC2B,GAAR,CAAYrB,OAAO,CAACU,GAAR,CAAY,UAAUY,MAAV,EAAkB;AAC7C,WAAOtC,IAAI,CACNuC,WADE,CACUD,MAAM,CAACxB,QADjB,EAC2BC,SAAS,CAACuB,MAAM,CAACnB,KAAR,CADpC,EACoD;AAAEqB,MAAAA,MAAM,EAAE;AAAV,KADpD,EAEFC,IAFE,CAEG,YAAY;AAClBxC,MAAAA,KAAK,CAACyC,UAAN,CAAiB9C,GAAG,CAACuC,IAAJ,CAASQ,KAAT,CAAe,YAAf,IACb,4BADa,GAEb/C,GAAG,CAACuC,IAAJ,CAASG,MAAM,CAACxB,QAAhB,CAFa,GAGb,WAHJ;AAIH,KAPM,CAAP;AAQH,GATkB,CAAZ,CAAP;AAUH,CAzDD","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar clc = require(\"cli-color\");\nvar path = require(\"path\");\nvar { FirebaseError } = require(\"../../error\");\nvar parseBoltRules = require(\"../../parseBoltRules\");\nvar rtdb = require(\"../../rtdb\");\nvar utils = require(\"../../utils\");\nmodule.exports = function (context, options) {\n    var rulesConfig = options.config.get(\"database\");\n    var next = Promise.resolve();\n    if (!rulesConfig) {\n        return next;\n    }\n    if (_.isString(_.get(rulesConfig, \"rules\"))) {\n        rulesConfig = [_.assign(rulesConfig, { instance: options.instance })];\n    }\n    var ruleFiles = {};\n    var deploys = [];\n    rulesConfig.forEach(function (ruleConfig) {\n        if (!ruleConfig.rules) {\n            return;\n        }\n        ruleFiles[ruleConfig.rules] = null;\n        if (ruleConfig.target) {\n            options.rc.requireTarget(context.projectId, \"database\", ruleConfig.target);\n            var instances = options.rc.target(context.projectId, \"database\", ruleConfig.target);\n            deploys = deploys.concat(instances.map(function (inst) {\n                return { instance: inst, rules: ruleConfig.rules };\n            }));\n        }\n        else if (!ruleConfig.instance) {\n            throw new FirebaseError('Must supply either \"target\" or \"instance\" in database config');\n        }\n        else {\n            deploys.push(ruleConfig);\n        }\n    });\n    _.forEach(ruleFiles, function (v, file) {\n        switch (path.extname(file)) {\n            case \".json\":\n                ruleFiles[file] = options.config.readProjectFile(file);\n                break;\n            case \".bolt\":\n                ruleFiles[file] = parseBoltRules(file);\n                break;\n            default:\n                throw new FirebaseError(\"Unexpected rules format \" + path.extname(file));\n        }\n    });\n    context.database = {\n        deploys: deploys,\n        ruleFiles: ruleFiles,\n    };\n    utils.logBullet(clc.bold.cyan(\"database: \") + \"checking rules syntax...\");\n    return Promise.all(deploys.map(function (deploy) {\n        return rtdb\n            .updateRules(deploy.instance, ruleFiles[deploy.rules], { dryRun: true })\n            .then(function () {\n            utils.logSuccess(clc.bold.green(\"database: \") +\n                \"rules syntax for database \" +\n                clc.bold(deploy.instance) +\n                \" is valid\");\n        });\n    }));\n};\n"]},"metadata":{},"sourceType":"script"}