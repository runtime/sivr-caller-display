{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst marked = require(\"marked\");\n\nconst ora = require(\"ora\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst askUserForConsent = require(\"../extensions/askUserForConsent\");\n\nconst checkProjectBilling = require(\"../extensions/checkProjectBilling\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst generateInstanceId_1 = require(\"../extensions/generateInstanceId\");\n\nconst getProjectId = require(\"../getProjectId\");\n\nconst rolesHelper_1 = require(\"../extensions/rolesHelper\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst resolveSource_1 = require(\"../extensions/resolveSource\");\n\nconst paramHelper = require(\"../extensions/paramHelper\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst logger = require(\"../logger\");\n\nconst prompt_1 = require(\"../prompt\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\n\nfunction installExtension(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const projectId = options.projectId,\n          source = options.source,\n          paramFilePath = options.paramFilePath;\n    const spec = source.spec;\n    const spinner = ora.default(\"Installing your extension instance. This usually takes 3 to 5 minutes...\");\n\n    try {\n      yield checkProjectBilling(projectId, spec.displayName || spec.name, spec.billingRequired);\n      const roles = spec.roles ? spec.roles.map(role => role.role) : [];\n      yield askUserForConsent.prompt(spec.displayName || spec.name, projectId, roles);\n      const params = yield paramHelper.getParams(projectId, _.get(spec, \"params\", []), paramFilePath);\n      let instanceId = yield extensionsHelper_1.getValidInstanceId(projectId, spec.name);\n      spinner.start();\n      let serviceAccountEmail;\n\n      while (!serviceAccountEmail) {\n        try {\n          serviceAccountEmail = yield rolesHelper_1.createServiceAccountAndSetRoles(projectId, _.get(spec, \"roles\", []), instanceId);\n        } catch (err) {\n          if (err.status === 409) {\n            spinner.stop();\n            logger.info(err.message);\n            instanceId = yield extensionsHelper_1.promptForValidInstanceId(`${instanceId}-${generateInstanceId_1.getRandomString(4)}`);\n            spinner.start();\n          } else {\n            throw err;\n          }\n        }\n      }\n\n      const response = yield extensionsApi.createInstance(projectId, instanceId, source, params, serviceAccountEmail);\n      spinner.stop();\n      utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully installed ${clc.bold(spec.displayName || spec.name)}, ` + `its Instance ID is ${clc.bold(instanceId)}.`);\n      utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`View your new instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n      logger.info(marked(\"You can run `firebase ext` to view available Firebase Extensions commands, \" + \"including those to update, reconfigure, or delete your installed extension.\"));\n    } catch (err) {\n      if (spinner.isSpinning) {\n        spinner.fail();\n      }\n\n      if (err instanceof error_1.FirebaseError) {\n        throw err;\n      }\n\n      throw new error_1.FirebaseError(`Error occurred installing extension: ${err.message}`, {\n        original: err\n      });\n    }\n  });\n}\n\nexports.default = new command_1.Command(\"ext:install [extensionName]\").description(\"install an extension if [extensionName] or [extensionName@version] is provided; or run with `-i` to see all available extensions.\").option(\"--params <paramsFile>\", \"name of params variables file with .env format.\").before(requirePermissions_1.requirePermissions, [\"firebasemods.instances.create\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).action((extensionName, options) => __awaiter(this, void 0, void 0, function* () {\n  const projectId = getProjectId(options, false);\n  const paramFilePath = options.params;\n  let learnMore = false;\n\n  if (!extensionName) {\n    if (options.interactive) {\n      learnMore = true;\n      extensionName = yield extensionsHelper_1.promptForOfficialExtension(\"Which official extension do you want to install?\\n\" + \"  Select an extension, then press Enter to learn more.\");\n    } else {\n      throw new error_1.FirebaseError(`Please provide an extension name, or run ${clc.bold(\"firebase ext:install -i\")} to select from the list of all available official extensions.`);\n    }\n  }\n\n  const _extensionName$split = extensionName.split(\"@\"),\n        _extensionName$split2 = _slicedToArray(_extensionName$split, 2),\n        name = _extensionName$split2[0],\n        version = _extensionName$split2[1];\n\n  let registryEntry;\n\n  try {\n    registryEntry = yield resolveSource_1.resolveRegistryEntry(name);\n  } catch (err) {\n    throw new error_1.FirebaseError(`Unable to find extension source named ${clc.bold(extensionName)}. ` + `Run ${clc.bold(\"firebase ext:install -i\")} to select from the list of all available official extensions.`, {\n      original: err\n    });\n  }\n\n  try {\n    const sourceUrl = resolveSource_1.resolveSourceUrl(registryEntry, name, version);\n    const source = yield extensionsApi.getSource(sourceUrl);\n\n    if (learnMore) {\n      utils.logLabeledBullet(extensionsHelper_1.logPrefix, `You selected: ${clc.bold(source.spec.displayName)}.\\n` + `${source.spec.description}\\n` + `View details: https://firebase.google.com/products/extensions/${name}\\n`);\n      const confirm = yield prompt_1.promptOnce({\n        type: \"confirm\",\n        default: true,\n        message: \"Do you want to install this extension?\"\n      });\n\n      if (!confirm) {\n        return;\n      }\n    }\n\n    return installExtension({\n      paramFilePath,\n      projectId,\n      source\n    });\n  } catch (err) {\n    if (!(err instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(`Error occurred installing the extension: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/ext-install.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","clc","marked","ora","TerminalRenderer","askUserForConsent","checkProjectBilling","command_1","error_1","generateInstanceId_1","getProjectId","rolesHelper_1","extensionsApi","resolveSource_1","paramHelper","extensionsHelper_1","requirePermissions_1","utils","logger","prompt_1","setOptions","renderer","installExtension","options","projectId","source","paramFilePath","spec","spinner","default","displayName","name","billingRequired","roles","map","role","prompt","params","getParams","get","instanceId","getValidInstanceId","start","serviceAccountEmail","createServiceAccountAndSetRoles","err","status","stop","info","message","promptForValidInstanceId","getRandomString","response","createInstance","logLabeledSuccess","logPrefix","bold","logLabeledBullet","consoleUrl","isSpinning","fail","FirebaseError","original","Command","description","option","before","requirePermissions","ensureExtensionsApiEnabled","action","extensionName","learnMore","interactive","promptForOfficialExtension","split","version","registryEntry","resolveRegistryEntry","sourceUrl","resolveSourceUrl","getSource","confirm","promptOnce","type"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst marked = require(\"marked\");\nconst ora = require(\"ora\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst askUserForConsent = require(\"../extensions/askUserForConsent\");\nconst checkProjectBilling = require(\"../extensions/checkProjectBilling\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst generateInstanceId_1 = require(\"../extensions/generateInstanceId\");\nconst getProjectId = require(\"../getProjectId\");\nconst rolesHelper_1 = require(\"../extensions/rolesHelper\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst resolveSource_1 = require(\"../extensions/resolveSource\");\nconst paramHelper = require(\"../extensions/paramHelper\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst logger = require(\"../logger\");\nconst prompt_1 = require(\"../prompt\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nfunction installExtension(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { projectId, source, paramFilePath } = options;\n        const spec = source.spec;\n        const spinner = ora.default(\"Installing your extension instance. This usually takes 3 to 5 minutes...\");\n        try {\n            yield checkProjectBilling(projectId, spec.displayName || spec.name, spec.billingRequired);\n            const roles = spec.roles ? spec.roles.map((role) => role.role) : [];\n            yield askUserForConsent.prompt(spec.displayName || spec.name, projectId, roles);\n            const params = yield paramHelper.getParams(projectId, _.get(spec, \"params\", []), paramFilePath);\n            let instanceId = yield extensionsHelper_1.getValidInstanceId(projectId, spec.name);\n            spinner.start();\n            let serviceAccountEmail;\n            while (!serviceAccountEmail) {\n                try {\n                    serviceAccountEmail = yield rolesHelper_1.createServiceAccountAndSetRoles(projectId, _.get(spec, \"roles\", []), instanceId);\n                }\n                catch (err) {\n                    if (err.status === 409) {\n                        spinner.stop();\n                        logger.info(err.message);\n                        instanceId = yield extensionsHelper_1.promptForValidInstanceId(`${instanceId}-${generateInstanceId_1.getRandomString(4)}`);\n                        spinner.start();\n                    }\n                    else {\n                        throw err;\n                    }\n                }\n            }\n            const response = yield extensionsApi.createInstance(projectId, instanceId, source, params, serviceAccountEmail);\n            spinner.stop();\n            utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully installed ${clc.bold(spec.displayName || spec.name)}, ` +\n                `its Instance ID is ${clc.bold(instanceId)}.`);\n            utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`View your new instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n            logger.info(marked(\"You can run `firebase ext` to view available Firebase Extensions commands, \" +\n                \"including those to update, reconfigure, or delete your installed extension.\"));\n        }\n        catch (err) {\n            if (spinner.isSpinning) {\n                spinner.fail();\n            }\n            if (err instanceof error_1.FirebaseError) {\n                throw err;\n            }\n            throw new error_1.FirebaseError(`Error occurred installing extension: ${err.message}`, {\n                original: err,\n            });\n        }\n    });\n}\nexports.default = new command_1.Command(\"ext:install [extensionName]\")\n    .description(\"install an extension if [extensionName] or [extensionName@version] is provided; or run with `-i` to see all available extensions.\")\n    .option(\"--params <paramsFile>\", \"name of params variables file with .env format.\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasemods.instances.create\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .action((extensionName, options) => __awaiter(this, void 0, void 0, function* () {\n    const projectId = getProjectId(options, false);\n    const paramFilePath = options.params;\n    let learnMore = false;\n    if (!extensionName) {\n        if (options.interactive) {\n            learnMore = true;\n            extensionName = yield extensionsHelper_1.promptForOfficialExtension(\"Which official extension do you want to install?\\n\" +\n                \"  Select an extension, then press Enter to learn more.\");\n        }\n        else {\n            throw new error_1.FirebaseError(`Please provide an extension name, or run ${clc.bold(\"firebase ext:install -i\")} to select from the list of all available official extensions.`);\n        }\n    }\n    const [name, version] = extensionName.split(\"@\");\n    let registryEntry;\n    try {\n        registryEntry = yield resolveSource_1.resolveRegistryEntry(name);\n    }\n    catch (err) {\n        throw new error_1.FirebaseError(`Unable to find extension source named ${clc.bold(extensionName)}. ` +\n            `Run ${clc.bold(\"firebase ext:install -i\")} to select from the list of all available official extensions.`, { original: err });\n    }\n    try {\n        const sourceUrl = resolveSource_1.resolveSourceUrl(registryEntry, name, version);\n        const source = yield extensionsApi.getSource(sourceUrl);\n        if (learnMore) {\n            utils.logLabeledBullet(extensionsHelper_1.logPrefix, `You selected: ${clc.bold(source.spec.displayName)}.\\n` +\n                `${source.spec.description}\\n` +\n                `View details: https://firebase.google.com/products/extensions/${name}\\n`);\n            const confirm = yield prompt_1.promptOnce({\n                type: \"confirm\",\n                default: true,\n                message: \"Do you want to install this extension?\",\n            });\n            if (!confirm) {\n                return;\n            }\n        }\n        return installExtension({\n            paramFilePath,\n            projectId,\n            source,\n        });\n    }\n    catch (err) {\n        if (!(err instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(`Error occurred installing the extension: ${err.message}`, {\n                original: err,\n            });\n        }\n        throw err;\n    }\n}));\n"]},"metadata":{},"sourceType":"script"}