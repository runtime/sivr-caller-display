{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst request = require(\"request\");\n\nconst responseToError = require(\"../responseToError\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst api = require(\"../api\");\n\nconst requireInstance = require(\"../requireInstance\");\n\nconst settings_1 = require(\"../database/settings\");\n\nexports.default = new command_1.Command(\"database:settings:get <path>\").description(\"read the realtime database setting at path\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\").help(settings_1.HELP_TEXT).before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"]).before(requireInstance).action((path, options) => {\n  if (!settings_1.DATABASE_SETTINGS.has(path)) {\n    return utils.reject(settings_1.INVALID_PATH_ERROR, {\n      exit: 1\n    });\n  }\n\n  return new Promise((resolve, reject) => {\n    const reqOptions = {\n      url: utils.addSubdomain(api.realtimeOrigin, options.instance) + \"/.settings/\" + path + \".json\"\n    };\n    return api.addRequestHeaders(reqOptions).then(reqOptionsWithToken => {\n      request.get(reqOptionsWithToken, (err, res, body) => {\n        if (err) {\n          return reject(new error_1.FirebaseError(`Unexpected error fetching configs at ${path}`, {\n            exit: 2,\n            original: err\n          }));\n        } else if (res.statusCode >= 400) {\n          return reject(responseToError(res, body));\n        }\n\n        utils.logSuccess(`For database instance ${options.instance}\\n\\t ${path} = ${body}`);\n        resolve();\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/database-settings-get.js"],"names":["Object","defineProperty","exports","value","request","require","responseToError","command_1","error_1","requirePermissions_1","utils","api","requireInstance","settings_1","default","Command","description","option","help","HELP_TEXT","before","requirePermissions","action","path","options","DATABASE_SETTINGS","has","reject","INVALID_PATH_ERROR","exit","Promise","resolve","reqOptions","url","addSubdomain","realtimeOrigin","instance","addRequestHeaders","then","reqOptionsWithToken","get","err","res","body","FirebaseError","original","statusCode","logSuccess"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMM,GAAG,GAAGN,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMO,eAAe,GAAGP,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAMQ,UAAU,GAAGR,OAAO,CAAC,sBAAD,CAA1B;;AACAH,OAAO,CAACY,OAAR,GAAkB,IAAIP,SAAS,CAACQ,OAAd,CAAsB,8BAAtB,EACbC,WADa,CACD,4CADC,EAEbC,MAFa,CAEN,uBAFM,EAEmB,yFAFnB,EAGbC,IAHa,CAGRL,UAAU,CAACM,SAHH,EAIbC,MAJa,CAINX,oBAAoB,CAACY,kBAJf,EAImC,CAAC,gCAAD,CAJnC,EAKbD,MALa,CAKNR,eALM,EAMbU,MANa,CAMN,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC3B,MAAI,CAACX,UAAU,CAACY,iBAAX,CAA6BC,GAA7B,CAAiCH,IAAjC,CAAL,EAA6C;AACzC,WAAOb,KAAK,CAACiB,MAAN,CAAad,UAAU,CAACe,kBAAxB,EAA4C;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA5C,CAAP;AACH;;AACD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUJ,MAAV,KAAqB;AACpC,UAAMK,UAAU,GAAG;AACfC,MAAAA,GAAG,EAAEvB,KAAK,CAACwB,YAAN,CAAmBvB,GAAG,CAACwB,cAAvB,EAAuCX,OAAO,CAACY,QAA/C,IAA2D,aAA3D,GAA2Eb,IAA3E,GAAkF;AADxE,KAAnB;AAGA,WAAOZ,GAAG,CAAC0B,iBAAJ,CAAsBL,UAAtB,EAAkCM,IAAlC,CAAwCC,mBAAD,IAAyB;AACnEnC,MAAAA,OAAO,CAACoC,GAAR,CAAYD,mBAAZ,EAAiC,CAACE,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACjD,YAAIF,GAAJ,EAAS;AACL,iBAAOd,MAAM,CAAC,IAAInB,OAAO,CAACoC,aAAZ,CAA2B,wCAAuCrB,IAAK,EAAvE,EAA0E;AACpFM,YAAAA,IAAI,EAAE,CAD8E;AAEpFgB,YAAAA,QAAQ,EAAEJ;AAF0E,WAA1E,CAAD,CAAb;AAIH,SALD,MAMK,IAAIC,GAAG,CAACI,UAAJ,IAAkB,GAAtB,EAA2B;AAC5B,iBAAOnB,MAAM,CAACrB,eAAe,CAACoC,GAAD,EAAMC,IAAN,CAAhB,CAAb;AACH;;AACDjC,QAAAA,KAAK,CAACqC,UAAN,CAAkB,yBAAwBvB,OAAO,CAACY,QAAS,QAAOb,IAAK,MAAKoB,IAAK,EAAjF;AACAZ,QAAAA,OAAO;AACV,OAZD;AAaH,KAdM,CAAP;AAeH,GAnBM,CAAP;AAoBH,CA9BiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request = require(\"request\");\nconst responseToError = require(\"../responseToError\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst api = require(\"../api\");\nconst requireInstance = require(\"../requireInstance\");\nconst settings_1 = require(\"../database/settings\");\nexports.default = new command_1.Command(\"database:settings:get <path>\")\n    .description(\"read the realtime database setting at path\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, uses default database instance)\")\n    .help(settings_1.HELP_TEXT)\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.get\"])\n    .before(requireInstance)\n    .action((path, options) => {\n    if (!settings_1.DATABASE_SETTINGS.has(path)) {\n        return utils.reject(settings_1.INVALID_PATH_ERROR, { exit: 1 });\n    }\n    return new Promise((resolve, reject) => {\n        const reqOptions = {\n            url: utils.addSubdomain(api.realtimeOrigin, options.instance) + \"/.settings/\" + path + \".json\",\n        };\n        return api.addRequestHeaders(reqOptions).then((reqOptionsWithToken) => {\n            request.get(reqOptionsWithToken, (err, res, body) => {\n                if (err) {\n                    return reject(new error_1.FirebaseError(`Unexpected error fetching configs at ${path}`, {\n                        exit: 2,\n                        original: err,\n                    }));\n                }\n                else if (res.statusCode >= 400) {\n                    return reject(responseToError(res, body));\n                }\n                utils.logSuccess(`For database instance ${options.instance}\\n\\t ${path} = ${body}`);\n                resolve();\n            });\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}