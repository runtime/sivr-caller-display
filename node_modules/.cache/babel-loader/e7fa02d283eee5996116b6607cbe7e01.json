{"ast":null,"code":"var util = require('util'),\n    winston = require('../../winston'),\n    http = require('http'),\n    https = require('https'),\n    Stream = require('stream').Stream,\n    Transport = require('./transport').Transport; //\n// ### function Http (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Http transport object responsible\n// for persisting log messages and metadata to a terminal or TTY.\n//\n\n\nvar Http = exports.Http = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n  this.name = 'http';\n  this.ssl = !!options.ssl;\n  this.host = options.host || 'localhost';\n  this.port = options.port;\n  this.auth = options.auth;\n  this.path = options.path || '';\n\n  if (!this.port) {\n    this.port = this.ssl ? 443 : 80;\n  }\n};\n\nutil.inherits(Http, winston.Transport); //\n// Expose the name of this Transport on the prototype\n//\n\nHttp.prototype.name = 'http'; //\n// ### function _request (options, callback)\n// #### @callback {function} Continuation to respond to when complete.\n// Make a request to a winstond server or any http server which can\n// handle json-rpc.\n//\n\nHttp.prototype._request = function (options, callback) {\n  options = options || {};\n  var auth = options.auth || this.auth,\n      path = options.path || this.path || '',\n      req;\n  delete options.auth;\n  delete options.path; // Prepare options for outgoing HTTP request\n\n  req = (this.ssl ? https : http).request({\n    host: this.host,\n    port: this.port,\n    path: '/' + path.replace(/^\\//, ''),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    auth: auth ? auth.username + ':' + auth.password : ''\n  });\n  req.on('error', callback);\n  req.on('response', function (res) {\n    res.on('end', function () {\n      callback(null, res);\n    });\n    res.resume();\n  });\n  req.end(new Buffer(JSON.stringify(options), 'utf8'));\n}; //\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\n\n\nHttp.prototype.log = function (level, msg, meta, callback) {\n  var self = this;\n\n  if (typeof meta === 'function') {\n    callback = meta;\n    meta = {};\n  }\n\n  var options = {\n    method: 'collect',\n    params: {\n      level: level,\n      message: msg,\n      meta: meta\n    }\n  };\n\n  if (meta) {\n    if (meta.path) {\n      options.path = meta.path;\n      delete meta.path;\n    }\n\n    if (meta.auth) {\n      options.auth = meta.auth;\n      delete meta.auth;\n    }\n  }\n\n  this._request(options, function (err, res) {\n    if (res && res.statusCode !== 200) {\n      err = new Error('HTTP Status Code: ' + res.statusCode);\n    }\n\n    if (err) return callback(err); // TODO: emit 'logged' correctly,\n    // keep track of pending logs.\n\n    self.emit('logged');\n    if (callback) callback(null, true);\n  });\n}; //\n// ### function query (options, callback)\n// #### @options {Object} Loggly-like query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Query the transport. Options object is optional.\n//\n\n\nHttp.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var self = this,\n      options = this.normalizeQuery(options);\n  options = {\n    method: 'query',\n    params: options\n  };\n\n  if (options.params.path) {\n    options.path = options.params.path;\n    delete options.params.path;\n  }\n\n  if (options.params.auth) {\n    options.auth = options.params.auth;\n    delete options.params.auth;\n  }\n\n  this._request(options, function (err, res, body) {\n    if (res && res.statusCode !== 200) {\n      err = new Error('HTTP Status Code: ' + res.statusCode);\n    }\n\n    if (err) return callback(err);\n\n    if (typeof body === 'string') {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        return callback(e);\n      }\n    }\n\n    callback(null, body);\n  });\n}; //\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for this transport. Options object is optional.\n//\n\n\nHttp.prototype.stream = function (options) {\n  options = options || {};\n  var self = this,\n      stream = new Stream(),\n      req,\n      buff;\n\n  stream.destroy = function () {\n    req.destroy();\n  };\n\n  options = {\n    method: 'stream',\n    params: options\n  };\n\n  if (options.params.path) {\n    options.path = options.params.path;\n    delete options.params.path;\n  }\n\n  if (options.params.auth) {\n    options.auth = options.params.auth;\n    delete options.params.auth;\n  }\n\n  req = this._request(options);\n  buff = '';\n  req.on('data', function (data) {\n    var data = (buff + data).split(/\\n+/),\n        l = data.length - 1,\n        i = 0;\n\n    for (; i < l; i++) {\n      try {\n        stream.emit('log', JSON.parse(data[i]));\n      } catch (e) {\n        stream.emit('error', e);\n      }\n    }\n\n    buff = data[l];\n  });\n  req.on('error', function (err) {\n    stream.emit('error', err);\n  });\n  return stream;\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/winston/lib/winston/transports/http.js"],"names":["util","require","winston","http","https","Stream","Transport","Http","exports","options","call","name","ssl","host","port","auth","path","inherits","prototype","_request","callback","req","request","replace","method","headers","username","password","on","res","resume","end","Buffer","JSON","stringify","log","level","msg","meta","self","params","message","err","statusCode","Error","emit","query","normalizeQuery","body","parse","e","stream","buff","destroy","data","split","l","length","i"],"mappings":"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","sourcesContent":["var util = require('util'),\n    winston = require('../../winston'),\n    http = require('http'),\n    https = require('https'),\n    Stream = require('stream').Stream,\n    Transport = require('./transport').Transport;\n\n//\n// ### function Http (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Http transport object responsible\n// for persisting log messages and metadata to a terminal or TTY.\n//\nvar Http = exports.Http = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n\n  this.name = 'http';\n  this.ssl = !!options.ssl;\n  this.host = options.host || 'localhost';\n  this.port = options.port;\n  this.auth = options.auth;\n  this.path = options.path || '';\n\n  if (!this.port) {\n    this.port = this.ssl ? 443 : 80;\n  }\n};\n\nutil.inherits(Http, winston.Transport);\n\n//\n// Expose the name of this Transport on the prototype\n//\nHttp.prototype.name = 'http';\n\n//\n// ### function _request (options, callback)\n// #### @callback {function} Continuation to respond to when complete.\n// Make a request to a winstond server or any http server which can\n// handle json-rpc.\n//\nHttp.prototype._request = function (options, callback) {\n  options = options || {};\n\n  var auth = options.auth || this.auth,\n      path = options.path || this.path || '',\n      req;\n\n  delete options.auth;\n  delete options.path;\n\n  // Prepare options for outgoing HTTP request\n  req = (this.ssl ? https : http).request({\n    host: this.host,\n    port: this.port,\n    path: '/' + path.replace(/^\\//, ''),\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    auth: (auth) ? auth.username + ':' + auth.password : ''\n  });\n\n  req.on('error', callback);\n  req.on('response', function (res) {\n    res.on('end', function () {\n      callback(null, res);\n    });\n\n    res.resume();\n  });\n\n  req.end(new Buffer(JSON.stringify(options), 'utf8'));\n};\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nHttp.prototype.log = function (level, msg, meta, callback) {\n  var self = this;\n\n  if (typeof meta === 'function') {\n    callback = meta;\n    meta = {};\n  }\n\n  var options = {\n    method: 'collect',\n    params: {\n      level: level,\n      message: msg,\n      meta: meta\n    }\n  };\n\n  if (meta) {\n    if (meta.path) {\n      options.path = meta.path;\n      delete meta.path;\n    }\n\n    if (meta.auth) {\n      options.auth = meta.auth;\n      delete meta.auth;\n    }\n  }\n\n  this._request(options, function (err, res) {\n    if (res && res.statusCode !== 200) {\n      err = new Error('HTTP Status Code: ' + res.statusCode);\n    }\n\n    if (err) return callback(err);\n\n    // TODO: emit 'logged' correctly,\n    // keep track of pending logs.\n    self.emit('logged');\n\n    if (callback) callback(null, true);\n  });\n};\n\n//\n// ### function query (options, callback)\n// #### @options {Object} Loggly-like query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Query the transport. Options object is optional.\n//\nHttp.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var self = this,\n      options = this.normalizeQuery(options);\n\n  options = {\n    method: 'query',\n    params: options\n  };\n\n  if (options.params.path) {\n    options.path = options.params.path;\n    delete options.params.path;\n  }\n\n  if (options.params.auth) {\n    options.auth = options.params.auth;\n    delete options.params.auth;\n  }\n\n  this._request(options, function (err, res, body) {\n    if (res && res.statusCode !== 200) {\n      err = new Error('HTTP Status Code: ' + res.statusCode);\n    }\n\n    if (err) return callback(err);\n\n    if (typeof body === 'string') {\n      try {\n        body = JSON.parse(body);\n      } catch (e) {\n        return callback(e);\n      }\n    }\n\n    callback(null, body);\n  });\n};\n\n//\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for this transport. Options object is optional.\n//\nHttp.prototype.stream = function (options) {\n  options = options || {};\n  \n  var self = this,\n      stream = new Stream,\n      req,\n      buff;\n\n  stream.destroy = function () {\n    req.destroy();\n  };\n\n  options = {\n    method: 'stream',\n    params: options\n  };\n\n  if (options.params.path) {\n    options.path = options.params.path;\n    delete options.params.path;\n  }\n\n  if (options.params.auth) {\n    options.auth = options.params.auth;\n    delete options.params.auth;\n  }\n\n  req = this._request(options);\n  buff = '';\n\n  req.on('data', function (data) {\n    var data = (buff + data).split(/\\n+/),\n        l = data.length - 1,\n        i = 0;\n\n    for (; i < l; i++) {\n      try {\n        stream.emit('log', JSON.parse(data[i]));\n      } catch (e) {\n        stream.emit('error', e);\n      }\n    }\n\n    buff = data[l];\n  });\n\n  req.on('error', function (err) {\n    stream.emit('error', err);\n  });\n\n  return stream;\n};\n"]},"metadata":{},"sourceType":"script"}