{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst command_1 = require(\"../command\");\n\nconst resolveSource_1 = require(\"../extensions/resolveSource\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst logger = require(\"../logger\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst marked = require(\"marked\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nconst FUNCTION_TYPE_REGEX = /\\..+\\.function/;\nexports.default = new command_1.Command(\"ext:info <extensionName>\").description(\"display information about an extension by name (extensionName@x.y.z for a specific version)\").option(\"--markdown\", \"output info in Markdown suitable for constructing a README file\").before(requirePermissions_1.requirePermissions, [\"firebasemods.sources.get\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).action((extensionName, options) => __awaiter(this, void 0, void 0, function* () {\n  const _extensionName$split = extensionName.split(\"@\"),\n        _extensionName$split2 = _slicedToArray(_extensionName$split, 2),\n        name = _extensionName$split2[0],\n        version = _extensionName$split2[1];\n\n  const registryEntry = yield resolveSource_1.resolveRegistryEntry(name);\n  const sourceUrl = yield resolveSource_1.resolveSourceUrl(registryEntry, name, version);\n  const source = yield extensionsApi.getSource(sourceUrl);\n  const spec = source.spec;\n\n  if (!options.markdown) {\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `information about ${extensionName}:\\n`);\n  }\n\n  const lines = [];\n\n  if (options.markdown) {\n    lines.push(`# ${spec.displayName}`);\n  } else {\n    lines.push(`**Name**: ${spec.displayName}`);\n  }\n\n  if (spec.description) {\n    lines.push(`**Description**: ${spec.description}`);\n  }\n\n  if (spec.preinstallContent) {\n    lines.push(\"\", `**Details**: ${spec.preinstallContent}`);\n  }\n\n  if (spec.params && Array.isArray(spec.params) && spec.params.length > 0) {\n    lines.push(\"\", \"**Configuration Parameters:**\");\n\n    _.forEach(spec.params, param => {\n      lines.push(`* ${param.label}` + (param.description ? `: ${param.description}` : \"\"));\n    });\n  }\n\n  const functions = [];\n  const otherResources = [];\n\n  _.forEach(spec.resources, resource => {\n    if (FUNCTION_TYPE_REGEX.test(resource.type)) {\n      functions.push(resource);\n    } else {\n      otherResources.push(resource);\n    }\n  });\n\n  if (functions.length > 0) {\n    lines.push(\"\", \"**Cloud Functions:**\");\n\n    _.forEach(functions, func => {\n      lines.push(`* **${func.name}:** ${func.description}`);\n    });\n  }\n\n  if (otherResources.length > 0) {\n    lines.push(\"\", \"**Other Resources**:\");\n\n    _.forEach(otherResources, resource => {\n      lines.push(`* ${resource.name} (${resource.type})`);\n    });\n  }\n\n  if (spec.apis) {\n    lines.push(\"\", \"**APIs Used**:\");\n\n    _.forEach(spec.apis, api => {\n      lines.push(`* ${api.apiName}` + (api.reason ? ` (Reason: ${api.reason})` : \"\"));\n    });\n  }\n\n  if (spec.roles) {\n    lines.push(\"\", \"**Access Required**:\");\n    lines.push(\"\", \"This extension will operate with the following project IAM roles:\");\n\n    _.forEach(spec.roles, role => {\n      lines.push(`* ${role.role}` + (role.reason ? ` (Reason: ${role.reason})` : \"\"));\n    });\n  }\n\n  if (options.markdown) {\n    logger.info(lines.join(\"\\n\\n\"));\n  } else {\n    marked.setOptions({\n      renderer: new TerminalRenderer()\n    });\n    logger.info(marked(lines.join(\"\\n\")));\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `to install this extension, type ` + clc.bold(`firebase ext:install ${extensionName} --project=YOUR_PROJECT`));\n  }\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/ext-info.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","clc","require","_","command_1","resolveSource_1","extensionsApi","extensionsHelper_1","logger","requirePermissions_1","utils","marked","TerminalRenderer","FUNCTION_TYPE_REGEX","default","Command","description","option","before","requirePermissions","ensureExtensionsApiEnabled","action","extensionName","options","split","name","version","registryEntry","resolveRegistryEntry","sourceUrl","resolveSourceUrl","source","getSource","spec","markdown","logLabeledBullet","logPrefix","lines","push","displayName","preinstallContent","params","Array","isArray","length","forEach","param","label","functions","otherResources","resources","resource","test","type","func","apis","api","apiName","reason","roles","role","info","join","setOptions","renderer","bold"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst command_1 = require(\"../command\");\nconst resolveSource_1 = require(\"../extensions/resolveSource\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst logger = require(\"../logger\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst marked = require(\"marked\");\nconst TerminalRenderer = require(\"marked-terminal\");\nconst FUNCTION_TYPE_REGEX = /\\..+\\.function/;\nexports.default = new command_1.Command(\"ext:info <extensionName>\")\n    .description(\"display information about an extension by name (extensionName@x.y.z for a specific version)\")\n    .option(\"--markdown\", \"output info in Markdown suitable for constructing a README file\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasemods.sources.get\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .action((extensionName, options) => __awaiter(this, void 0, void 0, function* () {\n    const [name, version] = extensionName.split(\"@\");\n    const registryEntry = yield resolveSource_1.resolveRegistryEntry(name);\n    const sourceUrl = yield resolveSource_1.resolveSourceUrl(registryEntry, name, version);\n    const source = yield extensionsApi.getSource(sourceUrl);\n    const spec = source.spec;\n    if (!options.markdown) {\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, `information about ${extensionName}:\\n`);\n    }\n    const lines = [];\n    if (options.markdown) {\n        lines.push(`# ${spec.displayName}`);\n    }\n    else {\n        lines.push(`**Name**: ${spec.displayName}`);\n    }\n    if (spec.description) {\n        lines.push(`**Description**: ${spec.description}`);\n    }\n    if (spec.preinstallContent) {\n        lines.push(\"\", `**Details**: ${spec.preinstallContent}`);\n    }\n    if (spec.params && Array.isArray(spec.params) && spec.params.length > 0) {\n        lines.push(\"\", \"**Configuration Parameters:**\");\n        _.forEach(spec.params, (param) => {\n            lines.push(`* ${param.label}` + (param.description ? `: ${param.description}` : \"\"));\n        });\n    }\n    const functions = [];\n    const otherResources = [];\n    _.forEach(spec.resources, (resource) => {\n        if (FUNCTION_TYPE_REGEX.test(resource.type)) {\n            functions.push(resource);\n        }\n        else {\n            otherResources.push(resource);\n        }\n    });\n    if (functions.length > 0) {\n        lines.push(\"\", \"**Cloud Functions:**\");\n        _.forEach(functions, (func) => {\n            lines.push(`* **${func.name}:** ${func.description}`);\n        });\n    }\n    if (otherResources.length > 0) {\n        lines.push(\"\", \"**Other Resources**:\");\n        _.forEach(otherResources, (resource) => {\n            lines.push(`* ${resource.name} (${resource.type})`);\n        });\n    }\n    if (spec.apis) {\n        lines.push(\"\", \"**APIs Used**:\");\n        _.forEach(spec.apis, (api) => {\n            lines.push(`* ${api.apiName}` + (api.reason ? ` (Reason: ${api.reason})` : \"\"));\n        });\n    }\n    if (spec.roles) {\n        lines.push(\"\", \"**Access Required**:\");\n        lines.push(\"\", \"This extension will operate with the following project IAM roles:\");\n        _.forEach(spec.roles, (role) => {\n            lines.push(`* ${role.role}` + (role.reason ? ` (Reason: ${role.reason})` : \"\"));\n        });\n    }\n    if (options.markdown) {\n        logger.info(lines.join(\"\\n\\n\"));\n    }\n    else {\n        marked.setOptions({\n            renderer: new TerminalRenderer(),\n        });\n        logger.info(marked(lines.join(\"\\n\")));\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, `to install this extension, type ` +\n            clc.bold(`firebase ext:install ${extensionName} --project=YOUR_PROJECT`));\n    }\n}));\n"]},"metadata":{},"sourceType":"script"}