{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst projects_1 = require(\"../management/projects\");\n\nconst requireAuth = require(\"../requireAuth\");\n\nmodule.exports = new command_1.Command(\"projects:addfirebase [projectId]\").description(\"add Firebase resources to a Google Cloud Platform project\").before(requireAuth).action((projectId, options) => __awaiter(this, void 0, void 0, function* () {\n  if (!options.nonInteractive && !projectId) {\n    projectId = yield projects_1.promptAvailableProjectId();\n  }\n\n  if (!projectId) {\n    throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n  }\n\n  return projects_1.addFirebaseToCloudProjectAndLog(projectId);\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/projects-addfirebase.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","command_1","require","error_1","projects_1","requireAuth","module","Command","description","before","action","projectId","options","nonInteractive","promptAvailableProjectId","FirebaseError","addFirebaseToCloudProjectAndLog"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,SAAO,KAAKD,CAAC,KAAKA,CAAC,GAAGE,OAAT,CAAN,EAAyB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAACO,IAAV,CAAeF,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBJ,KAAlB,EAAyB;AAAE,UAAI;AAAEC,QAAAA,IAAI,CAACN,SAAS,CAAC,OAAD,CAAT,CAAmBK,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOG,CAAP,EAAU;AAAEL,QAAAA,MAAM,CAACK,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACL,KAAR,CAArB,GAAsC,IAAIN,CAAJ,CAAM,UAAUG,OAAV,EAAmB;AAAEA,QAAAA,OAAO,CAACQ,MAAM,CAACL,KAAR,CAAP;AAAwB,OAAnD,EAAqDO,IAArD,CAA0DR,SAA1D,EAAqEK,QAArE,CAAtC;AAAuH;;AAC/IH,IAAAA,IAAI,CAAC,CAACN,SAAS,GAAGA,SAAS,CAACa,KAAV,CAAgBhB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDS,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CAPD;;AAQAO,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEX,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMY,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,gBAAD,CAA3B;;AACAI,MAAM,CAACN,OAAP,GAAiB,IAAIC,SAAS,CAACM,OAAd,CAAsB,kCAAtB,EACZC,WADY,CACA,2DADA,EAEZC,MAFY,CAELJ,WAFK,EAGZK,MAHY,CAGL,CAACC,SAAD,EAAYC,OAAZ,KAAwBhC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAC7E,MAAI,CAACgC,OAAO,CAACC,cAAT,IAA2B,CAACF,SAAhC,EAA2C;AACvCA,IAAAA,SAAS,GAAG,MAAMP,UAAU,CAACU,wBAAX,EAAlB;AACH;;AACD,MAAI,CAACH,SAAL,EAAgB;AACZ,UAAM,IAAIR,OAAO,CAACY,aAAZ,CAA0B,4BAA1B,CAAN;AACH;;AACD,SAAOX,UAAU,CAACY,+BAAX,CAA2CL,SAA3C,CAAP;AACH,CAR4C,CAH5B,CAAjB","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst projects_1 = require(\"../management/projects\");\nconst requireAuth = require(\"../requireAuth\");\nmodule.exports = new command_1.Command(\"projects:addfirebase [projectId]\")\n    .description(\"add Firebase resources to a Google Cloud Platform project\")\n    .before(requireAuth)\n    .action((projectId, options) => __awaiter(this, void 0, void 0, function* () {\n    if (!options.nonInteractive && !projectId) {\n        projectId = yield projects_1.promptAvailableProjectId();\n    }\n    if (!projectId) {\n        throw new error_1.FirebaseError(\"Project ID cannot be empty\");\n    }\n    return projects_1.addFirebaseToCloudProjectAndLog(projectId);\n}));\n"]},"metadata":{},"sourceType":"script"}