{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar api = require(\"../../api\");\n\nvar _require = require(\"../../prompt\"),\n    prompt = _require.prompt,\n    promptOnce = _require.promptOnce;\n\nvar logger = require(\"../../logger\");\n\nvar utils = require(\"../../utils\");\n\nvar fsutils = require(\"../../fsutils\");\n\nvar defaultRules = JSON.stringify({\n  rules: {\n    \".read\": \"auth != null\",\n    \".write\": \"auth != null\"\n  }\n}, null, 2);\n\nvar _getDBRules = function (instance) {\n  if (!instance) {\n    return Promise.resolve(defaultRules);\n  }\n\n  return api.request(\"GET\", \"/.settings/rules.json\", {\n    auth: true,\n    origin: utils.addSubdomain(api.realtimeOrigin, instance)\n  }).then(function (response) {\n    return response.body;\n  });\n};\n\nvar _writeDBRules = function (instance, filename, config) {\n  return _getDBRules(instance).then(function (rules) {\n    return config.writeProjectFile(filename, rules);\n  }).then(function () {\n    utils.logSuccess(\"Database Rules for \" + clc.bold(instance) + \" have been downloaded to \" + clc.bold(filename) + \".\");\n    logger.info(\"Future modifications to \" + clc.bold(filename) + \" will update Database Rules when you run\");\n    logger.info(clc.bold(\"firebase deploy\") + \".\");\n  });\n};\n\nmodule.exports = function (setup, config) {\n  setup.config.database = {};\n  var instance = setup.instance;\n  var filename = null;\n  logger.info();\n  logger.info(\"Firebase Realtime Database Rules allow you to define how your data should be\");\n  logger.info(\"structured and when your data can be read from and written to.\");\n  logger.info();\n  return prompt(setup.config.database, [{\n    type: \"input\",\n    name: \"rules\",\n    message: \"What file should be used for Database Rules?\",\n    default: \"database.rules.json\"\n  }]).then(function () {\n    filename = setup.config.database.rules;\n\n    if (fsutils.fileExistsSync(filename)) {\n      var msg = \"File \" + clc.bold(filename) + \" already exists.\" + \" Do you want to overwrite it with the Database Rules for \" + clc.bold(instance) + \" from the Firebase Console?\";\n      return promptOnce({\n        type: \"confirm\",\n        message: msg,\n        default: false\n      });\n    }\n\n    return Promise.resolve(true);\n  }).then(function (overwrite) {\n    if (overwrite) {\n      return _writeDBRules(instance, filename, config);\n    }\n\n    logger.info(\"Skipping overwrite of Database Rules.\");\n    logger.info(\"The rules defined in \" + clc.bold(filename) + \" will be published when you do \" + clc.bold(\"firebase deploy\") + \".\");\n    return Promise.resolve();\n  });\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/init/features/database.js"],"names":["clc","require","api","prompt","promptOnce","logger","utils","fsutils","defaultRules","JSON","stringify","rules","_getDBRules","instance","Promise","resolve","request","auth","origin","addSubdomain","realtimeOrigin","then","response","body","_writeDBRules","filename","config","writeProjectFile","logSuccess","bold","info","module","exports","setup","database","type","name","message","default","fileExistsSync","msg","overwrite"],"mappings":"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","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar api = require(\"../../api\");\nvar { prompt, promptOnce } = require(\"../../prompt\");\nvar logger = require(\"../../logger\");\nvar utils = require(\"../../utils\");\nvar fsutils = require(\"../../fsutils\");\nvar defaultRules = JSON.stringify({ rules: { \".read\": \"auth != null\", \".write\": \"auth != null\" } }, null, 2);\nvar _getDBRules = function (instance) {\n    if (!instance) {\n        return Promise.resolve(defaultRules);\n    }\n    return api\n        .request(\"GET\", \"/.settings/rules.json\", {\n        auth: true,\n        origin: utils.addSubdomain(api.realtimeOrigin, instance),\n    })\n        .then(function (response) {\n        return response.body;\n    });\n};\nvar _writeDBRules = function (instance, filename, config) {\n    return _getDBRules(instance)\n        .then(function (rules) {\n        return config.writeProjectFile(filename, rules);\n    })\n        .then(function () {\n        utils.logSuccess(\"Database Rules for \" +\n            clc.bold(instance) +\n            \" have been downloaded to \" +\n            clc.bold(filename) +\n            \".\");\n        logger.info(\"Future modifications to \" + clc.bold(filename) + \" will update Database Rules when you run\");\n        logger.info(clc.bold(\"firebase deploy\") + \".\");\n    });\n};\nmodule.exports = function (setup, config) {\n    setup.config.database = {};\n    var instance = setup.instance;\n    var filename = null;\n    logger.info();\n    logger.info(\"Firebase Realtime Database Rules allow you to define how your data should be\");\n    logger.info(\"structured and when your data can be read from and written to.\");\n    logger.info();\n    return prompt(setup.config.database, [\n        {\n            type: \"input\",\n            name: \"rules\",\n            message: \"What file should be used for Database Rules?\",\n            default: \"database.rules.json\",\n        },\n    ])\n        .then(function () {\n        filename = setup.config.database.rules;\n        if (fsutils.fileExistsSync(filename)) {\n            var msg = \"File \" +\n                clc.bold(filename) +\n                \" already exists.\" +\n                \" Do you want to overwrite it with the Database Rules for \" +\n                clc.bold(instance) +\n                \" from the Firebase Console?\";\n            return promptOnce({\n                type: \"confirm\",\n                message: msg,\n                default: false,\n            });\n        }\n        return Promise.resolve(true);\n    })\n        .then(function (overwrite) {\n        if (overwrite) {\n            return _writeDBRules(instance, filename, config);\n        }\n        logger.info(\"Skipping overwrite of Database Rules.\");\n        logger.info(\"The rules defined in \" +\n            clc.bold(filename) +\n            \" will be published when you do \" +\n            clc.bold(\"firebase deploy\") +\n            \".\");\n        return Promise.resolve();\n    });\n};\n"]},"metadata":{},"sourceType":"script"}