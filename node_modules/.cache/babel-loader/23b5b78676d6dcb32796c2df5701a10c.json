{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar fs = require(\"fs\");\n\nvar api = require(\"../../api\");\n\nvar logger = require(\"../../logger\");\n\nvar _require = require(\"../../prompt\"),\n    prompt = _require.prompt;\n\nvar INDEX_TEMPLATE = fs.readFileSync(__dirname + \"/../../../templates/init/hosting/index.html\", \"utf8\");\nvar MISSING_TEMPLATE = fs.readFileSync(__dirname + \"/../../../templates/init/hosting/404.html\", \"utf8\");\nvar DEFAULT_IGNORES = [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"];\n\nmodule.exports = function (setup, config) {\n  setup.hosting = {};\n  logger.info();\n  logger.info(\"Your \" + clc.bold(\"public\") + \" directory is the folder (relative to your project directory) that\");\n  logger.info(\"will contain Hosting assets to be uploaded with \" + clc.bold(\"firebase deploy\") + \". If you\");\n  logger.info(\"have a build process for your assets, use your build's output directory.\");\n  logger.info();\n  return prompt(setup.hosting, [{\n    name: \"public\",\n    type: \"input\",\n    default: \"public\",\n    message: \"What do you want to use as your public directory?\"\n  }, {\n    name: \"spa\",\n    type: \"confirm\",\n    default: false,\n    message: \"Configure as a single-page app (rewrite all urls to /index.html)?\"\n  }]).then(function () {\n    setup.config.hosting = {\n      public: setup.hosting.public,\n      ignore: DEFAULT_IGNORES\n    };\n    var next;\n\n    if (setup.hosting.spa) {\n      setup.config.hosting.rewrites = [{\n        source: \"**\",\n        destination: \"/index.html\"\n      }];\n      next = Promise.resolve();\n    } else {\n      next = config.askWriteProjectFile(setup.hosting.public + \"/404.html\", MISSING_TEMPLATE);\n    }\n\n    return next.then(function () {\n      return api.request(\"GET\", \"/firebasejs/releases.json\", {\n        origin: \"https://www.gstatic.com\",\n        json: true\n      });\n    }).then(function (response) {\n      return config.askWriteProjectFile(setup.hosting.public + \"/index.html\", INDEX_TEMPLATE.replace(/{{VERSION}}/g, response.body.current.version));\n    });\n  });\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/init/features/hosting.js"],"names":["clc","require","fs","api","logger","prompt","INDEX_TEMPLATE","readFileSync","__dirname","MISSING_TEMPLATE","DEFAULT_IGNORES","module","exports","setup","config","hosting","info","bold","name","type","default","message","then","public","ignore","next","spa","rewrites","source","destination","Promise","resolve","askWriteProjectFile","request","origin","json","response","replace","body","current","version"],"mappings":"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","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar fs = require(\"fs\");\nvar api = require(\"../../api\");\nvar logger = require(\"../../logger\");\nvar { prompt } = require(\"../../prompt\");\nvar INDEX_TEMPLATE = fs.readFileSync(__dirname + \"/../../../templates/init/hosting/index.html\", \"utf8\");\nvar MISSING_TEMPLATE = fs.readFileSync(__dirname + \"/../../../templates/init/hosting/404.html\", \"utf8\");\nvar DEFAULT_IGNORES = [\"firebase.json\", \"**/.*\", \"**/node_modules/**\"];\nmodule.exports = function (setup, config) {\n    setup.hosting = {};\n    logger.info();\n    logger.info(\"Your \" +\n        clc.bold(\"public\") +\n        \" directory is the folder (relative to your project directory) that\");\n    logger.info(\"will contain Hosting assets to be uploaded with \" + clc.bold(\"firebase deploy\") + \". If you\");\n    logger.info(\"have a build process for your assets, use your build's output directory.\");\n    logger.info();\n    return prompt(setup.hosting, [\n        {\n            name: \"public\",\n            type: \"input\",\n            default: \"public\",\n            message: \"What do you want to use as your public directory?\",\n        },\n        {\n            name: \"spa\",\n            type: \"confirm\",\n            default: false,\n            message: \"Configure as a single-page app (rewrite all urls to /index.html)?\",\n        },\n    ]).then(function () {\n        setup.config.hosting = {\n            public: setup.hosting.public,\n            ignore: DEFAULT_IGNORES,\n        };\n        var next;\n        if (setup.hosting.spa) {\n            setup.config.hosting.rewrites = [{ source: \"**\", destination: \"/index.html\" }];\n            next = Promise.resolve();\n        }\n        else {\n            next = config.askWriteProjectFile(setup.hosting.public + \"/404.html\", MISSING_TEMPLATE);\n        }\n        return next\n            .then(function () {\n            return api.request(\"GET\", \"/firebasejs/releases.json\", {\n                origin: \"https://www.gstatic.com\",\n                json: true,\n            });\n        })\n            .then(function (response) {\n            return config.askWriteProjectFile(setup.hosting.public + \"/index.html\", INDEX_TEMPLATE.replace(/{{VERSION}}/g, response.body.current.version));\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"script"}