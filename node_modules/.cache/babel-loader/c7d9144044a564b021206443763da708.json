{"ast":null,"code":"/*\n * pkginfo.js: Top-level include for the pkginfo module\n *\n * (C) 2011, Charlie Robbins\n *\n */\nvar fs = require('fs'),\n    path = require('path'); //\n// ### function pkginfo ([options, 'property', 'property' ..])\n// #### @pmodule {Module} Parent module to read from.\n// #### @options {Object|Array|string} **Optional** Options used when exposing properties.\n// #### @arguments {string...} **Optional** Specified properties to expose.\n// Exposes properties from the package.json file for the parent module on \n// it's exports. Valid usage:\n//\n// `require('pkginfo')()`\n//\n// `require('pkginfo')('version', 'author');`\n//\n// `require('pkginfo')(['version', 'author']);`\n//\n// `require('pkginfo')({ include: ['version', 'author'] });`\n//\n\n\nvar pkginfo = module.exports = function (pmodule, options) {\n  var args = [].slice.call(arguments, 2).filter(function (arg) {\n    return typeof arg === 'string';\n  }); //\n  // **Parse variable arguments**\n  //\n\n  if (Array.isArray(options)) {\n    //\n    // If the options passed in is an Array assume that\n    // it is the Array of properties to expose from the\n    // on the package.json file on the parent module.\n    //\n    options = {\n      include: options\n    };\n  } else if (typeof options === 'string') {\n    //\n    // Otherwise if the first argument is a string, then\n    // assume that it is the first property to expose from\n    // the package.json file on the parent module.\n    //\n    options = {\n      include: [options]\n    };\n  } //\n  // **Setup default options**\n  //\n\n\n  options = options || {}; // ensure that includes have been defined\n\n  options.include = options.include || [];\n\n  if (args.length > 0) {\n    //\n    // If additional string arguments have been passed in\n    // then add them to the properties to expose on the \n    // parent module. \n    //\n    options.include = options.include.concat(args);\n  }\n\n  var pkg = pkginfo.read(pmodule, options.dir).package;\n  Object.keys(pkg).forEach(function (key) {\n    if (options.include.length > 0 && !~options.include.indexOf(key)) {\n      return;\n    }\n\n    if (!pmodule.exports[key]) {\n      pmodule.exports[key] = pkg[key];\n    }\n  });\n  return pkginfo;\n}; //\n// ### function find (dir)\n// #### @pmodule {Module} Parent module to read from.\n// #### @dir {string} **Optional** Directory to start search from.\n// Searches up the directory tree from `dir` until it finds a directory\n// which contains a `package.json` file. \n//\n\n\npkginfo.find = function (pmodule, dir) {\n  if (!dir) {\n    dir = path.dirname(pmodule.filename);\n  }\n\n  var files = fs.readdirSync(dir);\n\n  if (~files.indexOf('package.json')) {\n    return path.join(dir, 'package.json');\n  }\n\n  if (dir === '/') {\n    throw new Error('Could not find package.json up from: ' + dir);\n  } else if (!dir || dir === '.') {\n    throw new Error('Cannot find package.json from unspecified directory');\n  }\n\n  return pkginfo.find(pmodule, path.dirname(dir));\n}; //\n// ### function read (pmodule, dir)\n// #### @pmodule {Module} Parent module to read from.\n// #### @dir {string} **Optional** Directory to start search from.\n// Searches up the directory tree from `dir` until it finds a directory\n// which contains a `package.json` file and returns the package information.\n//\n\n\npkginfo.read = function (pmodule, dir) {\n  dir = pkginfo.find(pmodule, dir);\n  var data = fs.readFileSync(dir).toString();\n  return {\n    dir: dir,\n    package: JSON.parse(data)\n  };\n}; //\n// Call `pkginfo` on this module and expose version.\n//\n\n\npkginfo(module, {\n  dir: __dirname,\n  include: ['version'],\n  target: pkginfo\n});","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/pkginfo/lib/pkginfo.js"],"names":["fs","require","path","pkginfo","module","exports","pmodule","options","args","slice","call","arguments","filter","arg","Array","isArray","include","length","concat","pkg","read","dir","package","Object","keys","forEach","key","indexOf","find","dirname","filename","files","readdirSync","join","Error","data","readFileSync","toString","JSON","parse","__dirname","target"],"mappings":"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","sourcesContent":["/*\n * pkginfo.js: Top-level include for the pkginfo module\n *\n * (C) 2011, Charlie Robbins\n *\n */\n \nvar fs = require('fs'),\n    path = require('path');\n\n//\n// ### function pkginfo ([options, 'property', 'property' ..])\n// #### @pmodule {Module} Parent module to read from.\n// #### @options {Object|Array|string} **Optional** Options used when exposing properties.\n// #### @arguments {string...} **Optional** Specified properties to expose.\n// Exposes properties from the package.json file for the parent module on \n// it's exports. Valid usage:\n//\n// `require('pkginfo')()`\n//\n// `require('pkginfo')('version', 'author');`\n//\n// `require('pkginfo')(['version', 'author']);`\n//\n// `require('pkginfo')({ include: ['version', 'author'] });`\n//\nvar pkginfo = module.exports = function (pmodule, options) {\n  var args = [].slice.call(arguments, 2).filter(function (arg) {\n    return typeof arg === 'string';\n  });\n  \n  //\n  // **Parse variable arguments**\n  //\n  if (Array.isArray(options)) {\n    //\n    // If the options passed in is an Array assume that\n    // it is the Array of properties to expose from the\n    // on the package.json file on the parent module.\n    //\n    options = { include: options };\n  }\n  else if (typeof options === 'string') {\n    //\n    // Otherwise if the first argument is a string, then\n    // assume that it is the first property to expose from\n    // the package.json file on the parent module.\n    //\n    options = { include: [options] };\n  }\n  \n  //\n  // **Setup default options**\n  //\n  options = options || {};\n  \n  // ensure that includes have been defined\n  options.include = options.include || [];\n  \n  if (args.length > 0) {\n    //\n    // If additional string arguments have been passed in\n    // then add them to the properties to expose on the \n    // parent module. \n    //\n    options.include = options.include.concat(args);\n  }\n  \n  var pkg = pkginfo.read(pmodule, options.dir).package;\n  Object.keys(pkg).forEach(function (key) {\n    if (options.include.length > 0 && !~options.include.indexOf(key)) {\n      return;\n    }\n    \n    if (!pmodule.exports[key]) {\n      pmodule.exports[key] = pkg[key];\n    }\n  });\n  \n  return pkginfo;\n};\n\n//\n// ### function find (dir)\n// #### @pmodule {Module} Parent module to read from.\n// #### @dir {string} **Optional** Directory to start search from.\n// Searches up the directory tree from `dir` until it finds a directory\n// which contains a `package.json` file. \n//\npkginfo.find = function (pmodule, dir) {\n  if (! dir) {\n    dir = path.dirname(pmodule.filename);\n  }\n  \n  var files = fs.readdirSync(dir);\n  \n  if (~files.indexOf('package.json')) {\n    return path.join(dir, 'package.json');\n  }\n  \n  if (dir === '/') {\n    throw new Error('Could not find package.json up from: ' + dir);\n  }\n  else if (!dir || dir === '.') {\n    throw new Error('Cannot find package.json from unspecified directory');\n  }\n  \n  return pkginfo.find(pmodule, path.dirname(dir));\n};\n\n//\n// ### function read (pmodule, dir)\n// #### @pmodule {Module} Parent module to read from.\n// #### @dir {string} **Optional** Directory to start search from.\n// Searches up the directory tree from `dir` until it finds a directory\n// which contains a `package.json` file and returns the package information.\n//\npkginfo.read = function (pmodule, dir) { \n  dir = pkginfo.find(pmodule, dir);\n  \n  var data = fs.readFileSync(dir).toString();\n      \n  return {\n    dir: dir, \n    package: JSON.parse(data)\n  };\n};\n\n//\n// Call `pkginfo` on this module and expose version.\n//\npkginfo(module, {\n  dir: __dirname,\n  include: ['version'],\n  target: pkginfo\n});"]},"metadata":{},"sourceType":"script"}