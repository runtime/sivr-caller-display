{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019, Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst call_1 = require(\"../call\");\n\nconst gax_1 = require(\"../gax\");\n\nconst longrunning_1 = require(\"./longrunning\");\n\nclass LongrunningApiCaller {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  constructor(longrunningDescriptor) {\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n\n  init(settings, callback) {\n    if (callback) {\n      return new call_1.OngoingCall(callback);\n    }\n\n    return new call_1.OngoingCallPromise(settings.promise);\n  }\n\n  wrap(func) {\n    return func;\n  }\n\n  call(apiCall, argument, settings, canceller) {\n    canceller.call((argument, callback) => {\n      return this._wrapOperation(apiCall, settings, argument, callback);\n    }, argument);\n  }\n\n  _wrapOperation(apiCall, settings, argument, callback) {\n    let backoffSettings = settings.longrunning;\n\n    if (!backoffSettings) {\n      backoffSettings = gax_1.createDefaultBackoffSettings();\n    }\n\n    const longrunningDescriptor = this.longrunningDescriptor;\n    return apiCall(argument, (err, rawResponse) => {\n      if (err) {\n        callback(err, null, null, rawResponse);\n        return;\n      }\n\n      const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n      callback(null, operation, rawResponse);\n    });\n  }\n\n  fail(canceller, err) {\n    canceller.callback(err);\n  }\n\n  result(canceller) {\n    return canceller.promise;\n  }\n\n}\n\nexports.LongrunningApiCaller = LongrunningApiCaller;","map":{"version":3,"sources":["../../../src/longRunningCalls/longRunningApiCaller.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AASA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAIA,MAAa,oBAAb,CAAiC;AAE/B;;;;;;;;;AASA,EAAA,WAAA,CAAY,qBAAZ,EAAwD;AACtD,SAAK,qBAAL,GAA6B,qBAA7B;AACD;;AAED,EAAA,IAAI,CACF,QADE,EAEF,QAFE,EAEoB;AAEtB,QAAI,QAAJ,EAAc;AACZ,aAAO,IAAI,MAAA,CAAA,WAAJ,CAAgB,QAAhB,CAAP;AACD;;AACD,WAAO,IAAI,MAAA,CAAA,kBAAJ,CAAuB,QAAQ,CAAC,OAAhC,CAAP;AACD;;AAED,EAAA,IAAI,CAAC,IAAD,EAAe;AACjB,WAAO,IAAP;AACD;;AAED,EAAA,IAAI,CACF,OADE,EAEF,QAFE,EAGF,QAHE,EAIF,SAJE,EAI2B;AAE7B,IAAA,SAAS,CAAC,IAAV,CAAe,CAAC,QAAD,EAAW,QAAX,KAAuB;AACpC,aAAO,KAAK,cAAL,CAAoB,OAApB,EAA6B,QAA7B,EAAuC,QAAvC,EAAiD,QAAjD,CAAP;AACD,KAFD,EAEG,QAFH;AAGD;;AAEO,EAAA,cAAc,CACpB,OADoB,EAEpB,QAFoB,EAGpB,QAHoB,EAIpB,QAJoB,EAIC;AAErB,QAAI,eAAe,GAAgC,QAAQ,CAAC,WAA5D;;AACA,QAAI,CAAC,eAAL,EAAsB;AACpB,MAAA,eAAe,GAAG,KAAA,CAAA,4BAAA,EAAlB;AACD;;AAED,UAAM,qBAAqB,GAAG,KAAK,qBAAnC;AACA,WAAO,OAAO,CACZ,QADY,EAEZ,CAAC,GAAD,EAA0B,WAA1B,KAAgE;AAC9D,UAAI,GAAJ,EAAS;AACP,QAAA,QAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,WAAlB,CAAR;AACA;AACD;;AAED,YAAM,SAAS,GAAG,IAAI,aAAA,CAAA,SAAJ,CAChB,WADgB,EAEhB,qBAFgB,EAGhB,eAHgB,EAIhB,QAJgB,CAAlB;AAOA,MAAA,QAAQ,CAAC,IAAD,EAAO,SAAP,EAAkB,WAAlB,CAAR;AACD,KAhBW,CAAd;AAkBD;;AAED,EAAA,IAAI,CAAC,SAAD,EAAgC,GAAhC,EAAgD;AAClD,IAAA,SAAS,CAAC,QAAV,CAAoB,GAApB;AACD;;AAED,EAAA,MAAM,CAAC,SAAD,EAA8B;AAClC,WAAO,SAAS,CAAC,OAAjB;AACD;;AA9E8B;;AAAjC,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019, Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst call_1 = require(\"../call\");\nconst gax_1 = require(\"../gax\");\nconst longrunning_1 = require(\"./longrunning\");\nclass LongrunningApiCaller {\n    /**\n     * Creates an API caller that performs polling on a long running operation.\n     *\n     * @private\n     * @constructor\n     * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n     * decoders used for unpacking responses and the operationsClient\n     * used for polling the operation.\n     */\n    constructor(longrunningDescriptor) {\n        this.longrunningDescriptor = longrunningDescriptor;\n    }\n    init(settings, callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise(settings.promise);\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call((argument, callback) => {\n            return this._wrapOperation(apiCall, settings, argument, callback);\n        }, argument);\n    }\n    _wrapOperation(apiCall, settings, argument, callback) {\n        let backoffSettings = settings.longrunning;\n        if (!backoffSettings) {\n            backoffSettings = gax_1.createDefaultBackoffSettings();\n        }\n        const longrunningDescriptor = this.longrunningDescriptor;\n        return apiCall(argument, (err, rawResponse) => {\n            if (err) {\n                callback(err, null, null, rawResponse);\n                return;\n            }\n            const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n            callback(null, operation, rawResponse);\n        });\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;\n//# sourceMappingURL=longRunningApiCaller.js.map"]},"metadata":{},"sourceType":"script"}