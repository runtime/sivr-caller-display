{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst paginator_1 = require(\"@google-cloud/paginator\");\n\nconst projectify_1 = require(\"@google-cloud/projectify\");\n\nconst promisify_1 = require(\"@google-cloud/promisify\");\n\nconst extend = require(\"extend\");\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst grpc = require(\"@grpc/grpc-js\");\n\nconst PKG = require('../../package.json');\n\nconst v1 = require('./v1');\n\nconst snapshot_1 = require(\"./snapshot\");\n\nconst subscription_1 = require(\"./subscription\");\n\nconst topic_1 = require(\"./topic\");\n\nconst opts = {};\n/**\n * Project ID placeholder.\n * @type {string}\n * @private\n */\n\nconst PROJECT_ID_PLACEHOLDER = '{{projectId}}';\n/**\n * @typedef {object} ClientConfig\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [apiEndpoint] The `apiEndpoint` from options will set the\n *     host. If not set, the `PUBSUB_EMULATOR_HOST` environment variable from\n *     the gcloud SDK is honored, otherwise the actual API endpoint will be\n *     used.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {number} [maxRetries=3] Maximum number of automatic retries\n *     attempted before returning the error.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n\n/**\n * [Cloud Pub/Sub](https://developers.google.com/pubsub/overview) is a\n * reliable, many-to-many, asynchronous messaging service from Cloud\n * Platform.\n *\n * @class\n *\n * @see [Cloud Pub/Sub overview]{@link https://developers.google.com/pubsub/overview}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example <caption>Import the client library</caption>\n * const {PubSub} = require('@google-cloud/pubsub');\n *\n * @example <caption>Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:</caption>\n * const pubsub = new PubSub();\n *\n * @example <caption>Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:</caption>\n * const pubsub = new PubSub({\n *   projectId: 'your-project-id',\n *   keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:pubsub_quickstart_create_topic\n * Full quickstart example:\n */\n\nclass PubSub {\n  constructor(options) {\n    this.getSubscriptionsStream = paginator_1.paginator.streamify('getSubscriptions');\n    this.getSnapshotsStream = paginator_1.paginator.streamify('getSnapshots');\n    this.getTopicsStream = paginator_1.paginator.streamify('getTopics');\n    options = options || {}; // Determine what scopes are needed.\n    // It is the union of the scopes on both clients.\n\n    const clientClasses = [v1.SubscriberClient, v1.PublisherClient];\n    const allScopes = {};\n\n    for (const clientClass of clientClasses) {\n      for (const scope of clientClass.scopes) {\n        allScopes[scope] = true;\n      }\n    }\n\n    this.options = Object.assign({\n      libName: 'gccl',\n      libVersion: PKG.version,\n      scopes: Object.keys(allScopes)\n    }, options);\n    /**\n     * @name PubSub#isEmulator\n     * @type {boolean}\n     */\n\n    this.isEmulator = false;\n    this.determineBaseUrl_();\n    this.api = {};\n    this.auth = new google_auth_library_1.GoogleAuth(this.options);\n    this.projectId = this.options.projectId || PROJECT_ID_PLACEHOLDER;\n\n    if (this.options.promise) {\n      this.Promise = this.options.promise;\n    }\n  }\n  /**\n   * @typedef {array} CreateSubscriptionResponse\n   * @property {Subscription} 0 The new {@link Subscription}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback CreateSubscriptionCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Subscription} Subscription\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Options for creating a subscription.\n   *\n   * See a [Subscription\n   * resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n   *\n   * @typedef {object} CreateSubscriptionRequest\n   * @property {DeadLetterPolicy} [deadLetterPolicy] A policy that specifies the\n   *     conditions for dead lettering messages in this subscription.\n   * @property {object} [flowControl] Flow control configurations for\n   *     receiving messages. Note that these options do not persist across\n   *     subscription instances.\n   * @property {number} [flowControl.maxBytes] The maximum number of bytes\n   *     in un-acked messages to allow before the subscription pauses incoming\n   *     messages. Defaults to 20% of free memory.\n   * @property {number} [flowControl.maxMessages=Infinity] The maximum number\n   *     of un-acked messages to allow before the subscription pauses incoming\n   *     messages.\n   * @property {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n   * @property {number|google.protobuf.Duration} [messageRetentionDuration] Set\n   *     this to override the default duration of 7 days. This value is expected\n   *     in seconds. Acceptable values are in the range of 10 minutes and 7\n   *     days.\n   * @property {string} [pushEndpoint] A URL to a custom endpoint that\n   *     messages should be pushed to.\n   * @property {boolean} [retainAckedMessages=false] If set, acked messages\n   *     are retained in the subscription's backlog for the length of time\n   *     specified by `options.messageRetentionDuration`.\n   * @property {ExpirationPolicy} [expirationPolicy] A policy that specifies\n   * the conditions for this subscription's expiration.\n   */\n\n  /**\n   * Create a subscription to a topic.\n   *\n   * @see [Subscriptions: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/create}\n   * @see {@link Topic#createSubscription}\n   *\n   * @throws {Error} If a Topic instance or topic name is not provided.\n   * @throws {Error} If a subscription name is not provided.\n   *\n   * @param {Topic|string} topic The Topic to create a subscription to.\n   * @param {string} name The name of the subscription.\n   * @param {CreateSubscriptionRequest} [options] See a [Subscription resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n   * @param {CreateSubscriptionCallback} [callback] Callback function.\n   * @returns {Promise<CreateSubscriptionResponse>}\n   *\n   * @example <caption>Subscribe to a topic.</caption>\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = 'messageCenter';\n   * const name = 'newMessages';\n   *\n   * const callback = function(err, subscription, apiResponse) {};\n   *\n   * pubsub.createSubscription(topic, name, callback);\n   *\n   * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n   * pubsub.createSubscription(topic, name)\n   *   .then(function(data) {\n   *     const subscription = data[0];\n   *     const apiResponse = data[1];\n   *   });\n   */\n\n\n  createSubscription(topic, name, optionsOrCallback, callback) {\n    if (typeof topic !== 'string' && !(topic instanceof topic_1.Topic)) {\n      throw new Error('A Topic is required for a new subscription.');\n    }\n\n    if (typeof name !== 'string') {\n      throw new Error('A subscription name is required.');\n    }\n\n    if (typeof topic === 'string') {\n      topic = this.topic(topic);\n    }\n\n    let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback; // Make a deep copy of options to not pollute caller object.\n\n    options = extend(true, {}, options);\n    const gaxOpts = options.gaxOpts;\n    const flowControl = options.flowControl;\n    delete options.gaxOpts;\n    delete options.flowControl;\n    const metadata = subscription_1.Subscription.formatMetadata_(options);\n    let subscriptionCtorOptions = flowControl ? {\n      flowControl\n    } : {};\n    subscriptionCtorOptions = Object.assign(subscriptionCtorOptions, metadata);\n    const subscription = this.subscription(name, subscriptionCtorOptions);\n    const reqOpts = Object.assign(metadata, {\n      topic: topic.name,\n      name: subscription.name\n    });\n    this.request({\n      client: 'SubscriberClient',\n      method: 'createSubscription',\n      reqOpts,\n      gaxOpts\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      subscription.metadata = resp;\n      callback(null, subscription, resp);\n    });\n  }\n  /**\n   * @typedef {array} CreateTopicResponse\n   * @property {Topic} 0 The new {@link Topic}.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback CreateTopicCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Topic} topic The new {@link Topic}.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Create a topic with the given name.\n   *\n   * @see [Topics: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/create}\n   *\n   * @param {string} name Name of the topic.\n   * @param {object} [gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n   * @param {CreateTopicCallback} [callback] Callback function.\n   * @returns {Promise<CreateTopicResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.createTopic('my-new-topic', function(err, topic, apiResponse) {\n   *   if (!err) {\n   *     // The topic was created successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.createTopic('my-new-topic').then(function(data) {\n   *   const topic = data[0];\n   *   const apiResponse = data[1];\n   * });\n   */\n\n\n  createTopic(name, optsOrCallback, callback) {\n    const topic = this.topic(name);\n    const reqOpts = {\n      name: topic.name\n    };\n    const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    this.request({\n      client: 'PublisherClient',\n      method: 'createTopic',\n      reqOpts,\n      gaxOpts\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n\n      topic.metadata = resp;\n      callback(null, topic, resp);\n    });\n  }\n  /**\n   * Determine the appropriate endpoint to use for API requests, first trying\n   * the local `apiEndpoint` parameter. If the `apiEndpoint` parameter is null\n   * we try Pub/Sub emulator environment variable (PUBSUB_EMULATOR_HOST),\n   * otherwise the default JSON API.\n   *\n   * @private\n   */\n\n\n  determineBaseUrl_() {\n    const apiEndpoint = this.options.apiEndpoint;\n\n    if (!apiEndpoint && !process.env.PUBSUB_EMULATOR_HOST) {\n      return;\n    }\n\n    const grpcInstance = this.options.grpc || grpc;\n    const baseUrl = apiEndpoint || process.env.PUBSUB_EMULATOR_HOST;\n    const leadingProtocol = new RegExp('^https*://');\n    const trailingSlashes = new RegExp('/*$');\n    const baseUrlParts = baseUrl.replace(leadingProtocol, '').replace(trailingSlashes, '').split(':');\n    this.options.servicePath = baseUrlParts[0];\n    this.options.port = baseUrlParts[1];\n    this.options.sslCreds = grpcInstance.credentials.createInsecure();\n    this.isEmulator = true;\n\n    if (!this.options.projectId && process.env.PUBSUB_PROJECT_ID) {\n      this.options.projectId = process.env.PUBSUB_PROJECT_ID;\n    }\n  }\n  /**\n   * Query object for listing snapshots.\n   *\n   * @typedef {object} GetSnapshotsRequest\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {object} [options.gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n   * @property {number} [options.pageSize] Maximum number of results to return.\n   * @property {string} [options.pageToken] Page token.\n   */\n\n  /**\n   * @typedef {array} GetSnapshotsResponse\n   * @property {Snapshot[]} 0 Array of {@link Snapshot} instances.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback GetSnapshotsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Snapshot[]} snapshots Array of {@link Snapshot} instances.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get a list of snapshots.\n   *\n   * @param {GetSnapshotsRequest} [query] Query object for listing snapshots.\n   * @param {GetSnapshotsCallback} [callback] Callback function.\n   * @returns {Promise<GetSnapshotsResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.getSnapshots(function(err, snapshots) {\n   *   if (!err) {\n   *     // snapshots is an array of Snapshot objects.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.getSnapshots().then(function(data) {\n   *   const snapshots = data[0];\n   * });\n   */\n\n\n  getSnapshots(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = Object.assign({\n      project: 'projects/' + this.projectId\n    }, options);\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'SubscriberClient',\n      method: 'listSnapshots',\n      reqOpts,\n      gaxOpts\n    }, (err, rawSnapshots, ...args) => {\n      let snapshots;\n\n      if (rawSnapshots) {\n        snapshots = rawSnapshots.map(snapshot => {\n          const snapshotInstance = this.snapshot(snapshot.name);\n          snapshotInstance.metadata = snapshot;\n          return snapshotInstance;\n        });\n      }\n\n      callback(err, snapshots, ...args);\n    });\n  }\n  /**\n   * Query object for listing subscriptions.\n   *\n   * @typedef {object} GetSubscriptionsRequest\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {object} [options.gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n   * @property {number} [options.pageSize] Maximum number of results to return.\n   * @property {string} [options.pageToken] Page token.\n   * @param {string|Topic} options.topic - The name of the topic to\n   *     list subscriptions from.\n   */\n\n  /**\n   * @typedef {array} GetSubscriptionsResponse\n   * @property {Subscription[]} 0 Array of {@link Subscription} instances.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback GetSubscriptionsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Subscription[]} subscriptions Array of {@link Subscription} instances.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get a list of the subscriptions registered to all of your project's topics.\n   * You may optionally provide a query object as the first argument to\n   * customize the response.\n   *\n   * Your provided callback will be invoked with an error object if an API error\n   * occurred or an array of {@link Subscription} objects.\n   *\n   * To get subscriptions for a topic, see {@link Topic}.\n   *\n   * @see [Subscriptions: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/list}\n   *\n   * @param {GetSubscriptionsRequest} [query] Query object for listing subscriptions.\n   * @param {GetSubscriptionsCallback} [callback] Callback function.\n   * @returns {Promise<GetSubscriptionsResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.getSubscriptions(function(err, subscriptions) {\n   *   if (!err) {\n   *     // subscriptions is an array of Subscription objects.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.getSubscriptions().then(function(data) {\n   *   const subscriptions = data[0];\n   * });\n   */\n\n\n  getSubscriptions(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    let topic = options.topic;\n\n    if (topic) {\n      if (!(topic instanceof topic_1.Topic)) {\n        topic = this.topic(topic);\n      }\n\n      return topic.getSubscriptions(options, callback);\n    }\n\n    const reqOpts = Object.assign({}, options);\n    reqOpts.project = 'projects/' + this.projectId;\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'SubscriberClient',\n      method: 'listSubscriptions',\n      reqOpts,\n      gaxOpts\n    }, (err, rawSubs, ...args) => {\n      let subscriptions;\n\n      if (rawSubs) {\n        subscriptions = rawSubs.map(sub => {\n          const subscriptionInstance = this.subscription(sub.name);\n          subscriptionInstance.metadata = sub;\n          return subscriptionInstance;\n        });\n      }\n\n      callback(err, subscriptions, ...args);\n    });\n  }\n  /**\n   * Query object for listing topics.\n   *\n   * @typedef {object} GetTopicsRequest\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {object} [options.gaxOpts] Request configuration options, outlined\n   *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n   * @property {number} [options.pageSize] Maximum number of results to return.\n   * @property {string} [options.pageToken] Page token.\n   */\n\n  /**\n   * @typedef {array} GetTopicsResponse\n   * @property {Topic[]} 0 Array of {@link Topic} instances.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @callback GetTopicsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Topic[]} topics Array of {@link Topic} instances.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Get a list of the topics registered to your project. You may optionally\n   * provide a query object as the first argument to customize the response.\n   *\n   * @see [Topics: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/list}\n   *\n   * @param {GetTopicsRequest} [query] Query object for listing topics.\n   * @param {GetTopicsCallback} [callback] Callback function.\n   * @returns {Promise<GetTopicsResponse>}\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * pubsub.getTopics(function(err, topics) {\n   *   if (!err) {\n   *     // topics is an array of Topic objects.\n   *   }\n   * });\n   *\n   * //-\n   * // Customize the query.\n   * //-\n   * pubsub.getTopics({\n   *   pageSize: 3\n   * }, function(err, topics) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * pubsub.getTopics().then(function(data) {\n   *   const topics = data[0];\n   * });\n   */\n\n\n  getTopics(optsOrCallback, callback) {\n    const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n    callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n    const reqOpts = Object.assign({\n      project: 'projects/' + this.projectId\n    }, options);\n    delete reqOpts.gaxOpts;\n    delete reqOpts.autoPaginate;\n    const gaxOpts = Object.assign({\n      autoPaginate: options.autoPaginate\n    }, options.gaxOpts);\n    this.request({\n      client: 'PublisherClient',\n      method: 'listTopics',\n      reqOpts,\n      gaxOpts\n    }, (err, rawTopics, ...args) => {\n      let topics;\n\n      if (rawTopics) {\n        topics = rawTopics.map(topic => {\n          const topicInstance = this.topic(topic.name);\n          topicInstance.metadata = topic;\n          return topicInstance;\n        });\n      }\n\n      callback(err, topics, ...args);\n    });\n  }\n  /**\n   * Callback function to PubSub.getClient_().\n   * @private\n   * @callback GetClientCallback\n   * @param err - Error, if any.\n   * @param gaxClient - The gax client specified in RequestConfig.client.\n   *                    Typed any since it's importing Javascript source.\n   */\n\n  /**\n   * Get the PubSub client object.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @param {function} [callback] The callback function.\n   */\n\n\n  getClient_(config, callback) {\n    this.getClientAsync_(config).then(client => callback(null, client), callback);\n  }\n  /**\n   * Get the PubSub client object.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @returns {Promise}\n   */\n\n\n  async getClientAsync_(config) {\n    if (!this.projectId || this.projectId === PROJECT_ID_PLACEHOLDER) {\n      let projectId;\n\n      try {\n        projectId = await this.auth.getProjectId();\n      } catch (e) {\n        if (!this.isEmulator) {\n          throw e;\n        }\n\n        projectId = '';\n      }\n\n      this.projectId = projectId;\n      this.options.projectId = projectId;\n    }\n\n    let gaxClient = this.api[config.client];\n\n    if (!gaxClient) {\n      // Lazily instantiate client.\n      gaxClient = new v1[config.client](this.options);\n      this.api[config.client] = gaxClient;\n    }\n\n    return gaxClient;\n  }\n  /**\n   * Funnel all API requests through this method, to be sure we have a project\n   * ID.\n   *\n   * @private\n   *\n   * @param {object} config Configuration object.\n   * @param {object} config.gaxOpts GAX options.\n   * @param {function} config.method The gax method to call.\n   * @param {object} config.reqOpts Request options.\n   * @param {function} [callback] The callback function.\n   */\n\n\n  request(config, callback) {\n    this.getClient_(config, (err, client) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      let reqOpts = extend(true, {}, config.reqOpts);\n      reqOpts = projectify_1.replaceProjectIdToken(reqOpts, this.projectId);\n      client[config.method](reqOpts, config.gaxOpts, callback);\n    });\n  }\n  /**\n   * Create a Snapshot object. See {@link Subscription#createSnapshot} to\n   * create a snapshot.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The name of the snapshot.\n   * @returns {Snapshot} A {@link Snapshot} instance.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const snapshot = pubsub.snapshot('my-snapshot');\n   */\n\n\n  snapshot(name) {\n    if (typeof name !== 'string') {\n      throw new Error('You must supply a valid name for the snapshot.');\n    }\n\n    return new snapshot_1.Snapshot(this, name);\n  }\n  /**\n   * Create a Subscription object. This command by itself will not run any API\n   * requests. You will receive a {@link Subscription} object,\n   * which will allow you to interact with a subscription.\n   *\n   * @throws {Error} If subscription name is omitted.\n   *\n   * @param {string} name Name of the subscription.\n   * @param {SubscriberOptions} [options] Configuration object.\n   * @returns {Subscription} A {@link Subscription} instance.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const subscription = pubsub.subscription('my-subscription');\n   *\n   * // Register a listener for `message` events.\n   * subscription.on('message', function(message) {\n   *   // Called every time a message is received.\n   *   // message.id = ID of the message.\n   *   // message.ackId = ID used to acknowledge the message receival.\n   *   // message.data = Contents of the message.\n   *   // message.attributes = Attributes of the message.\n   *   // message.publishTime = Date when Pub/Sub received the message.\n   * });\n   */\n\n\n  subscription(name, options) {\n    if (!name) {\n      throw new Error('A name must be specified for a subscription.');\n    }\n\n    return new subscription_1.Subscription(this, name, options);\n  }\n  /**\n   * Create a Topic object. See {@link PubSub#createTopic} to create a topic.\n   *\n   * @throws {Error} If a name is not provided.\n   *\n   * @param {string} name The name of the topic.\n   * @returns {Topic} A {@link Topic} instance.\n   *\n   * @example\n   * const {PubSub} = require('@google-cloud/pubsub');\n   * const pubsub = new PubSub();\n   *\n   * const topic = pubsub.topic('my-topic');\n   */\n\n\n  topic(name, options) {\n    if (!name) {\n      throw new Error('A name must be specified for a topic.');\n    }\n\n    return new topic_1.Topic(this, name, options);\n  }\n\n}\n\nexports.PubSub = PubSub;\n/**\n * Get a list of the {@link Snapshot} objects as a readable object stream.\n *\n * @method PubSub#getSnapshotsStream\n * @param {GetSnapshotsRequest} [options] Configuration object. See\n *     {@link PubSub#getSnapshots} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Snapshot} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSnapshotsStream()\n *   .on('error', console.error)\n *   .on('data', function(snapshot) {\n *     // snapshot is a Snapshot object.\n *   })\n *   .on('end', function() {\n *     // All snapshots retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSnapshotsStream()\n *   .on('data', function(snapshot) {\n *     this.end();\n *   });\n */\n\n/**\n * Get a list of the {@link Subscription} objects registered to all of\n * your project's topics as a readable object stream.\n *\n * @method PubSub#getSubscriptionsStream\n * @param {GetSubscriptionsRequest} [options] Configuration object. See\n *     {@link PubSub#getSubscriptions} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Subscription} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSubscriptionsStream()\n *   .on('error', console.error)\n *   .on('data', function(subscription) {\n *     // subscription is a Subscription object.\n *   })\n *   .on('end', function() {\n *     // All subscriptions retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSubscriptionsStream()\n *   .on('data', function(subscription) {\n *     this.end();\n *   });\n */\n\n/**\n * Get a list of the {module:pubsub/topic} objects registered to your project as\n * a readable object stream.\n *\n * @method PubSub#getTopicsStream\n * @param {GetTopicsRequest} [options] Configuration object. See\n *     {@link PubSub#getTopics} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Topic} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getTopicsStream()\n *   .on('error', console.error)\n *   .on('data', function(topic) {\n *     // topic is a Topic object.\n *   })\n *   .on('end', function() {\n *     // All topics retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getTopicsStream()\n *   .on('data', function(topic) {\n *     this.end();\n *   });\n */\n\n/*! Developer Documentation\n *\n * These methods can be agto-paginated.\n */\n\npaginator_1.paginator.extend(PubSub, ['getSnapshots', 'getSubscriptions', 'getTopics']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(PubSub, {\n  exclude: ['request', 'snapshot', 'subscription', 'topic']\n});","map":{"version":3,"sources":["../../src/pubsub.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst projectify_1 = require(\"@google-cloud/projectify\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst extend = require(\"extend\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst grpc = require(\"@grpc/grpc-js\");\nconst PKG = require('../../package.json');\nconst v1 = require('./v1');\nconst snapshot_1 = require(\"./snapshot\");\nconst subscription_1 = require(\"./subscription\");\nconst topic_1 = require(\"./topic\");\nconst opts = {};\n/**\n * Project ID placeholder.\n * @type {string}\n * @private\n */\nconst PROJECT_ID_PLACEHOLDER = '{{projectId}}';\n/**\n * @typedef {object} ClientConfig\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [apiEndpoint] The `apiEndpoint` from options will set the\n *     host. If not set, the `PUBSUB_EMULATOR_HOST` environment variable from\n *     the gcloud SDK is honored, otherwise the actual API endpoint will be\n *     used.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {number} [maxRetries=3] Maximum number of automatic retries\n *     attempted before returning the error.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n/**\n * [Cloud Pub/Sub](https://developers.google.com/pubsub/overview) is a\n * reliable, many-to-many, asynchronous messaging service from Cloud\n * Platform.\n *\n * @class\n *\n * @see [Cloud Pub/Sub overview]{@link https://developers.google.com/pubsub/overview}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example <caption>Import the client library</caption>\n * const {PubSub} = require('@google-cloud/pubsub');\n *\n * @example <caption>Create a client that uses <a href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application Default Credentials (ADC)</a>:</caption>\n * const pubsub = new PubSub();\n *\n * @example <caption>Create a client with <a href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit credentials</a>:</caption>\n * const pubsub = new PubSub({\n *   projectId: 'your-project-id',\n *   keyFilename: '/path/to/keyfile.json'\n * });\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:pubsub_quickstart_create_topic\n * Full quickstart example:\n */\nclass PubSub {\n    constructor(options) {\n        this.getSubscriptionsStream = paginator_1.paginator.streamify('getSubscriptions');\n        this.getSnapshotsStream = paginator_1.paginator.streamify('getSnapshots');\n        this.getTopicsStream = paginator_1.paginator.streamify('getTopics');\n        options = options || {};\n        // Determine what scopes are needed.\n        // It is the union of the scopes on both clients.\n        const clientClasses = [v1.SubscriberClient, v1.PublisherClient];\n        const allScopes = {};\n        for (const clientClass of clientClasses) {\n            for (const scope of clientClass.scopes) {\n                allScopes[scope] = true;\n            }\n        }\n        this.options = Object.assign({\n            libName: 'gccl',\n            libVersion: PKG.version,\n            scopes: Object.keys(allScopes),\n        }, options);\n        /**\n         * @name PubSub#isEmulator\n         * @type {boolean}\n         */\n        this.isEmulator = false;\n        this.determineBaseUrl_();\n        this.api = {};\n        this.auth = new google_auth_library_1.GoogleAuth(this.options);\n        this.projectId = this.options.projectId || PROJECT_ID_PLACEHOLDER;\n        if (this.options.promise) {\n            this.Promise = this.options.promise;\n        }\n    }\n    /**\n     * @typedef {array} CreateSubscriptionResponse\n     * @property {Subscription} 0 The new {@link Subscription}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateSubscriptionCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Subscription} Subscription\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Options for creating a subscription.\n     *\n     * See a [Subscription\n     * resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n     *\n     * @typedef {object} CreateSubscriptionRequest\n     * @property {DeadLetterPolicy} [deadLetterPolicy] A policy that specifies the\n     *     conditions for dead lettering messages in this subscription.\n     * @property {object} [flowControl] Flow control configurations for\n     *     receiving messages. Note that these options do not persist across\n     *     subscription instances.\n     * @property {number} [flowControl.maxBytes] The maximum number of bytes\n     *     in un-acked messages to allow before the subscription pauses incoming\n     *     messages. Defaults to 20% of free memory.\n     * @property {number} [flowControl.maxMessages=Infinity] The maximum number\n     *     of un-acked messages to allow before the subscription pauses incoming\n     *     messages.\n     * @property {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n     * @property {number|google.protobuf.Duration} [messageRetentionDuration] Set\n     *     this to override the default duration of 7 days. This value is expected\n     *     in seconds. Acceptable values are in the range of 10 minutes and 7\n     *     days.\n     * @property {string} [pushEndpoint] A URL to a custom endpoint that\n     *     messages should be pushed to.\n     * @property {boolean} [retainAckedMessages=false] If set, acked messages\n     *     are retained in the subscription's backlog for the length of time\n     *     specified by `options.messageRetentionDuration`.\n     * @property {ExpirationPolicy} [expirationPolicy] A policy that specifies\n     * the conditions for this subscription's expiration.\n     */\n    /**\n     * Create a subscription to a topic.\n     *\n     * @see [Subscriptions: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/create}\n     * @see {@link Topic#createSubscription}\n     *\n     * @throws {Error} If a Topic instance or topic name is not provided.\n     * @throws {Error} If a subscription name is not provided.\n     *\n     * @param {Topic|string} topic The Topic to create a subscription to.\n     * @param {string} name The name of the subscription.\n     * @param {CreateSubscriptionRequest} [options] See a [Subscription resource](https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions).\n     * @param {CreateSubscriptionCallback} [callback] Callback function.\n     * @returns {Promise<CreateSubscriptionResponse>}\n     *\n     * @example <caption>Subscribe to a topic.</caption>\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = 'messageCenter';\n     * const name = 'newMessages';\n     *\n     * const callback = function(err, subscription, apiResponse) {};\n     *\n     * pubsub.createSubscription(topic, name, callback);\n     *\n     * @example <caption>If the callback is omitted, we'll return a Promise.</caption>\n     * pubsub.createSubscription(topic, name)\n     *   .then(function(data) {\n     *     const subscription = data[0];\n     *     const apiResponse = data[1];\n     *   });\n     */\n    createSubscription(topic, name, optionsOrCallback, callback) {\n        if (typeof topic !== 'string' && !(topic instanceof topic_1.Topic)) {\n            throw new Error('A Topic is required for a new subscription.');\n        }\n        if (typeof name !== 'string') {\n            throw new Error('A subscription name is required.');\n        }\n        if (typeof topic === 'string') {\n            topic = this.topic(topic);\n        }\n        let options = typeof optionsOrCallback === 'object'\n            ? optionsOrCallback\n            : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        // Make a deep copy of options to not pollute caller object.\n        options = extend(true, {}, options);\n        const gaxOpts = options.gaxOpts;\n        const flowControl = options.flowControl;\n        delete options.gaxOpts;\n        delete options.flowControl;\n        const metadata = subscription_1.Subscription.formatMetadata_(options);\n        let subscriptionCtorOptions = flowControl ? { flowControl } : {};\n        subscriptionCtorOptions = Object.assign(subscriptionCtorOptions, metadata);\n        const subscription = this.subscription(name, subscriptionCtorOptions);\n        const reqOpts = Object.assign(metadata, {\n            topic: topic.name,\n            name: subscription.name,\n        });\n        this.request({\n            client: 'SubscriberClient',\n            method: 'createSubscription',\n            reqOpts,\n            gaxOpts,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            subscription.metadata = resp;\n            callback(null, subscription, resp);\n        });\n    }\n    /**\n     * @typedef {array} CreateTopicResponse\n     * @property {Topic} 0 The new {@link Topic}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateTopicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Topic} topic The new {@link Topic}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Create a topic with the given name.\n     *\n     * @see [Topics: create API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/create}\n     *\n     * @param {string} name Name of the topic.\n     * @param {object} [gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n     * @param {CreateTopicCallback} [callback] Callback function.\n     * @returns {Promise<CreateTopicResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.createTopic('my-new-topic', function(err, topic, apiResponse) {\n     *   if (!err) {\n     *     // The topic was created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.createTopic('my-new-topic').then(function(data) {\n     *   const topic = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n    createTopic(name, optsOrCallback, callback) {\n        const topic = this.topic(name);\n        const reqOpts = {\n            name: topic.name,\n        };\n        const gaxOpts = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        this.request({\n            client: 'PublisherClient',\n            method: 'createTopic',\n            reqOpts,\n            gaxOpts,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            topic.metadata = resp;\n            callback(null, topic, resp);\n        });\n    }\n    /**\n     * Determine the appropriate endpoint to use for API requests, first trying\n     * the local `apiEndpoint` parameter. If the `apiEndpoint` parameter is null\n     * we try Pub/Sub emulator environment variable (PUBSUB_EMULATOR_HOST),\n     * otherwise the default JSON API.\n     *\n     * @private\n     */\n    determineBaseUrl_() {\n        const apiEndpoint = this.options.apiEndpoint;\n        if (!apiEndpoint && !process.env.PUBSUB_EMULATOR_HOST) {\n            return;\n        }\n        const grpcInstance = this.options.grpc || grpc;\n        const baseUrl = apiEndpoint || process.env.PUBSUB_EMULATOR_HOST;\n        const leadingProtocol = new RegExp('^https*://');\n        const trailingSlashes = new RegExp('/*$');\n        const baseUrlParts = baseUrl\n            .replace(leadingProtocol, '')\n            .replace(trailingSlashes, '')\n            .split(':');\n        this.options.servicePath = baseUrlParts[0];\n        this.options.port = baseUrlParts[1];\n        this.options.sslCreds = grpcInstance.credentials.createInsecure();\n        this.isEmulator = true;\n        if (!this.options.projectId && process.env.PUBSUB_PROJECT_ID) {\n            this.options.projectId = process.env.PUBSUB_PROJECT_ID;\n        }\n    }\n    /**\n     * Query object for listing snapshots.\n     *\n     * @typedef {object} GetSnapshotsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {object} [options.gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n     * @property {number} [options.pageSize] Maximum number of results to return.\n     * @property {string} [options.pageToken] Page token.\n     */\n    /**\n     * @typedef {array} GetSnapshotsResponse\n     * @property {Snapshot[]} 0 Array of {@link Snapshot} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetSnapshotsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Snapshot[]} snapshots Array of {@link Snapshot} instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get a list of snapshots.\n     *\n     * @param {GetSnapshotsRequest} [query] Query object for listing snapshots.\n     * @param {GetSnapshotsCallback} [callback] Callback function.\n     * @returns {Promise<GetSnapshotsResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.getSnapshots(function(err, snapshots) {\n     *   if (!err) {\n     *     // snapshots is an array of Snapshot objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.getSnapshots().then(function(data) {\n     *   const snapshots = data[0];\n     * });\n     */\n    getSnapshots(optsOrCallback, callback) {\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = Object.assign({\n            project: 'projects/' + this.projectId,\n        }, options);\n        delete reqOpts.gaxOpts;\n        delete reqOpts.autoPaginate;\n        const gaxOpts = Object.assign({\n            autoPaginate: options.autoPaginate,\n        }, options.gaxOpts);\n        this.request({\n            client: 'SubscriberClient',\n            method: 'listSnapshots',\n            reqOpts,\n            gaxOpts,\n        }, (err, rawSnapshots, ...args) => {\n            let snapshots;\n            if (rawSnapshots) {\n                snapshots = rawSnapshots.map(snapshot => {\n                    const snapshotInstance = this.snapshot(snapshot.name);\n                    snapshotInstance.metadata = snapshot;\n                    return snapshotInstance;\n                });\n            }\n            callback(err, snapshots, ...args);\n        });\n    }\n    /**\n     * Query object for listing subscriptions.\n     *\n     * @typedef {object} GetSubscriptionsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {object} [options.gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n     * @property {number} [options.pageSize] Maximum number of results to return.\n     * @property {string} [options.pageToken] Page token.\n     * @param {string|Topic} options.topic - The name of the topic to\n     *     list subscriptions from.\n     */\n    /**\n     * @typedef {array} GetSubscriptionsResponse\n     * @property {Subscription[]} 0 Array of {@link Subscription} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetSubscriptionsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Subscription[]} subscriptions Array of {@link Subscription} instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get a list of the subscriptions registered to all of your project's topics.\n     * You may optionally provide a query object as the first argument to\n     * customize the response.\n     *\n     * Your provided callback will be invoked with an error object if an API error\n     * occurred or an array of {@link Subscription} objects.\n     *\n     * To get subscriptions for a topic, see {@link Topic}.\n     *\n     * @see [Subscriptions: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.subscriptions/list}\n     *\n     * @param {GetSubscriptionsRequest} [query] Query object for listing subscriptions.\n     * @param {GetSubscriptionsCallback} [callback] Callback function.\n     * @returns {Promise<GetSubscriptionsResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.getSubscriptions(function(err, subscriptions) {\n     *   if (!err) {\n     *     // subscriptions is an array of Subscription objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.getSubscriptions().then(function(data) {\n     *   const subscriptions = data[0];\n     * });\n     */\n    getSubscriptions(optsOrCallback, callback) {\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        let topic = options.topic;\n        if (topic) {\n            if (!(topic instanceof topic_1.Topic)) {\n                topic = this.topic(topic);\n            }\n            return topic.getSubscriptions(options, callback);\n        }\n        const reqOpts = Object.assign({}, options);\n        reqOpts.project = 'projects/' + this.projectId;\n        delete reqOpts.gaxOpts;\n        delete reqOpts.autoPaginate;\n        const gaxOpts = Object.assign({\n            autoPaginate: options.autoPaginate,\n        }, options.gaxOpts);\n        this.request({\n            client: 'SubscriberClient',\n            method: 'listSubscriptions',\n            reqOpts,\n            gaxOpts,\n        }, (err, rawSubs, ...args) => {\n            let subscriptions;\n            if (rawSubs) {\n                subscriptions = rawSubs.map(sub => {\n                    const subscriptionInstance = this.subscription(sub.name);\n                    subscriptionInstance.metadata = sub;\n                    return subscriptionInstance;\n                });\n            }\n            callback(err, subscriptions, ...args);\n        });\n    }\n    /**\n     * Query object for listing topics.\n     *\n     * @typedef {object} GetTopicsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {object} [options.gaxOpts] Request configuration options, outlined\n     *     here: https://googleapis.github.io/gax-nodejs/CallSettings.html.\n     * @property {number} [options.pageSize] Maximum number of results to return.\n     * @property {string} [options.pageToken] Page token.\n     */\n    /**\n     * @typedef {array} GetTopicsResponse\n     * @property {Topic[]} 0 Array of {@link Topic} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetTopicsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Topic[]} topics Array of {@link Topic} instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get a list of the topics registered to your project. You may optionally\n     * provide a query object as the first argument to customize the response.\n     *\n     * @see [Topics: list API Documentation]{@link https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics/list}\n     *\n     * @param {GetTopicsRequest} [query] Query object for listing topics.\n     * @param {GetTopicsCallback} [callback] Callback function.\n     * @returns {Promise<GetTopicsResponse>}\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * pubsub.getTopics(function(err, topics) {\n     *   if (!err) {\n     *     // topics is an array of Topic objects.\n     *   }\n     * });\n     *\n     * //-\n     * // Customize the query.\n     * //-\n     * pubsub.getTopics({\n     *   pageSize: 3\n     * }, function(err, topics) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * pubsub.getTopics().then(function(data) {\n     *   const topics = data[0];\n     * });\n     */\n    getTopics(optsOrCallback, callback) {\n        const options = typeof optsOrCallback === 'object' ? optsOrCallback : {};\n        callback = typeof optsOrCallback === 'function' ? optsOrCallback : callback;\n        const reqOpts = Object.assign({\n            project: 'projects/' + this.projectId,\n        }, options);\n        delete reqOpts.gaxOpts;\n        delete reqOpts.autoPaginate;\n        const gaxOpts = Object.assign({\n            autoPaginate: options.autoPaginate,\n        }, options.gaxOpts);\n        this.request({\n            client: 'PublisherClient',\n            method: 'listTopics',\n            reqOpts,\n            gaxOpts,\n        }, (err, rawTopics, ...args) => {\n            let topics;\n            if (rawTopics) {\n                topics = rawTopics.map(topic => {\n                    const topicInstance = this.topic(topic.name);\n                    topicInstance.metadata = topic;\n                    return topicInstance;\n                });\n            }\n            callback(err, topics, ...args);\n        });\n    }\n    /**\n     * Callback function to PubSub.getClient_().\n     * @private\n     * @callback GetClientCallback\n     * @param err - Error, if any.\n     * @param gaxClient - The gax client specified in RequestConfig.client.\n     *                    Typed any since it's importing Javascript source.\n     */\n    /**\n     * Get the PubSub client object.\n     *\n     * @private\n     *\n     * @param {object} config Configuration object.\n     * @param {object} config.gaxOpts GAX options.\n     * @param {function} config.method The gax method to call.\n     * @param {object} config.reqOpts Request options.\n     * @param {function} [callback] The callback function.\n     */\n    getClient_(config, callback) {\n        this.getClientAsync_(config).then(client => callback(null, client), callback);\n    }\n    /**\n     * Get the PubSub client object.\n     *\n     * @private\n     *\n     * @param {object} config Configuration object.\n     * @param {object} config.gaxOpts GAX options.\n     * @param {function} config.method The gax method to call.\n     * @param {object} config.reqOpts Request options.\n     * @returns {Promise}\n     */\n    async getClientAsync_(config) {\n        if (!this.projectId || this.projectId === PROJECT_ID_PLACEHOLDER) {\n            let projectId;\n            try {\n                projectId = await this.auth.getProjectId();\n            }\n            catch (e) {\n                if (!this.isEmulator) {\n                    throw e;\n                }\n                projectId = '';\n            }\n            this.projectId = projectId;\n            this.options.projectId = projectId;\n        }\n        let gaxClient = this.api[config.client];\n        if (!gaxClient) {\n            // Lazily instantiate client.\n            gaxClient = new v1[config.client](this.options);\n            this.api[config.client] = gaxClient;\n        }\n        return gaxClient;\n    }\n    /**\n     * Funnel all API requests through this method, to be sure we have a project\n     * ID.\n     *\n     * @private\n     *\n     * @param {object} config Configuration object.\n     * @param {object} config.gaxOpts GAX options.\n     * @param {function} config.method The gax method to call.\n     * @param {object} config.reqOpts Request options.\n     * @param {function} [callback] The callback function.\n     */\n    request(config, callback) {\n        this.getClient_(config, (err, client) => {\n            if (err) {\n                callback(err);\n                return;\n            }\n            let reqOpts = extend(true, {}, config.reqOpts);\n            reqOpts = projectify_1.replaceProjectIdToken(reqOpts, this.projectId);\n            client[config.method](reqOpts, config.gaxOpts, callback);\n        });\n    }\n    /**\n     * Create a Snapshot object. See {@link Subscription#createSnapshot} to\n     * create a snapshot.\n     *\n     * @throws {Error} If a name is not provided.\n     *\n     * @param {string} name The name of the snapshot.\n     * @returns {Snapshot} A {@link Snapshot} instance.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const snapshot = pubsub.snapshot('my-snapshot');\n     */\n    snapshot(name) {\n        if (typeof name !== 'string') {\n            throw new Error('You must supply a valid name for the snapshot.');\n        }\n        return new snapshot_1.Snapshot(this, name);\n    }\n    /**\n     * Create a Subscription object. This command by itself will not run any API\n     * requests. You will receive a {@link Subscription} object,\n     * which will allow you to interact with a subscription.\n     *\n     * @throws {Error} If subscription name is omitted.\n     *\n     * @param {string} name Name of the subscription.\n     * @param {SubscriberOptions} [options] Configuration object.\n     * @returns {Subscription} A {@link Subscription} instance.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const subscription = pubsub.subscription('my-subscription');\n     *\n     * // Register a listener for `message` events.\n     * subscription.on('message', function(message) {\n     *   // Called every time a message is received.\n     *   // message.id = ID of the message.\n     *   // message.ackId = ID used to acknowledge the message receival.\n     *   // message.data = Contents of the message.\n     *   // message.attributes = Attributes of the message.\n     *   // message.publishTime = Date when Pub/Sub received the message.\n     * });\n     */\n    subscription(name, options) {\n        if (!name) {\n            throw new Error('A name must be specified for a subscription.');\n        }\n        return new subscription_1.Subscription(this, name, options);\n    }\n    /**\n     * Create a Topic object. See {@link PubSub#createTopic} to create a topic.\n     *\n     * @throws {Error} If a name is not provided.\n     *\n     * @param {string} name The name of the topic.\n     * @returns {Topic} A {@link Topic} instance.\n     *\n     * @example\n     * const {PubSub} = require('@google-cloud/pubsub');\n     * const pubsub = new PubSub();\n     *\n     * const topic = pubsub.topic('my-topic');\n     */\n    topic(name, options) {\n        if (!name) {\n            throw new Error('A name must be specified for a topic.');\n        }\n        return new topic_1.Topic(this, name, options);\n    }\n}\nexports.PubSub = PubSub;\n/**\n * Get a list of the {@link Snapshot} objects as a readable object stream.\n *\n * @method PubSub#getSnapshotsStream\n * @param {GetSnapshotsRequest} [options] Configuration object. See\n *     {@link PubSub#getSnapshots} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Snapshot} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSnapshotsStream()\n *   .on('error', console.error)\n *   .on('data', function(snapshot) {\n *     // snapshot is a Snapshot object.\n *   })\n *   .on('end', function() {\n *     // All snapshots retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSnapshotsStream()\n *   .on('data', function(snapshot) {\n *     this.end();\n *   });\n */\n/**\n * Get a list of the {@link Subscription} objects registered to all of\n * your project's topics as a readable object stream.\n *\n * @method PubSub#getSubscriptionsStream\n * @param {GetSubscriptionsRequest} [options] Configuration object. See\n *     {@link PubSub#getSubscriptions} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Subscription} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getSubscriptionsStream()\n *   .on('error', console.error)\n *   .on('data', function(subscription) {\n *     // subscription is a Subscription object.\n *   })\n *   .on('end', function() {\n *     // All subscriptions retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getSubscriptionsStream()\n *   .on('data', function(subscription) {\n *     this.end();\n *   });\n */\n/**\n * Get a list of the {module:pubsub/topic} objects registered to your project as\n * a readable object stream.\n *\n * @method PubSub#getTopicsStream\n * @param {GetTopicsRequest} [options] Configuration object. See\n *     {@link PubSub#getTopics} for a complete list of options.\n * @returns {ReadableStream} A readable stream of {@link Topic} instances.\n *\n * @example\n * const {PubSub} = require('@google-cloud/pubsub');\n * const pubsub = new PubSub();\n *\n * pubsub.getTopicsStream()\n *   .on('error', console.error)\n *   .on('data', function(topic) {\n *     // topic is a Topic object.\n *   })\n *   .on('end', function() {\n *     // All topics retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * pubsub.getTopicsStream()\n *   .on('data', function(topic) {\n *     this.end();\n *   });\n */\n/*! Developer Documentation\n *\n * These methods can be agto-paginated.\n */\npaginator_1.paginator.extend(PubSub, ['getSnapshots', 'getSubscriptions', 'getTopics']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(PubSub, {\n    exclude: ['request', 'snapshot', 'subscription', 'topic'],\n});\n//# sourceMappingURL=pubsub.js.map"]},"metadata":{},"sourceType":"script"}