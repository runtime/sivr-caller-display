{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar requireInstance = require(\"../requireInstance\");\n\nvar _require = require(\"../requirePermissions\"),\n    requirePermissions = _require.requirePermissions;\n\nvar checkDupHostingKeys = require(\"../checkDupHostingKeys\");\n\nvar checkValidTargetFilters = require(\"../checkValidTargetFilters\");\n\nvar checkFirebaseSDKVersion = require(\"../checkFirebaseSDKVersion\");\n\nvar _require2 = require(\"../command\"),\n    Command = _require2.Command;\n\nvar deploy = require(\"../deploy\");\n\nvar requireConfig = require(\"../requireConfig\");\n\nvar filterTargets = require(\"../filterTargets\");\n\nvar VALID_TARGETS = [\"database\", \"storage\", \"firestore\", \"functions\", \"hosting\"];\nvar TARGET_PERMISSIONS = {\n  database: [\"firebasedatabase.instances.update\"],\n  hosting: [\"firebasehosting.sites.update\"],\n  functions: [\"cloudfunctions.functions.list\", \"cloudfunctions.functions.create\", \"cloudfunctions.functions.get\", \"cloudfunctions.functions.update\", \"cloudfunctions.functions.delete\", \"cloudfunctions.operations.get\"],\n  firestore: [\"datastore.indexes.list\", \"datastore.indexes.create\", \"datastore.indexes.update\", \"datastore.indexes.delete\"],\n  storage: [\"firebaserules.releases.create\", \"firebaserules.rulesets.create\", \"firebaserules.releases.update\"]\n};\nmodule.exports = new Command(\"deploy\").description(\"deploy code and assets to your Firebase project\").option(\"-p, --public <path>\", \"override the Hosting public directory specified in firebase.json\").option(\"-m, --message <message>\", \"an optional message describing this deploy\").option(\"-f, --force\", \"delete Cloud Functions missing from the current working directory without confirmation\").option(\"--only <targets>\", 'only deploy to specified, comma-separated targets (e.g. \"hosting,storage\"). For functions, ' + 'can specify filters with colons to scope function deploys to only those functions (e.g. \"--only functions:func1,functions:func2\"). ' + \"When filtering based on export groups (the exported module object keys), use dots to specify group names \" + '(e.g. \"--only functions:group1.subgroup1,functions:group2)\"').option(\"--except <targets>\", 'deploy to all targets except specified (e.g. \"database\")').before(requireConfig).before(function (options) {\n  options.filteredTargets = filterTargets(options, VALID_TARGETS);\n  const permissions = options.filteredTargets.reduce((perms, target) => {\n    return perms.concat(TARGET_PERMISSIONS[target]);\n  }, []);\n  return requirePermissions(options, permissions);\n}).before(function (options) {\n  if (_.intersection(options.filteredTargets, [\"hosting\", \"database\"]).length > 0) {\n    return requireInstance(options);\n  }\n}).before(checkDupHostingKeys).before(checkValidTargetFilters).before(checkFirebaseSDKVersion).action(function (options) {\n  return deploy(options.filteredTargets, options);\n});","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/deploy.js"],"names":["_","require","requireInstance","requirePermissions","checkDupHostingKeys","checkValidTargetFilters","checkFirebaseSDKVersion","Command","deploy","requireConfig","filterTargets","VALID_TARGETS","TARGET_PERMISSIONS","database","hosting","functions","firestore","storage","module","exports","description","option","before","options","filteredTargets","permissions","reduce","perms","target","concat","intersection","length","action"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAA7B;;eAC6BA,OAAO,CAAC,uBAAD,C;IAA9BE,kB,YAAAA,kB;;AACN,IAAIC,mBAAmB,GAAGH,OAAO,CAAC,wBAAD,CAAjC;;AACA,IAAII,uBAAuB,GAAGJ,OAAO,CAAC,4BAAD,CAArC;;AACA,IAAIK,uBAAuB,GAAGL,OAAO,CAAC,4BAAD,CAArC;;gBACkBA,OAAO,CAAC,YAAD,C;IAAnBM,O,aAAAA,O;;AACN,IAAIC,MAAM,GAAGP,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIQ,aAAa,GAAGR,OAAO,CAAC,kBAAD,CAA3B;;AACA,IAAIS,aAAa,GAAGT,OAAO,CAAC,kBAAD,CAA3B;;AACA,IAAIU,aAAa,GAAG,CAAC,UAAD,EAAa,SAAb,EAAwB,WAAxB,EAAqC,WAArC,EAAkD,SAAlD,CAApB;AACA,IAAIC,kBAAkB,GAAG;AACrBC,EAAAA,QAAQ,EAAE,CAAC,mCAAD,CADW;AAErBC,EAAAA,OAAO,EAAE,CAAC,8BAAD,CAFY;AAGrBC,EAAAA,SAAS,EAAE,CACP,+BADO,EAEP,iCAFO,EAGP,8BAHO,EAIP,iCAJO,EAKP,iCALO,EAMP,+BANO,CAHU;AAWrBC,EAAAA,SAAS,EAAE,CACP,wBADO,EAEP,0BAFO,EAGP,0BAHO,EAIP,0BAJO,CAXU;AAiBrBC,EAAAA,OAAO,EAAE,CACL,+BADK,EAEL,+BAFK,EAGL,+BAHK;AAjBY,CAAzB;AAuBAC,MAAM,CAACC,OAAP,GAAiB,IAAIZ,OAAJ,CAAY,QAAZ,EACZa,WADY,CACA,iDADA,EAEZC,MAFY,CAEL,qBAFK,EAEkB,kEAFlB,EAGZA,MAHY,CAGL,yBAHK,EAGsB,4CAHtB,EAIZA,MAJY,CAIL,aAJK,EAIU,wFAJV,EAKZA,MALY,CAKL,kBALK,EAKe,gGAC5B,qIAD4B,GAE5B,2GAF4B,GAG5B,6DARa,EASZA,MATY,CASL,oBATK,EASiB,0DATjB,EAUZC,MAVY,CAULb,aAVK,EAWZa,MAXY,CAWL,UAAUC,OAAV,EAAmB;AAC3BA,EAAAA,OAAO,CAACC,eAAR,GAA0Bd,aAAa,CAACa,OAAD,EAAUZ,aAAV,CAAvC;AACA,QAAMc,WAAW,GAAGF,OAAO,CAACC,eAAR,CAAwBE,MAAxB,CAA+B,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClE,WAAOD,KAAK,CAACE,MAAN,CAAajB,kBAAkB,CAACgB,MAAD,CAA/B,CAAP;AACH,GAFmB,EAEjB,EAFiB,CAApB;AAGA,SAAOzB,kBAAkB,CAACoB,OAAD,EAAUE,WAAV,CAAzB;AACH,CAjBgB,EAkBZH,MAlBY,CAkBL,UAAUC,OAAV,EAAmB;AAC3B,MAAIvB,CAAC,CAAC8B,YAAF,CAAeP,OAAO,CAACC,eAAvB,EAAwC,CAAC,SAAD,EAAY,UAAZ,CAAxC,EAAiEO,MAAjE,GAA0E,CAA9E,EAAiF;AAC7E,WAAO7B,eAAe,CAACqB,OAAD,CAAtB;AACH;AACJ,CAtBgB,EAuBZD,MAvBY,CAuBLlB,mBAvBK,EAwBZkB,MAxBY,CAwBLjB,uBAxBK,EAyBZiB,MAzBY,CAyBLhB,uBAzBK,EA0BZ0B,MA1BY,CA0BL,UAAUT,OAAV,EAAmB;AAC3B,SAAOf,MAAM,CAACe,OAAO,CAACC,eAAT,EAA0BD,OAA1B,CAAb;AACH,CA5BgB,CAAjB","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar requireInstance = require(\"../requireInstance\");\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar checkDupHostingKeys = require(\"../checkDupHostingKeys\");\nvar checkValidTargetFilters = require(\"../checkValidTargetFilters\");\nvar checkFirebaseSDKVersion = require(\"../checkFirebaseSDKVersion\");\nvar { Command } = require(\"../command\");\nvar deploy = require(\"../deploy\");\nvar requireConfig = require(\"../requireConfig\");\nvar filterTargets = require(\"../filterTargets\");\nvar VALID_TARGETS = [\"database\", \"storage\", \"firestore\", \"functions\", \"hosting\"];\nvar TARGET_PERMISSIONS = {\n    database: [\"firebasedatabase.instances.update\"],\n    hosting: [\"firebasehosting.sites.update\"],\n    functions: [\n        \"cloudfunctions.functions.list\",\n        \"cloudfunctions.functions.create\",\n        \"cloudfunctions.functions.get\",\n        \"cloudfunctions.functions.update\",\n        \"cloudfunctions.functions.delete\",\n        \"cloudfunctions.operations.get\",\n    ],\n    firestore: [\n        \"datastore.indexes.list\",\n        \"datastore.indexes.create\",\n        \"datastore.indexes.update\",\n        \"datastore.indexes.delete\",\n    ],\n    storage: [\n        \"firebaserules.releases.create\",\n        \"firebaserules.rulesets.create\",\n        \"firebaserules.releases.update\",\n    ],\n};\nmodule.exports = new Command(\"deploy\")\n    .description(\"deploy code and assets to your Firebase project\")\n    .option(\"-p, --public <path>\", \"override the Hosting public directory specified in firebase.json\")\n    .option(\"-m, --message <message>\", \"an optional message describing this deploy\")\n    .option(\"-f, --force\", \"delete Cloud Functions missing from the current working directory without confirmation\")\n    .option(\"--only <targets>\", 'only deploy to specified, comma-separated targets (e.g. \"hosting,storage\"). For functions, ' +\n    'can specify filters with colons to scope function deploys to only those functions (e.g. \"--only functions:func1,functions:func2\"). ' +\n    \"When filtering based on export groups (the exported module object keys), use dots to specify group names \" +\n    '(e.g. \"--only functions:group1.subgroup1,functions:group2)\"')\n    .option(\"--except <targets>\", 'deploy to all targets except specified (e.g. \"database\")')\n    .before(requireConfig)\n    .before(function (options) {\n    options.filteredTargets = filterTargets(options, VALID_TARGETS);\n    const permissions = options.filteredTargets.reduce((perms, target) => {\n        return perms.concat(TARGET_PERMISSIONS[target]);\n    }, []);\n    return requirePermissions(options, permissions);\n})\n    .before(function (options) {\n    if (_.intersection(options.filteredTargets, [\"hosting\", \"database\"]).length > 0) {\n        return requireInstance(options);\n    }\n})\n    .before(checkDupHostingKeys)\n    .before(checkValidTargetFilters)\n    .before(checkFirebaseSDKVersion)\n    .action(function (options) {\n    return deploy(options.filteredTargets, options);\n});\n"]},"metadata":{},"sourceType":"script"}