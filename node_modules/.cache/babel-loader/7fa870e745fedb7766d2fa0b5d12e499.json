{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar _require = require(\"../command\"),\n    Command = _require.Command;\n\nvar clc = require(\"cli-color\");\n\nvar cloudfunctions = require(\"../gcp/cloudfunctions\");\n\nvar functionsConfig = require(\"../functionsConfig\");\n\nvar functionsDelete = require(\"../functionsDelete\");\n\nvar getProjectId = require(\"../getProjectId\");\n\nvar helper = require(\"../functionsDeployHelper\");\n\nvar _require2 = require(\"../prompt\"),\n    prompt = _require2.prompt;\n\nvar _require3 = require(\"../requirePermissions\"),\n    requirePermissions = _require3.requirePermissions;\n\nvar utils = require(\"../utils\");\n\nmodule.exports = new Command(\"functions:delete [filters...]\").description(\"delete one or more Cloud Functions by name or group name.\").option(\"--region <region>\", \"Specify region of the function to be deleted. \" + \"If omitted, functions from all regions whose names match the filters will be deleted. \").option(\"-f, --force\", \"No confirmation. Otherwise, a confirmation prompt will appear.\").before(requirePermissions, [\"cloudfunctions.functions.list\", \"cloudfunctions.functions.delete\"]).action(function (filters, options) {\n  if (!filters.length) {\n    return utils.reject(\"Must supply at least function or group name.\");\n  }\n\n  var projectId = getProjectId(options);\n  var appEngineLocation;\n  var functionsToDelete = [];\n\n  var filterChunks = _.map(filters, function (filter) {\n    return filter.split(\".\");\n  });\n\n  return functionsConfig.getFirebaseConfig(options).then(config => {\n    appEngineLocation = functionsConfig.getAppEngineLocation(config);\n  }).then(() => {\n    return cloudfunctions.listAll(projectId).then(function (result) {\n      var allFunctions = _.map(result, \"name\");\n\n      return _.filter(allFunctions, function (name) {\n        var regionMatches = options.region ? helper.getRegion(name) === options.region : true;\n\n        var nameMatches = _.some(_.map(filterChunks, function (chunk) {\n          return helper.functionMatchesGroup(name, chunk);\n        }));\n\n        return regionMatches && nameMatches;\n      });\n    }).then(function (result) {\n      functionsToDelete = result;\n\n      if (functionsToDelete.length === 0) {\n        return utils.reject(\"The specified filters do not match any existing functions in project \" + clc.bold(projectId) + \".\", {\n          exit: 1\n        });\n      }\n\n      var deleteList = _.map(functionsToDelete, function (func) {\n        return \"\\t\" + helper.getFunctionLabel(func);\n      }).join(\"\\n\");\n\n      if (!options.force) {\n        return prompt(options, [{\n          type: \"confirm\",\n          name: \"confirm\",\n          default: false,\n          message: \"You are about to delete the following Cloud Functions:\\n\" + deleteList + \"\\n  Are you sure?\"\n        }]);\n      }\n    }).then(function () {\n      if (!(options.confirm || options.force)) {\n        return utils.reject(\"Command aborted.\", {\n          exit: 1\n        });\n      }\n\n      return functionsDelete(functionsToDelete, projectId, appEngineLocation);\n    });\n  });\n});","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/functions-delete.js"],"names":["_","require","Command","clc","cloudfunctions","functionsConfig","functionsDelete","getProjectId","helper","prompt","requirePermissions","utils","module","exports","description","option","before","action","filters","options","length","reject","projectId","appEngineLocation","functionsToDelete","filterChunks","map","filter","split","getFirebaseConfig","then","config","getAppEngineLocation","listAll","result","allFunctions","name","regionMatches","region","getRegion","nameMatches","some","chunk","functionMatchesGroup","bold","exit","deleteList","func","getFunctionLabel","join","force","type","default","message","confirm"],"mappings":"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","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar { Command } = require(\"../command\");\nvar clc = require(\"cli-color\");\nvar cloudfunctions = require(\"../gcp/cloudfunctions\");\nvar functionsConfig = require(\"../functionsConfig\");\nvar functionsDelete = require(\"../functionsDelete\");\nvar getProjectId = require(\"../getProjectId\");\nvar helper = require(\"../functionsDeployHelper\");\nvar { prompt } = require(\"../prompt\");\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar utils = require(\"../utils\");\nmodule.exports = new Command(\"functions:delete [filters...]\")\n    .description(\"delete one or more Cloud Functions by name or group name.\")\n    .option(\"--region <region>\", \"Specify region of the function to be deleted. \" +\n    \"If omitted, functions from all regions whose names match the filters will be deleted. \")\n    .option(\"-f, --force\", \"No confirmation. Otherwise, a confirmation prompt will appear.\")\n    .before(requirePermissions, [\"cloudfunctions.functions.list\", \"cloudfunctions.functions.delete\"])\n    .action(function (filters, options) {\n    if (!filters.length) {\n        return utils.reject(\"Must supply at least function or group name.\");\n    }\n    var projectId = getProjectId(options);\n    var appEngineLocation;\n    var functionsToDelete = [];\n    var filterChunks = _.map(filters, function (filter) {\n        return filter.split(\".\");\n    });\n    return functionsConfig\n        .getFirebaseConfig(options)\n        .then((config) => {\n        appEngineLocation = functionsConfig.getAppEngineLocation(config);\n    })\n        .then(() => {\n        return cloudfunctions\n            .listAll(projectId)\n            .then(function (result) {\n            var allFunctions = _.map(result, \"name\");\n            return _.filter(allFunctions, function (name) {\n                var regionMatches = options.region ? helper.getRegion(name) === options.region : true;\n                var nameMatches = _.some(_.map(filterChunks, function (chunk) {\n                    return helper.functionMatchesGroup(name, chunk);\n                }));\n                return regionMatches && nameMatches;\n            });\n        })\n            .then(function (result) {\n            functionsToDelete = result;\n            if (functionsToDelete.length === 0) {\n                return utils.reject(\"The specified filters do not match any existing functions in project \" +\n                    clc.bold(projectId) +\n                    \".\", { exit: 1 });\n            }\n            var deleteList = _.map(functionsToDelete, function (func) {\n                return \"\\t\" + helper.getFunctionLabel(func);\n            }).join(\"\\n\");\n            if (!options.force) {\n                return prompt(options, [\n                    {\n                        type: \"confirm\",\n                        name: \"confirm\",\n                        default: false,\n                        message: \"You are about to delete the following Cloud Functions:\\n\" +\n                            deleteList +\n                            \"\\n  Are you sure?\",\n                    },\n                ]);\n            }\n        })\n            .then(function () {\n            if (!(options.confirm || options.force)) {\n                return utils.reject(\"Command aborted.\", { exit: 1 });\n            }\n            return functionsDelete(functionsToDelete, projectId, appEngineLocation);\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}