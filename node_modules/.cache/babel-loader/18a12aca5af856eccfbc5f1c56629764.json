{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar _require = require(\"../command\"),\n    Command = _require.Command;\n\nvar getProjectId = require(\"../getProjectId\");\n\nvar _require2 = require(\"../requirePermissions\"),\n    requirePermissions = _require2.requirePermissions;\n\nvar logger = require(\"../logger\");\n\nvar utils = require(\"../utils\");\n\nvar functionsConfig = require(\"../functionsConfig\");\n\nmodule.exports = new Command(\"functions:config:set [values...]\").description(\"set environment config with key=value syntax\").before(requirePermissions, [\"runtimeconfig.configs.list\", \"runtimeconfig.configs.create\", \"runtimeconfig.configs.get\", \"runtimeconfig.configs.update\", \"runtimeconfig.configs.delete\", \"runtimeconfig.variables.list\", \"runtimeconfig.variables.create\", \"runtimeconfig.variables.get\", \"runtimeconfig.variables.update\", \"runtimeconfig.variables.delete\"]).before(functionsConfig.ensureApi).action(function (args, options) {\n  if (!args.length) {\n    return utils.reject(\"Must supply at least one key/value pair, e.g. \" + clc.bold('app.name=\"My App\"'));\n  }\n\n  var projectId = getProjectId(options);\n  var parsed = functionsConfig.parseSetArgs(args);\n  var promises = [];\n  parsed.forEach(function (item) {\n    promises.push(functionsConfig.setVariablesRecursive(projectId, item.configId, item.varId, item.val));\n  });\n  return Promise.all(promises).then(function () {\n    utils.logSuccess(\"Functions config updated.\");\n    logger.info(\"\\nPlease deploy your functions for the change to take effect by running \" + clc.bold(\"firebase deploy --only functions\") + \"\\n\");\n  });\n});","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/functions-config-set.js"],"names":["clc","require","Command","getProjectId","requirePermissions","logger","utils","functionsConfig","module","exports","description","before","ensureApi","action","args","options","length","reject","bold","projectId","parsed","parseSetArgs","promises","forEach","item","push","setVariablesRecursive","configId","varId","val","Promise","all","then","logSuccess","info"],"mappings":"AAAA;;AACA,IAAIA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAjB;;eACkBA,OAAO,CAAC,YAAD,C;IAAnBC,O,YAAAA,O;;AACN,IAAIC,YAAY,GAAGF,OAAO,CAAC,iBAAD,CAA1B;;gBAC6BA,OAAO,CAAC,uBAAD,C;IAA9BG,kB,aAAAA,kB;;AACN,IAAIC,MAAM,GAAGJ,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIM,eAAe,GAAGN,OAAO,CAAC,oBAAD,CAA7B;;AACAO,MAAM,CAACC,OAAP,GAAiB,IAAIP,OAAJ,CAAY,kCAAZ,EACZQ,WADY,CACA,8CADA,EAEZC,MAFY,CAELP,kBAFK,EAEe,CAC5B,4BAD4B,EAE5B,8BAF4B,EAG5B,2BAH4B,EAI5B,8BAJ4B,EAK5B,8BAL4B,EAM5B,8BAN4B,EAO5B,gCAP4B,EAQ5B,6BAR4B,EAS5B,gCAT4B,EAU5B,gCAV4B,CAFf,EAcZO,MAdY,CAcLJ,eAAe,CAACK,SAdX,EAeZC,MAfY,CAeL,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACjC,MAAI,CAACD,IAAI,CAACE,MAAV,EAAkB;AACd,WAAOV,KAAK,CAACW,MAAN,CAAa,mDAAmDjB,GAAG,CAACkB,IAAJ,CAAS,mBAAT,CAAhE,CAAP;AACH;;AACD,MAAIC,SAAS,GAAGhB,YAAY,CAACY,OAAD,CAA5B;AACA,MAAIK,MAAM,GAAGb,eAAe,CAACc,YAAhB,CAA6BP,IAA7B,CAAb;AACA,MAAIQ,QAAQ,GAAG,EAAf;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,UAAUC,IAAV,EAAgB;AAC3BF,IAAAA,QAAQ,CAACG,IAAT,CAAclB,eAAe,CAACmB,qBAAhB,CAAsCP,SAAtC,EAAiDK,IAAI,CAACG,QAAtD,EAAgEH,IAAI,CAACI,KAArE,EAA4EJ,IAAI,CAACK,GAAjF,CAAd;AACH,GAFD;AAGA,SAAOC,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAAsBU,IAAtB,CAA2B,YAAY;AAC1C1B,IAAAA,KAAK,CAAC2B,UAAN,CAAiB,2BAAjB;AACA5B,IAAAA,MAAM,CAAC6B,IAAP,CAAY,6EACRlC,GAAG,CAACkB,IAAJ,CAAS,kCAAT,CADQ,GAER,IAFJ;AAGH,GALM,CAAP;AAMH,CA/BgB,CAAjB","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar { Command } = require(\"../command\");\nvar getProjectId = require(\"../getProjectId\");\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar logger = require(\"../logger\");\nvar utils = require(\"../utils\");\nvar functionsConfig = require(\"../functionsConfig\");\nmodule.exports = new Command(\"functions:config:set [values...]\")\n    .description(\"set environment config with key=value syntax\")\n    .before(requirePermissions, [\n    \"runtimeconfig.configs.list\",\n    \"runtimeconfig.configs.create\",\n    \"runtimeconfig.configs.get\",\n    \"runtimeconfig.configs.update\",\n    \"runtimeconfig.configs.delete\",\n    \"runtimeconfig.variables.list\",\n    \"runtimeconfig.variables.create\",\n    \"runtimeconfig.variables.get\",\n    \"runtimeconfig.variables.update\",\n    \"runtimeconfig.variables.delete\",\n])\n    .before(functionsConfig.ensureApi)\n    .action(function (args, options) {\n    if (!args.length) {\n        return utils.reject(\"Must supply at least one key/value pair, e.g. \" + clc.bold('app.name=\"My App\"'));\n    }\n    var projectId = getProjectId(options);\n    var parsed = functionsConfig.parseSetArgs(args);\n    var promises = [];\n    parsed.forEach(function (item) {\n        promises.push(functionsConfig.setVariablesRecursive(projectId, item.configId, item.varId, item.val));\n    });\n    return Promise.all(promises).then(function () {\n        utils.logSuccess(\"Functions config updated.\");\n        logger.info(\"\\nPlease deploy your functions for the change to take effect by running \" +\n            clc.bold(\"firebase deploy --only functions\") +\n            \"\\n\");\n    });\n});\n"]},"metadata":{},"sourceType":"script"}