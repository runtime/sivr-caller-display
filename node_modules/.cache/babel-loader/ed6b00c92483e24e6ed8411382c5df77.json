{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst protobuf = require(\"protobufjs\");\n\nclass FallbackErrorDecoder {\n  constructor() {\n    const errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n    if (!match) {\n      throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n    }\n\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n\n    if (!type) {\n      throw new Error(`Cannot lookup type ${typeName}`);\n    }\n\n    return type.decode(anyValue.value);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n\n    const result = {\n      code: status.code,\n      message: status.message,\n      details: status.details.map(detail => this.decodeProtobufAny(detail))\n    };\n    return result;\n  }\n\n}\n\nexports.FallbackErrorDecoder = FallbackErrorDecoder;","map":{"version":3,"sources":["../../src/fallbackError.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,MAAA,QAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAmBA,MAAa,oBAAb,CAAiC;AAK/B,EAAA,WAAA,GAAA;AACE,UAAM,cAAc,GAAG,OAAO,CAAC,0BAAD,CAA9B;;AACA,SAAK,IAAL,GAAY,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAuB,cAAvB,CAAZ;AACA,SAAK,OAAL,GAAe,KAAK,IAAL,CAAU,UAAV,CAAqB,qBAArB,CAAf;AACA,SAAK,UAAL,GAAkB,KAAK,IAAL,CAAU,UAAV,CAAqB,mBAArB,CAAlB;AACD;;AAED,EAAA,iBAAiB,CAAC,QAAD,EAAsB;AACrC,UAAM,KAAK,GAAG,QAAQ,CAAC,QAAT,CAAkB,KAAlB,CAAwB,4BAAxB,CAAd;;AACA,QAAI,CAAC,KAAL,EAAY;AACV,YAAM,IAAI,KAAJ,CACJ,gDAAgD,QAAQ,CAAC,QAAQ,EAD7D,CAAN;AAGD;;AACD,UAAM,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAtB;AACA,UAAM,IAAI,GAAG,KAAK,IAAL,CAAU,UAAV,CAAqB,QAArB,CAAb;;AACA,QAAI,CAAC,IAAL,EAAW;AACT,YAAM,IAAI,KAAJ,CAAU,sBAAsB,QAAQ,EAAxC,CAAN;AACD;;AACD,WAAO,IAAI,CAAC,MAAL,CAAY,QAAQ,CAAC,KAArB,CAAP;AACD,GAzB8B,CA2B/B;;;AACA,EAAA,eAAe,CAAC,MAAD,EAA6B;AAC1C,UAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAnB;AACA,UAAM,MAAM,GAAI,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAvB,CAAhB,CAF0C,CAI1C;AACA;;AACA,UAAM,MAAM,GAAG;AACb,MAAA,IAAI,EAAE,MAAM,CAAC,IADA;AAEb,MAAA,OAAO,EAAE,MAAM,CAAC,OAFH;AAGb,MAAA,OAAO,EAAE,MAAM,CAAC,OAAP,CAAe,GAAf,CAAmB,MAAM,IAAI,KAAK,iBAAL,CAAuB,MAAvB,CAA7B;AAHI,KAAf;AAKA,WAAO,MAAP;AACD;;AAxC8B;;AAAjC,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst protobuf = require(\"protobufjs\");\nclass FallbackErrorDecoder {\n    constructor() {\n        const errorProtoJson = require('../../protos/status.json');\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType('google.protobuf.Any');\n        this.statusType = this.root.lookupType('google.rpc.Status');\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const result = {\n            code: status.code,\n            message: status.message,\n            details: status.details.map(detail => this.decodeProtobufAny(detail)),\n        };\n        return result;\n    }\n}\nexports.FallbackErrorDecoder = FallbackErrorDecoder;\n//# sourceMappingURL=fallbackError.js.map"]},"metadata":{},"sourceType":"script"}