{"ast":null,"code":"var fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar o777 = parseInt('0777', 8);\n\nfunction mkdirs(p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  } else if (!opts || typeof opts !== 'object') {\n    opts = {\n      mode: opts\n    };\n  }\n\n  var mode = opts.mode;\n  var xfs = opts.fs || fs;\n\n  if (mode === undefined) {\n    mode = o777 & ~process.umask();\n  }\n\n  if (!made) made = null;\n  callback = callback || Function();\n  p = path.resolve(p);\n  xfs.mkdir(p, mode, function (er) {\n    if (!er) {\n      made = made || p;\n      return callback(null, made);\n    }\n\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er);\n        mkdirs(path.dirname(p), opts, function (er, made) {\n          if (er) callback(er, made);else mkdirs(p, opts, callback, made);\n        });\n        break;\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n\n      default:\n        xfs.stat(p, function (er2, stat) {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made);else callback(null, made);\n        });\n        break;\n    }\n  });\n}\n\nmodule.exports = mkdirs;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/node_modules/fs-extra/lib/mkdirs/mkdirs.js"],"names":["fs","require","path","o777","parseInt","mkdirs","p","opts","callback","made","mode","xfs","undefined","process","umask","Function","resolve","mkdir","er","code","dirname","stat","er2","isDirectory","module","exports"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIE,IAAI,GAAGC,QAAQ,CAAC,MAAD,EAAS,CAAT,CAAnB;;AAEA,SAASC,MAAT,CAAiBC,CAAjB,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,IAApC,EAA0C;AACxC,MAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,IAAAA,QAAQ,GAAGD,IAAX;AACAA,IAAAA,IAAI,GAAG,EAAP;AACD,GAHD,MAGO,IAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AAC5CA,IAAAA,IAAI,GAAG;AAAEG,MAAAA,IAAI,EAAEH;AAAR,KAAP;AACD;;AAED,MAAIG,IAAI,GAAGH,IAAI,CAACG,IAAhB;AACA,MAAIC,GAAG,GAAGJ,IAAI,CAACP,EAAL,IAAWA,EAArB;;AAEA,MAAIU,IAAI,KAAKE,SAAb,EAAwB;AACtBF,IAAAA,IAAI,GAAGP,IAAI,GAAI,CAACU,OAAO,CAACC,KAAR,EAAhB;AACD;;AACD,MAAI,CAACL,IAAL,EAAWA,IAAI,GAAG,IAAP;AAEXD,EAAAA,QAAQ,GAAGA,QAAQ,IAAIO,QAAQ,EAA/B;AACAT,EAAAA,CAAC,GAAGJ,IAAI,CAACc,OAAL,CAAaV,CAAb,CAAJ;AAEAK,EAAAA,GAAG,CAACM,KAAJ,CAAUX,CAAV,EAAaI,IAAb,EAAmB,UAAUQ,EAAV,EAAc;AAC/B,QAAI,CAACA,EAAL,EAAS;AACPT,MAAAA,IAAI,GAAGA,IAAI,IAAIH,CAAf;AACA,aAAOE,QAAQ,CAAC,IAAD,EAAOC,IAAP,CAAf;AACD;;AACD,YAAQS,EAAE,CAACC,IAAX;AACE,WAAK,QAAL;AACE,YAAIjB,IAAI,CAACkB,OAAL,CAAad,CAAb,MAAoBA,CAAxB,EAA2B,OAAOE,QAAQ,CAACU,EAAD,CAAf;AAC3Bb,QAAAA,MAAM,CAACH,IAAI,CAACkB,OAAL,CAAad,CAAb,CAAD,EAAkBC,IAAlB,EAAwB,UAAUW,EAAV,EAAcT,IAAd,EAAoB;AAChD,cAAIS,EAAJ,EAAQV,QAAQ,CAACU,EAAD,EAAKT,IAAL,CAAR,CAAR,KACKJ,MAAM,CAACC,CAAD,EAAIC,IAAJ,EAAUC,QAAV,EAAoBC,IAApB,CAAN;AACN,SAHK,CAAN;AAIA;AAEF;AACA;AACA;;AACA;AACEE,QAAAA,GAAG,CAACU,IAAJ,CAASf,CAAT,EAAY,UAAUgB,GAAV,EAAeD,IAAf,EAAqB;AAC/B;AACA;AACA,cAAIC,GAAG,IAAI,CAACD,IAAI,CAACE,WAAL,EAAZ,EAAgCf,QAAQ,CAACU,EAAD,EAAKT,IAAL,CAAR,CAAhC,KACKD,QAAQ,CAAC,IAAD,EAAOC,IAAP,CAAR;AACN,SALD;AAMA;AAnBJ;AAqBD,GA1BD;AA2BD;;AAEDe,MAAM,CAACC,OAAP,GAAiBpB,MAAjB","sourcesContent":["var fs = require('graceful-fs')\nvar path = require('path')\n\nvar o777 = parseInt('0777', 8)\n\nfunction mkdirs (p, opts, callback, made) {\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  } else if (!opts || typeof opts !== 'object') {\n    opts = { mode: opts }\n  }\n\n  var mode = opts.mode\n  var xfs = opts.fs || fs\n\n  if (mode === undefined) {\n    mode = o777 & (~process.umask())\n  }\n  if (!made) made = null\n\n  callback = callback || Function()\n  p = path.resolve(p)\n\n  xfs.mkdir(p, mode, function (er) {\n    if (!er) {\n      made = made || p\n      return callback(null, made)\n    }\n    switch (er.code) {\n      case 'ENOENT':\n        if (path.dirname(p) === p) return callback(er)\n        mkdirs(path.dirname(p), opts, function (er, made) {\n          if (er) callback(er, made)\n          else mkdirs(p, opts, callback, made)\n        })\n        break\n\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n      default:\n        xfs.stat(p, function (er2, stat) {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) callback(er, made)\n          else callback(null, made)\n        })\n        break\n    }\n  })\n}\n\nmodule.exports = mkdirs\n"]},"metadata":{},"sourceType":"script"}