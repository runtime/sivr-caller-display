{"ast":null,"code":"var fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar copyFileSync = require('./copy-file-sync');\n\nvar mkdir = require('../mkdirs');\n\nfunction copySync(src, dest, options) {\n  if (typeof options === 'function' || options instanceof RegExp) {\n    options = {\n      filter: options\n    };\n  }\n\n  options = options || {};\n  options.recursive = !!options.recursive; // default to true for now\n\n  options.clobber = 'clobber' in options ? !!options.clobber : true;\n  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : true;\n\n  options.filter = options.filter || function () {\n    return true;\n  };\n\n  var stats = options.recursive ? fs.lstatSync(src) : fs.statSync(src);\n  var destFolder = path.dirname(dest);\n  var destFolderExists = fs.existsSync(destFolder);\n  var performCopy = false;\n\n  if (stats.isFile()) {\n    if (options.filter instanceof RegExp) performCopy = options.filter.test(src);else if (typeof options.filter === 'function') performCopy = options.filter(src);\n\n    if (performCopy) {\n      if (!destFolderExists) mkdir.mkdirsSync(destFolder);\n      copyFileSync(src, dest, {\n        clobber: options.clobber,\n        preserveTimestamps: options.preserveTimestamps\n      });\n    }\n  } else if (stats.isDirectory()) {\n    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest);\n    var contents = fs.readdirSync(src);\n    contents.forEach(function (content) {\n      var opts = options;\n      opts.recursive = true;\n      copySync(path.join(src, content), path.join(dest, content), opts);\n    });\n  } else if (options.recursive && stats.isSymbolicLink()) {\n    var srcPath = fs.readlinkSync(src);\n    fs.symlinkSync(srcPath, dest);\n  }\n}\n\nmodule.exports = copySync;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/node_modules/fs-extra/lib/copy-sync/copy-sync.js"],"names":["fs","require","path","copyFileSync","mkdir","copySync","src","dest","options","RegExp","filter","recursive","clobber","preserveTimestamps","stats","lstatSync","statSync","destFolder","dirname","destFolderExists","existsSync","performCopy","isFile","test","mkdirsSync","isDirectory","contents","readdirSync","forEach","content","opts","join","isSymbolicLink","srcPath","readlinkSync","symlinkSync","module","exports"],"mappings":"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","sourcesContent":["var fs = require('graceful-fs')\nvar path = require('path')\nvar copyFileSync = require('./copy-file-sync')\nvar mkdir = require('../mkdirs')\n\nfunction copySync (src, dest, options) {\n  if (typeof options === 'function' || options instanceof RegExp) {\n    options = {filter: options}\n  }\n\n  options = options || {}\n  options.recursive = !!options.recursive\n\n  // default to true for now\n  options.clobber = 'clobber' in options ? !!options.clobber : true\n  options.preserveTimestamps = 'preserveTimestamps' in options ? !!options.preserveTimestamps : true\n\n  options.filter = options.filter || function () { return true }\n\n  var stats = options.recursive ? fs.lstatSync(src) : fs.statSync(src)\n  var destFolder = path.dirname(dest)\n  var destFolderExists = fs.existsSync(destFolder)\n  var performCopy = false\n\n  if (stats.isFile()) {\n    if (options.filter instanceof RegExp) performCopy = options.filter.test(src)\n    else if (typeof options.filter === 'function') performCopy = options.filter(src)\n\n    if (performCopy) {\n      if (!destFolderExists) mkdir.mkdirsSync(destFolder)\n      copyFileSync(src, dest, {clobber: options.clobber, preserveTimestamps: options.preserveTimestamps})\n    }\n  } else if (stats.isDirectory()) {\n    if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest)\n    var contents = fs.readdirSync(src)\n    contents.forEach(function (content) {\n      var opts = options\n      opts.recursive = true\n      copySync(path.join(src, content), path.join(dest, content), opts)\n    })\n  } else if (options.recursive && stats.isSymbolicLink()) {\n    var srcPath = fs.readlinkSync(src)\n    fs.symlinkSync(srcPath, dest)\n  }\n}\n\nmodule.exports = copySync\n"]},"metadata":{},"sourceType":"script"}