{"ast":null,"code":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\n'use strict';\n\nvar url = require('fast-url-parser');\n\nvar pathutils = require('../utils/pathutils');\n\nvar _ = require('lodash'); // We cannot redirect to \"\", redirect to \"/\" instead\n\n\nfunction normalizeRedirectPath(path) {\n  return path || '/';\n}\n\nmodule.exports = function () {\n  return function (req, res, next) {\n    var config = req.superstatic;\n    var trailingSlashBehavior = config.trailingSlash;\n    var parsedUrl = url.parse(req.url);\n    var pathname = pathutils.normalizeMultiSlashes(parsedUrl.pathname);\n    var search = parsedUrl.search || '';\n    var cleanUrlRules = !!_.get(req, 'superstatic.cleanUrls'); // Exact file always wins.\n\n    return res.superstatic.provider(req, pathname).then(function (result) {\n      if (result) {\n        // If we are using cleanURLs, we'll trim off any `.html` (or `/index.html`), if it exists.\n        if (cleanUrlRules) {\n          if (_.endsWith(pathname, '.html')) {\n            var redirPath = pathutils.removeTrailingString(pathname, '.html');\n\n            if (_.endsWith(redirPath, '/index')) {\n              redirPath = pathutils.removeTrailingString(redirPath, '/index');\n            } // But if we need to keep the trailing slashes, we will do so.\n\n\n            if (trailingSlashBehavior === true) {\n              redirPath = pathutils.addTrailingSlash(redirPath);\n            }\n\n            return res.superstatic.handle({\n              redirect: normalizeRedirectPath(redirPath + search)\n            });\n          }\n        }\n\n        return res.superstatic.handleFileStream({\n          file: pathname\n        }, result);\n      } // Now, let's consider the trailing slash.\n\n\n      var hasTrailingSlash = pathutils.hasTrailingSlash(pathname); // We want to check for some other files, namely an `index.html` if this were a directory.\n\n      var pathAsDirectoryWithIndex = pathutils.asDirectoryIndex(pathutils.addTrailingSlash(pathname));\n      return res.superstatic.provider(req, pathAsDirectoryWithIndex).then(function (pathAsDirectoryWithIndexResult) {\n        // If an exact file wins now, we know that this path leads us to a directory.\n        if (pathAsDirectoryWithIndexResult) {\n          if (trailingSlashBehavior === undefined && !hasTrailingSlash && !cleanUrlRules) {\n            return res.superstatic.handle({\n              redirect: pathutils.addTrailingSlash(pathname) + search\n            });\n          }\n\n          if (trailingSlashBehavior === false && hasTrailingSlash && pathname !== '/') {\n            // No infinite redirects\n            return res.superstatic.handle({\n              redirect: normalizeRedirectPath(pathutils.removeTrailingSlash(pathname) + search)\n            });\n          }\n\n          if (trailingSlashBehavior === true && !hasTrailingSlash) {\n            return res.superstatic.handle({\n              redirect: pathutils.addTrailingSlash(pathname) + search\n            });\n          } // If we haven't returned yet, our path is \"correct\" and we should be serving a file, not redirecting.\n\n\n          return res.superstatic.handleFileStream({\n            file: pathAsDirectoryWithIndex\n          }, pathAsDirectoryWithIndexResult);\n        } // Let's check on the clean URLs property.\n        // We want to know if a specific mutation of the path exists.\n\n\n        if (cleanUrlRules) {\n          var appendedPath = pathname;\n\n          if (hasTrailingSlash) {\n            if (trailingSlashBehavior !== undefined) {\n              // We want to remove the trailing slash and see if a file exists with an .html attached.\n              appendedPath = pathutils.removeTrailingString(pathname, '/') + '.html';\n            }\n          } else {\n            // Let's see if our path is a simple clean URL missing a .HTML5\n            appendedPath += '.html';\n          }\n\n          return res.superstatic.provider(req, appendedPath).then(function (appendedPathResult) {\n            if (appendedPathResult) {\n              // Okay, back to trailing slash behavior\n              if (trailingSlashBehavior === false && hasTrailingSlash) {\n                // If we had a slash to begin with, and we could be serving a file without it, we'll remove the slash.\n                // (This works because we are in the cleanURL block.)\n                return res.superstatic.handle({\n                  redirect: normalizeRedirectPath(pathutils.removeTrailingSlash(pathname) + search)\n                });\n              }\n\n              if (trailingSlashBehavior === true && !hasTrailingSlash) {\n                // If we are missing a slash and need to add it, we want to make sure our appended path is cleaned up.\n                appendedPath = pathutils.removeTrailingString(appendedPath, '.html');\n                appendedPath = pathutils.removeTrailingString(appendedPath, '/index');\n                return res.superstatic.handle({\n                  redirect: pathutils.addTrailingSlash(appendedPath) + search\n                });\n              } // If we've gotten this far and still have `/index.html` on the end, we want to remove it from the URL.\n\n\n              if (_.endsWith(appendedPath, '/index.html')) {\n                return res.superstatic.handle({\n                  redirect: normalizeRedirectPath(pathutils.removeTrailingString(appendedPath, '/index.html') + search)\n                });\n              } // And if we should be serving a file and we're at the right path, we'll serve the file.\n\n\n              return res.superstatic.handleFileStream({\n                file: appendedPath\n              }, appendedPathResult);\n            }\n\n            return next();\n          });\n        }\n\n        return next();\n      });\n    }).catch(function (err) {\n      res.superstatic.handleError(err);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/superstatic/lib/middleware/files.js"],"names":["url","require","pathutils","_","normalizeRedirectPath","path","module","exports","req","res","next","config","superstatic","trailingSlashBehavior","trailingSlash","parsedUrl","parse","pathname","normalizeMultiSlashes","search","cleanUrlRules","get","provider","then","result","endsWith","redirPath","removeTrailingString","addTrailingSlash","handle","redirect","handleFileStream","file","hasTrailingSlash","pathAsDirectoryWithIndex","asDirectoryIndex","pathAsDirectoryWithIndexResult","undefined","removeTrailingSlash","appendedPath","appendedPathResult","catch","err","handleError"],"mappings":"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","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\n'use strict';\n\nvar url = require('fast-url-parser');\nvar pathutils = require('../utils/pathutils');\nvar _ = require('lodash');\n\n// We cannot redirect to \"\", redirect to \"/\" instead\nfunction normalizeRedirectPath(path) {\n  return path || '/';\n}\n\nmodule.exports = function() {\n  return function(req, res, next) {\n    var config = req.superstatic;\n    var trailingSlashBehavior = config.trailingSlash;\n\n    var parsedUrl = url.parse(req.url);\n    var pathname = pathutils.normalizeMultiSlashes(parsedUrl.pathname);\n    var search = parsedUrl.search || '';\n\n    var cleanUrlRules = !!_.get(req, 'superstatic.cleanUrls');\n\n    // Exact file always wins.\n    return res.superstatic.provider(req, pathname).then(function(result) {\n      if (result) {\n        // If we are using cleanURLs, we'll trim off any `.html` (or `/index.html`), if it exists.\n        if (cleanUrlRules) {\n          if (_.endsWith(pathname, '.html')) {\n            var redirPath = pathutils.removeTrailingString(pathname, '.html');\n            if (_.endsWith(redirPath, '/index')) {\n              redirPath = pathutils.removeTrailingString(redirPath, '/index');\n            }\n            // But if we need to keep the trailing slashes, we will do so.\n            if (trailingSlashBehavior === true) {\n              redirPath = pathutils.addTrailingSlash(redirPath);\n            }\n            return res.superstatic.handle({redirect: normalizeRedirectPath(redirPath + search)});\n          }\n        }\n        return res.superstatic.handleFileStream({file: pathname}, result);\n      }\n\n      // Now, let's consider the trailing slash.\n      var hasTrailingSlash = pathutils.hasTrailingSlash(pathname);\n\n      // We want to check for some other files, namely an `index.html` if this were a directory.\n      var pathAsDirectoryWithIndex = pathutils.asDirectoryIndex(pathutils.addTrailingSlash(pathname));\n      return res.superstatic.provider(req, pathAsDirectoryWithIndex).then(function(pathAsDirectoryWithIndexResult) {\n        // If an exact file wins now, we know that this path leads us to a directory.\n        if (pathAsDirectoryWithIndexResult) {\n          if (trailingSlashBehavior === undefined &&\n              !hasTrailingSlash &&\n              !cleanUrlRules) {\n            return res.superstatic.handle({redirect: pathutils.addTrailingSlash(pathname) + search});\n          }\n          if (trailingSlashBehavior === false &&\n              hasTrailingSlash &&\n              pathname !== '/') { // No infinite redirects\n            return res.superstatic.handle({redirect: normalizeRedirectPath(pathutils.removeTrailingSlash(pathname) + search)});\n          }\n          if (trailingSlashBehavior === true &&\n              !hasTrailingSlash) {\n            return res.superstatic.handle({redirect: pathutils.addTrailingSlash(pathname) + search});\n          }\n          // If we haven't returned yet, our path is \"correct\" and we should be serving a file, not redirecting.\n          return res.superstatic.handleFileStream({file: pathAsDirectoryWithIndex}, pathAsDirectoryWithIndexResult);\n        }\n\n        // Let's check on the clean URLs property.\n        // We want to know if a specific mutation of the path exists.\n        if (cleanUrlRules) {\n          var appendedPath = pathname;\n          if (hasTrailingSlash) {\n            if (trailingSlashBehavior !== undefined) {\n              // We want to remove the trailing slash and see if a file exists with an .html attached.\n              appendedPath = pathutils.removeTrailingString(pathname, '/') + '.html';\n            }\n          } else {\n            // Let's see if our path is a simple clean URL missing a .HTML5\n            appendedPath += '.html';\n          }\n\n          return res.superstatic.provider(req, appendedPath).then(function(appendedPathResult) {\n            if (appendedPathResult) {\n              // Okay, back to trailing slash behavior\n              if (trailingSlashBehavior === false &&\n                  hasTrailingSlash) {\n                // If we had a slash to begin with, and we could be serving a file without it, we'll remove the slash.\n                // (This works because we are in the cleanURL block.)\n                return res.superstatic.handle({redirect: normalizeRedirectPath(pathutils.removeTrailingSlash(pathname) + search)});\n              }\n              if (trailingSlashBehavior === true &&\n                  !hasTrailingSlash) {\n                // If we are missing a slash and need to add it, we want to make sure our appended path is cleaned up.\n                appendedPath = pathutils.removeTrailingString(appendedPath, '.html');\n                appendedPath = pathutils.removeTrailingString(appendedPath, '/index');\n                return res.superstatic.handle({redirect: pathutils.addTrailingSlash(appendedPath) + search});\n              }\n              // If we've gotten this far and still have `/index.html` on the end, we want to remove it from the URL.\n              if (_.endsWith(appendedPath, '/index.html')) {\n                return res.superstatic.handle({redirect: normalizeRedirectPath(pathutils.removeTrailingString(appendedPath, '/index.html') + search)});\n              }\n              // And if we should be serving a file and we're at the right path, we'll serve the file.\n              return res.superstatic.handleFileStream({file: appendedPath}, appendedPathResult);\n            }\n\n            return next();\n          });\n        }\n\n        return next();\n      });\n    }).catch(function(err) {\n      res.superstatic.handleError(err);\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"script"}