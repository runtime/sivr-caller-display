{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst registry_1 = require(\"./registry\");\n\nconst controller = require(\"./controller\");\n\nconst error_1 = require(\"../error\");\n\nclass EmulatorServer {\n  constructor(instance) {\n    this.instance = instance;\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const _this$instance$getInf = this.instance.getInfo(),\n            port = _this$instance$getInf.port,\n            host = _this$instance$getInf.host;\n\n      const portOpen = yield controller.checkPortOpen(port, host);\n\n      if (!portOpen) {\n        throw new error_1.FirebaseError(`Port ${port} is not open on ${host}, could not start ${this.instance.getName()} emulator.`);\n      }\n\n      yield registry_1.EmulatorRegistry.start(this.instance);\n    });\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.instance.connect();\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield registry_1.EmulatorRegistry.stop(this.instance.getName());\n    });\n  }\n\n  get() {\n    return this.instance;\n  }\n\n}\n\nexports.EmulatorServer = EmulatorServer;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/emulatorServer.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","registry_1","require","controller","error_1","EmulatorServer","constructor","instance","start","getInfo","port","host","portOpen","checkPortOpen","FirebaseError","getName","EmulatorRegistry","connect","stop","get"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst registry_1 = require(\"./registry\");\nconst controller = require(\"./controller\");\nconst error_1 = require(\"../error\");\nclass EmulatorServer {\n    constructor(instance) {\n        this.instance = instance;\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { port, host } = this.instance.getInfo();\n            const portOpen = yield controller.checkPortOpen(port, host);\n            if (!portOpen) {\n                throw new error_1.FirebaseError(`Port ${port} is not open on ${host}, could not start ${this.instance.getName()} emulator.`);\n            }\n            yield registry_1.EmulatorRegistry.start(this.instance);\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.instance.connect();\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield registry_1.EmulatorRegistry.stop(this.instance.getName());\n        });\n    }\n    get() {\n        return this.instance;\n    }\n}\nexports.EmulatorServer = EmulatorServer;\n"]},"metadata":{},"sourceType":"script"}