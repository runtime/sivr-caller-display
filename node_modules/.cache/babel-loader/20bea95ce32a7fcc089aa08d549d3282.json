{"ast":null,"code":"var forge = require('node-forge');\n\nvar fs = require('fs');\n/**\n * Convert a .p12 file to .pem string.\n * This is the constructor so it can also be used to\n * create an object that can be reused to get different keys.\n *\n * @param  {string}    filename The .p12 key filename.\n * @param  {Function=} callback The callback function.\n */\n\n\nfunction GoogleP12toPem(filename, callback) {\n  if (!(this instanceof GoogleP12toPem)) {\n    var gp12 = new GoogleP12toPem();\n    return gp12.getPem(filename, callback);\n  }\n\n  this.pem = null;\n}\n/**\n * Convert a .p12 file to .pem string\n * @param  {string}    filename The .p12 key filename.\n * @param  {Function=} callback The callback function.\n * @return {string=}            The .pem private key if no callback provided.\n */\n\n\nGoogleP12toPem.prototype.getPem = function (filename, callback) {\n  var self = this;\n\n  if (typeof callback === 'function') {\n    fs.readFile(filename, {\n      encoding: 'base64'\n    }, function (err, keyp12) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      try {\n        this.pem = _convertToPem(keyp12);\n      } catch (e) {\n        callback(e, null);\n        return;\n      }\n\n      callback(null, this.pem);\n    });\n  } else {\n    var keyp12 = fs.readFileSync(filename, {\n      encoding: 'base64'\n    });\n    this.pem = _convertToPem(keyp12);\n    return this.pem;\n  }\n\n  function _convertToPem(p12base64) {\n    var p12Der = forge.util.decode64(p12base64);\n    var p12Asn1 = forge.asn1.fromDer(p12Der);\n    var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n    var privateKey = p12.getBagsByFriendlyName('privatekey')[0].key;\n    var pem = forge.pki.privateKeyToPem(privateKey);\n    return pem.replace(/\\r\\n/g, '\\n');\n  }\n};\n\nmodule.exports = GoogleP12toPem;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/google-auto-auth/node_modules/google-p12-pem/index.js"],"names":["forge","require","fs","GoogleP12toPem","filename","callback","gp12","getPem","pem","prototype","self","readFile","encoding","err","keyp12","_convertToPem","e","readFileSync","p12base64","p12Der","util","decode64","p12Asn1","asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","privateKey","getBagsByFriendlyName","key","pki","privateKeyToPem","replace","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAEA;;;;;;;;;;AAQA,SAASE,cAAT,CAAwBC,QAAxB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAI,EAAE,gBAAgBF,cAAlB,CAAJ,EAAuC;AACrC,QAAIG,IAAI,GAAG,IAAIH,cAAJ,EAAX;AACA,WAAOG,IAAI,CAACC,MAAL,CAAYH,QAAZ,EAAsBC,QAAtB,CAAP;AACD;;AAED,OAAKG,GAAL,GAAW,IAAX;AACD;AAED;;;;;;;;AAMAL,cAAc,CAACM,SAAf,CAAyBF,MAAzB,GAAkC,UAASH,QAAT,EAAmBC,QAAnB,EAA6B;AAC7D,MAAIK,IAAI,GAAG,IAAX;;AAEA,MAAI,OAAOL,QAAP,KAAoB,UAAxB,EAAoC;AAClCH,IAAAA,EAAE,CAACS,QAAH,CAAYP,QAAZ,EAAsB;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAAtB,EAA8C,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAClE,UAAID,GAAJ,EAAS;AACPR,QAAAA,QAAQ,CAACQ,GAAD,EAAM,IAAN,CAAR;AACA;AACD;;AACD,UAAI;AACF,aAAKL,GAAL,GAAWO,aAAa,CAACD,MAAD,CAAxB;AACD,OAFD,CAEE,OAAOE,CAAP,EAAU;AACVX,QAAAA,QAAQ,CAACW,CAAD,EAAI,IAAJ,CAAR;AACA;AACD;;AACDX,MAAAA,QAAQ,CAAC,IAAD,EAAO,KAAKG,GAAZ,CAAR;AACD,KAZD;AAaD,GAdD,MAcO;AACL,QAAIM,MAAM,GAAGZ,EAAE,CAACe,YAAH,CAAgBb,QAAhB,EAA0B;AAAEQ,MAAAA,QAAQ,EAAE;AAAZ,KAA1B,CAAb;AACA,SAAKJ,GAAL,GAAWO,aAAa,CAACD,MAAD,CAAxB;AACA,WAAO,KAAKN,GAAZ;AACD;;AAED,WAASO,aAAT,CAAuBG,SAAvB,EAAkC;AAChC,QAAIC,MAAM,GAAGnB,KAAK,CAACoB,IAAN,CAAWC,QAAX,CAAoBH,SAApB,CAAb;AACA,QAAII,OAAO,GAAGtB,KAAK,CAACuB,IAAN,CAAWC,OAAX,CAAmBL,MAAnB,CAAd;AACA,QAAIM,GAAG,GAAGzB,KAAK,CAAC0B,MAAN,CAAaC,cAAb,CAA4BL,OAA5B,EAAqC,YAArC,CAAV;AACA,QAAIM,UAAU,GAAGH,GAAG,CAACI,qBAAJ,CAA0B,YAA1B,EAAwC,CAAxC,EAA2CC,GAA5D;AACA,QAAItB,GAAG,GAAGR,KAAK,CAAC+B,GAAN,CAAUC,eAAV,CAA0BJ,UAA1B,CAAV;AACA,WAAOpB,GAAG,CAACyB,OAAJ,CAAY,OAAZ,EAAqB,IAArB,CAAP;AACD;AACF,CA/BD;;AAiCAC,MAAM,CAACC,OAAP,GAAiBhC,cAAjB","sourcesContent":["var forge = require('node-forge');\nvar fs = require('fs');\n\n/**\n * Convert a .p12 file to .pem string.\n * This is the constructor so it can also be used to\n * create an object that can be reused to get different keys.\n *\n * @param  {string}    filename The .p12 key filename.\n * @param  {Function=} callback The callback function.\n */\nfunction GoogleP12toPem(filename, callback) {\n  if (!(this instanceof GoogleP12toPem)) {\n    var gp12 = new GoogleP12toPem();\n    return gp12.getPem(filename, callback);\n  }\n\n  this.pem = null;\n}\n\n/**\n * Convert a .p12 file to .pem string\n * @param  {string}    filename The .p12 key filename.\n * @param  {Function=} callback The callback function.\n * @return {string=}            The .pem private key if no callback provided.\n */\nGoogleP12toPem.prototype.getPem = function(filename, callback) {\n  var self = this;\n\n  if (typeof callback === 'function') {\n    fs.readFile(filename, { encoding: 'base64' }, function(err, keyp12) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n      try {\n        this.pem = _convertToPem(keyp12);\n      } catch (e) {\n        callback(e, null);\n        return;\n      }\n      callback(null, this.pem);\n    });\n  } else {\n    var keyp12 = fs.readFileSync(filename, { encoding: 'base64' });\n    this.pem = _convertToPem(keyp12);\n    return this.pem;\n  }\n\n  function _convertToPem(p12base64) {\n    var p12Der = forge.util.decode64(p12base64);\n    var p12Asn1 = forge.asn1.fromDer(p12Der);\n    var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n    var privateKey = p12.getBagsByFriendlyName('privatekey')[0].key;\n    var pem = forge.pki.privateKeyToPem(privateKey);\n    return pem.replace(/\\r\\n/g, '\\n');\n  }\n};\n\nmodule.exports = GoogleP12toPem;\n"]},"metadata":{},"sourceType":"script"}