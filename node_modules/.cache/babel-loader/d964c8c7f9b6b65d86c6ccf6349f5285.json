{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst path = require(\"path\");\n\nconst express = require(\"express\");\n\nconst request = require(\"request\");\n\nconst clc = require(\"cli-color\");\n\nconst http = require(\"http\");\n\nconst logger = require(\"../logger\");\n\nconst track = require(\"../track\");\n\nconst constants_1 = require(\"./constants\");\n\nconst types_1 = require(\"./types\");\n\nconst chokidar = require(\"chokidar\");\n\nconst spawn = require(\"cross-spawn\");\n\nconst child_process_1 = require(\"child_process\");\n\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\n\nconst registry_1 = require(\"./registry\");\n\nconst events_1 = require(\"events\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst functionsRuntimeWorker_1 = require(\"./functionsRuntimeWorker\");\n\nconst error_1 = require(\"../error\");\n\nconst workQueue_1 = require(\"./workQueue\");\n\nconst EVENT_INVOKE = \"functions:invoke\";\nconst DATABASE_PATH_PATTERN = new RegExp(\"^projects/[^/]+/instances/[^/]+/refs(/.*)$\");\n\nclass FunctionsEmulator {\n  constructor(args) {\n    this.args = args;\n    this.nodeBinary = \"\";\n    this.triggers = [];\n    this.knownTriggerIDs = {};\n    emulatorLogger_1.EmulatorLogger.verbosity = this.args.quiet ? emulatorLogger_1.Verbosity.QUIET : emulatorLogger_1.Verbosity.DEBUG;\n    const mode = this.args.debugPort ? types_1.FunctionsExecutionMode.SEQUENTIAL : types_1.FunctionsExecutionMode.AUTO;\n    this.workerPool = new functionsRuntimeWorker_1.RuntimeWorkerPool(mode);\n    this.workQueue = new workQueue_1.WorkQueue(mode);\n  }\n\n  static getHttpFunctionUrl(host, port, projectId, name, region) {\n    return `http://${host}:${port}/${projectId}/${region}/${name}`;\n  }\n\n  createHubServer() {\n    this.workQueue.start();\n    const hub = express();\n    hub.use((req, res, next) => {\n      const chunks = [];\n      req.on(\"data\", chunk => {\n        chunks.push(chunk);\n      });\n      req.on(\"end\", () => {\n        req.rawBody = Buffer.concat(chunks);\n        next();\n      });\n    });\n    hub.get(\"/\", (req, res) => __awaiter(this, void 0, void 0, function* () {\n      res.json({\n        status: \"alive\"\n      });\n    }));\n    const backgroundFunctionRoute = `/functions/projects/${this.args.projectId}/triggers/:trigger_name`;\n    const httpsFunctionRoute = `/${this.args.projectId}/:region/:trigger_name`;\n    const httpsFunctionRoutes = [httpsFunctionRoute, `${httpsFunctionRoute}/*`];\n\n    const backgroundHandler = (req, res) => __awaiter(this, void 0, void 0, function* () {\n      this.workQueue.submit(() => {\n        return this.handleBackgroundTrigger(req, res);\n      });\n    });\n\n    const httpsHandler = (req, res) => __awaiter(this, void 0, void 0, function* () {\n      this.workQueue.submit(() => {\n        return this.handleHttpsTrigger(req, res);\n      });\n    });\n\n    hub.post(backgroundFunctionRoute, backgroundHandler);\n    hub.all(httpsFunctionRoutes, httpsHandler);\n    return hub;\n  }\n\n  startFunctionRuntime(triggerId, triggerType, proto, runtimeOpts) {\n    const bundleTemplate = this.getBaseBundle();\n    const runtimeBundle = Object.assign({}, bundleTemplate, {\n      ports: {\n        firestore: registry_1.EmulatorRegistry.getPort(types_1.Emulators.FIRESTORE),\n        database: registry_1.EmulatorRegistry.getPort(types_1.Emulators.DATABASE),\n        pubsub: registry_1.EmulatorRegistry.getPort(types_1.Emulators.PUBSUB)\n      },\n      proto,\n      triggerId,\n      triggerType\n    });\n    const opts = runtimeOpts || {\n      nodeBinary: this.nodeBinary\n    };\n    const worker = this.invokeRuntime(runtimeBundle, opts);\n    return worker;\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.nodeBinary = yield this.askInstallNodeVersion(this.args.functionsDir);\n\n      const _this$getInfo = this.getInfo(),\n            host = _this$getInfo.host,\n            port = _this$getInfo.port;\n\n      this.workQueue.start();\n      this.server = this.createHubServer().listen(port, host);\n    });\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      emulatorLogger_1.EmulatorLogger.logLabeled(\"BULLET\", \"functions\", `Watching \"${this.args.functionsDir}\" for Cloud Functions...`);\n      const watcher = chokidar.watch(this.args.functionsDir, {\n        ignored: [/.+?[\\\\\\/]node_modules[\\\\\\/].+?/, /(^|[\\/\\\\])\\../, /.+\\.log/],\n        persistent: true\n      });\n\n      const loadTriggers = () => __awaiter(this, void 0, void 0, function* () {\n        this.workerPool.refresh();\n        const worker = this.invokeRuntime(this.getBaseBundle(), {\n          nodeBinary: this.nodeBinary\n        });\n        const triggerParseEvent = yield types_1.EmulatorLog.waitForLog(worker.runtime.events, \"SYSTEM\", \"triggers-parsed\");\n        const triggerDefinitions = triggerParseEvent.data.triggerDefinitions;\n        const toSetup = triggerDefinitions.filter(definition => !this.knownTriggerIDs[definition.name]);\n        this.triggers = triggerDefinitions;\n        const triggerResults = [];\n\n        for (const definition of toSetup) {\n          if (definition.httpsTrigger) {\n            const region = functionsEmulatorShared_1.getFunctionRegion(definition);\n\n            const _this$getInfo2 = this.getInfo(),\n                  host = _this$getInfo2.host,\n                  port = _this$getInfo2.port;\n\n            const url = FunctionsEmulator.getHttpFunctionUrl(host, port, this.args.projectId, definition.name, region);\n            triggerResults.push({\n              name: definition.name,\n              type: \"http\",\n              details: url\n            });\n          } else {\n            const service = functionsEmulatorShared_1.getFunctionService(definition);\n            const result = {\n              name: definition.name,\n              type: constants_1.Constants.getServiceName(service)\n            };\n            let added = false;\n\n            switch (service) {\n              case constants_1.Constants.SERVICE_FIRESTORE:\n                added = yield this.addFirestoreTrigger(this.args.projectId, definition);\n                break;\n\n              case constants_1.Constants.SERVICE_REALTIME_DATABASE:\n                added = yield this.addRealtimeDatabaseTrigger(this.args.projectId, definition);\n                break;\n\n              case constants_1.Constants.SERVICE_PUBSUB:\n                added = yield this.addPubsubTrigger(this.args.projectId, definition);\n                break;\n\n              default:\n                emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `Unsupported trigger: ${JSON.stringify(definition)}`);\n                break;\n            }\n\n            result.ignored = !added;\n            triggerResults.push(result);\n          }\n\n          this.knownTriggerIDs[definition.name] = true;\n        }\n\n        const successTriggers = triggerResults.filter(r => !r.ignored);\n\n        for (const result of successTriggers) {\n          const msg = result.details ? `${clc.bold(result.type)} function initialized (${result.details}).` : `${clc.bold(result.type)} function initialized.`;\n          emulatorLogger_1.EmulatorLogger.logLabeled(\"SUCCESS\", `functions[${result.name}]`, msg);\n        }\n\n        const ignoreTriggers = triggerResults.filter(r => r.ignored);\n\n        for (const result of ignoreTriggers) {\n          const msg = `function ignored because the ${result.type} emulator does not exist or is not running.`;\n          emulatorLogger_1.EmulatorLogger.logLabeled(\"BULLET\", `functions[${result.name}]`, msg);\n        }\n      });\n\n      const debouncedLoadTriggers = _.debounce(loadTriggers, 1000);\n\n      watcher.on(\"change\", filePath => {\n        emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `File ${filePath} changed, reloading triggers`);\n        return debouncedLoadTriggers();\n      });\n      return loadTriggers();\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.workQueue.stop();\n      this.workerPool.exit();\n      Promise.resolve(this.server && this.server.close());\n    });\n  }\n\n  addRealtimeDatabaseTrigger(projectId, definition) {\n    const databasePort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.DATABASE);\n\n    if (!databasePort) {\n      return Promise.resolve(false);\n    }\n\n    if (!definition.eventTrigger) {\n      emulatorLogger_1.EmulatorLogger.log(\"WARN\", `Event trigger \"${definition.name}\" has undefined \"eventTrigger\" member`);\n      return Promise.reject();\n    }\n\n    const result = DATABASE_PATH_PATTERN.exec(definition.eventTrigger.resource);\n\n    if (result === null || result.length !== 2) {\n      emulatorLogger_1.EmulatorLogger.log(\"WARN\", `Event trigger \"${definition.name}\" has malformed \"resource\" member. ` + `${definition.eventTrigger.resource}`);\n      return Promise.reject();\n    }\n\n    const bundle = JSON.stringify({\n      name: `projects/${projectId}/locations/_/functions/${definition.name}`,\n      path: result[1],\n      event: definition.eventTrigger.eventType,\n      topic: `projects/${projectId}/topics/${definition.name}`\n    });\n    logger.debug(`addDatabaseTrigger`, JSON.stringify(bundle));\n    return new Promise((resolve, reject) => {\n      let setTriggersPath = `http://localhost:${databasePort}/.settings/functionTriggers.json`;\n\n      if (projectId !== \"\") {\n        setTriggersPath += `?ns=${projectId}`;\n      } else {\n        emulatorLogger_1.EmulatorLogger.log(\"WARN\", `No project in use. Registering function trigger for sentinel namespace '${constants_1.Constants.DEFAULT_DATABASE_EMULATOR_NAMESPACE}'`);\n      }\n\n      request.post(setTriggersPath, {\n        auth: {\n          bearer: \"owner\"\n        },\n        body: bundle\n      }, (err, res, body) => {\n        if (err) {\n          emulatorLogger_1.EmulatorLogger.log(\"WARN\", \"Error adding trigger: \" + err);\n          reject();\n          return;\n        }\n\n        resolve(true);\n      });\n    });\n  }\n\n  addFirestoreTrigger(projectId, definition) {\n    const firestorePort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.FIRESTORE);\n\n    if (!firestorePort) {\n      return Promise.resolve(false);\n    }\n\n    const bundle = JSON.stringify({\n      eventTrigger: definition.eventTrigger\n    });\n    logger.debug(`addFirestoreTrigger`, JSON.stringify(bundle));\n    return new Promise((resolve, reject) => {\n      request.put(`http://localhost:${firestorePort}/emulator/v1/projects/${projectId}/triggers/${definition.name}`, {\n        body: bundle\n      }, (err, res, body) => {\n        if (err) {\n          emulatorLogger_1.EmulatorLogger.log(\"WARN\", \"Error adding trigger: \" + err);\n          reject();\n          return;\n        }\n\n        resolve(true);\n      });\n    });\n  }\n\n  addPubsubTrigger(projectId, definition) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pubsubPort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.PUBSUB);\n\n      if (!pubsubPort) {\n        return false;\n      }\n\n      if (!definition.eventTrigger) {\n        return false;\n      }\n\n      const pubsubEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.PUBSUB);\n      logger.debug(`addPubsubTrigger`, JSON.stringify({\n        eventTrigger: definition.eventTrigger\n      }));\n      const resource = definition.eventTrigger.resource;\n      const resourceParts = resource.split(\"/\");\n      const topic = resourceParts[resourceParts.length - 1];\n\n      try {\n        yield pubsubEmulator.addTrigger(topic, definition.name);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    });\n  }\n\n  getProjectId() {\n    return this.args.projectId;\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.FUNCTIONS);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.FUNCTIONS);\n    return {\n      host,\n      port\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.FUNCTIONS;\n  }\n\n  getTriggers() {\n    return this.triggers;\n  }\n\n  getTriggerById(triggerId) {\n    for (const trigger of this.triggers) {\n      if (trigger.name === triggerId) {\n        return trigger;\n      }\n    }\n\n    throw new error_1.FirebaseError(`No trigger with name ${triggerId}`);\n  }\n\n  getBaseBundle() {\n    return {\n      cwd: this.args.functionsDir,\n      projectId: this.args.projectId,\n      triggerId: \"\",\n      triggerType: undefined,\n      ports: {\n        firestore: registry_1.EmulatorRegistry.getPort(types_1.Emulators.FIRESTORE),\n        database: registry_1.EmulatorRegistry.getPort(types_1.Emulators.DATABASE),\n        pubsub: registry_1.EmulatorRegistry.getPort(types_1.Emulators.PUBSUB)\n      },\n      disabled_features: this.args.disabledRuntimeFeatures\n    };\n  }\n\n  askInstallNodeVersion(cwd) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pkg = require(path.join(cwd, \"package.json\"));\n\n      if (!pkg.engines || !pkg.engines.node) {\n        emulatorLogger_1.EmulatorLogger.log(\"WARN\", \"Your functions directory does not specify a Node version.\\n   \" + \"- Learn more at https://firebase.google.com/docs/functions/manage-functions#set_runtime_options\");\n        return process.execPath;\n      }\n\n      const hostMajorVersion = process.versions.node.split(\".\")[0];\n      const requestedMajorVersion = pkg.engines.node;\n      let localMajorVersion = \"0\";\n      const localNodePath = path.join(cwd, \"node_modules/.bin/node\");\n\n      try {\n        const localNodeOutput = child_process_1.spawnSync(localNodePath, [\"--version\"]).stdout.toString();\n        localMajorVersion = localNodeOutput.slice(1).split(\".\")[0];\n      } catch (err) {}\n\n      if (requestedMajorVersion === hostMajorVersion) {\n        emulatorLogger_1.EmulatorLogger.logLabeled(\"SUCCESS\", \"functions\", `Using node@${requestedMajorVersion} from host.`);\n        return process.execPath;\n      }\n\n      if (localMajorVersion === requestedMajorVersion) {\n        emulatorLogger_1.EmulatorLogger.logLabeled(\"SUCCESS\", \"functions\", `Using node@${requestedMajorVersion} from local cache.`);\n        return localNodePath;\n      }\n\n      emulatorLogger_1.EmulatorLogger.log(\"WARN\", `Your requested \"node\" version \"${requestedMajorVersion}\" doesn't match your global version \"${hostMajorVersion}\"`);\n      return process.execPath;\n    });\n  }\n\n  invokeRuntime(frb, opts) {\n    if (this.workerPool.readyForWork(frb.triggerId)) {\n      return this.workerPool.submitWork(frb.triggerId, frb, opts);\n    }\n\n    const emitter = new events_1.EventEmitter();\n    const args = [path.join(__dirname, \"functionsEmulatorRuntime\")];\n\n    if (opts.ignore_warnings) {\n      args.unshift(\"--no-warnings\");\n    }\n\n    if (this.args.debugPort) {\n      const _this$getInfo3 = this.getInfo(),\n            host = _this$getInfo3.host;\n\n      args.unshift(`--inspect=${host}:${this.args.debugPort}`);\n    }\n\n    const childProcess = spawn(opts.nodeBinary, args, {\n      env: Object.assign({\n        node: opts.nodeBinary\n      }, opts.env, process.env),\n      cwd: frb.cwd,\n      stdio: [\"pipe\", \"pipe\", \"pipe\", \"ipc\"]\n    });\n    const buffers = {\n      stderr: {\n        pipe: childProcess.stderr,\n        value: \"\"\n      },\n      stdout: {\n        pipe: childProcess.stdout,\n        value: \"\"\n      }\n    };\n    const ipcBuffer = {\n      value: \"\"\n    };\n    childProcess.on(\"message\", message => {\n      this.onData(childProcess, emitter, ipcBuffer, message);\n    });\n\n    for (const id in buffers) {\n      if (buffers.hasOwnProperty(id)) {\n        const buffer = buffers[id];\n        buffer.pipe.on(\"data\", buf => {\n          this.onData(childProcess, emitter, buffer, buf);\n        });\n      }\n    }\n\n    const runtime = {\n      pid: childProcess.pid,\n      exit: new Promise(resolve => {\n        childProcess.on(\"exit\", resolve);\n      }),\n      events: emitter,\n      shutdown: () => {\n        childProcess.kill();\n      },\n      kill: signal => {\n        childProcess.kill(signal);\n        emitter.emit(\"log\", new types_1.EmulatorLog(\"SYSTEM\", \"runtime-status\", \"killed\"));\n      },\n      send: args => {\n        return childProcess.send(JSON.stringify(args));\n      }\n    };\n    this.workerPool.addWorker(frb.triggerId, runtime);\n    return this.workerPool.submitWork(frb.triggerId, frb, opts);\n  }\n\n  handleBackgroundTrigger(req, res) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const method = req.method;\n      const triggerId = req.params.trigger_name;\n      emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `Accepted request ${method} ${req.url} --> ${triggerId}`);\n      const reqBody = req.rawBody;\n      const proto = JSON.parse(reqBody.toString());\n      const worker = this.startFunctionRuntime(triggerId, functionsEmulatorShared_1.EmulatedTriggerType.BACKGROUND, proto);\n      worker.onLogs(el => {\n        if (el.level === \"FATAL\") {\n          res.status(500).send(el.text);\n        }\n      });\n\n      if (triggerId) {\n        const trigger = this.getTriggerById(triggerId);\n        track(EVENT_INVOKE, functionsEmulatorShared_1.getFunctionService(trigger));\n      }\n\n      yield worker.waitForDone();\n      return res.json({\n        status: \"acknowledged\"\n      });\n    });\n  }\n\n  handleHttpsTrigger(req, res) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const method = req.method;\n      const triggerId = req.params.trigger_name;\n      logger.debug(`Accepted request ${method} ${req.url} --> ${triggerId}`);\n      const reqBody = req.rawBody;\n      const worker = this.startFunctionRuntime(triggerId, functionsEmulatorShared_1.EmulatedTriggerType.HTTPS);\n      worker.onLogs(el => {\n        if (el.level === \"FATAL\") {\n          res.status(500).send(el.text);\n        }\n      });\n      yield worker.waitForSocketReady();\n      track(EVENT_INVOKE, \"https\");\n      emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `[functions] Runtime ready! Sending request!`);\n\n      if (!worker.lastArgs) {\n        throw new error_1.FirebaseError(\"Cannot execute on a worker with no arguments\");\n      }\n\n      if (!worker.lastArgs.frb.socketPath) {\n        throw new error_1.FirebaseError(`Cannot execute on a worker without a socketPath: ${JSON.stringify(worker.lastArgs)}`);\n      }\n\n      const runtimeReq = http.request({\n        method,\n        path: req.url || \"/\",\n        headers: req.headers,\n        socketPath: worker.lastArgs.frb.socketPath\n      }, runtimeRes => {\n        function forwardStatusAndHeaders() {\n          res.status(runtimeRes.statusCode || 200);\n\n          if (!res.headersSent) {\n            Object.keys(runtimeRes.headers).forEach(key => {\n              const val = runtimeRes.headers[key];\n\n              if (val) {\n                res.setHeader(key, val);\n              }\n            });\n          }\n        }\n\n        runtimeRes.on(\"data\", buf => {\n          forwardStatusAndHeaders();\n          res.write(buf);\n        });\n        runtimeRes.on(\"close\", () => {\n          forwardStatusAndHeaders();\n          res.end();\n        });\n        runtimeRes.on(\"end\", () => {\n          forwardStatusAndHeaders();\n          res.end();\n        });\n      });\n      runtimeReq.on(\"error\", () => {\n        res.end();\n      });\n\n      if (reqBody) {\n        runtimeReq.write(reqBody);\n        runtimeReq.end();\n      }\n\n      req.pipe(runtimeReq, {\n        end: true\n      }).on(\"error\", () => {\n        res.end();\n      });\n      yield worker.waitForDone();\n    });\n  }\n\n  onData(runtime, emitter, buffer, buf) {\n    buffer.value += buf.toString();\n    const lines = buffer.value.split(\"\\n\");\n\n    if (lines.length > 1) {\n      lines.slice(0, -1).forEach(line => {\n        const log = types_1.EmulatorLog.fromJSON(line);\n        emitter.emit(\"log\", log);\n\n        if (log.level === \"FATAL\") {\n          emitter.emit(\"log\", new types_1.EmulatorLog(\"SYSTEM\", \"runtime-status\", \"killed\"));\n          runtime.kill();\n        }\n      });\n    }\n\n    buffer.value = lines[lines.length - 1];\n  }\n\n}\n\nexports.FunctionsEmulator = FunctionsEmulator;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/functionsEmulator.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","path","express","request","clc","http","logger","track","constants_1","types_1","chokidar","spawn","child_process_1","functionsEmulatorShared_1","registry_1","events_1","emulatorLogger_1","functionsRuntimeWorker_1","error_1","workQueue_1","EVENT_INVOKE","DATABASE_PATH_PATTERN","RegExp","FunctionsEmulator","constructor","args","nodeBinary","triggers","knownTriggerIDs","EmulatorLogger","verbosity","quiet","Verbosity","QUIET","DEBUG","mode","debugPort","FunctionsExecutionMode","SEQUENTIAL","AUTO","workerPool","RuntimeWorkerPool","workQueue","WorkQueue","getHttpFunctionUrl","host","port","projectId","name","region","createHubServer","start","hub","use","req","res","chunks","on","chunk","push","rawBody","Buffer","concat","get","json","status","backgroundFunctionRoute","httpsFunctionRoute","httpsFunctionRoutes","backgroundHandler","submit","handleBackgroundTrigger","httpsHandler","handleHttpsTrigger","post","all","startFunctionRuntime","triggerId","triggerType","proto","runtimeOpts","bundleTemplate","getBaseBundle","runtimeBundle","assign","ports","firestore","EmulatorRegistry","getPort","Emulators","FIRESTORE","database","DATABASE","pubsub","PUBSUB","opts","worker","invokeRuntime","askInstallNodeVersion","functionsDir","getInfo","server","listen","connect","logLabeled","watcher","watch","ignored","persistent","loadTriggers","refresh","triggerParseEvent","EmulatorLog","waitForLog","runtime","events","triggerDefinitions","data","toSetup","filter","definition","triggerResults","httpsTrigger","getFunctionRegion","url","type","details","service","getFunctionService","Constants","getServiceName","added","SERVICE_FIRESTORE","addFirestoreTrigger","SERVICE_REALTIME_DATABASE","addRealtimeDatabaseTrigger","SERVICE_PUBSUB","addPubsubTrigger","log","JSON","stringify","successTriggers","r","msg","bold","ignoreTriggers","debouncedLoadTriggers","debounce","filePath","stop","exit","close","databasePort","eventTrigger","exec","resource","length","bundle","event","eventType","topic","debug","setTriggersPath","DEFAULT_DATABASE_EMULATOR_NAMESPACE","auth","bearer","body","err","firestorePort","put","pubsubPort","pubsubEmulator","resourceParts","split","addTrigger","getProjectId","getDefaultHost","FUNCTIONS","getDefaultPort","getName","getTriggers","getTriggerById","trigger","FirebaseError","cwd","undefined","disabled_features","disabledRuntimeFeatures","pkg","join","engines","node","process","execPath","hostMajorVersion","versions","requestedMajorVersion","localMajorVersion","localNodePath","localNodeOutput","spawnSync","stdout","toString","slice","frb","readyForWork","submitWork","emitter","EventEmitter","__dirname","ignore_warnings","unshift","childProcess","env","stdio","buffers","stderr","pipe","ipcBuffer","message","onData","id","hasOwnProperty","buffer","buf","pid","shutdown","kill","signal","emit","send","addWorker","method","params","trigger_name","reqBody","parse","EmulatedTriggerType","BACKGROUND","onLogs","el","level","text","waitForDone","HTTPS","waitForSocketReady","lastArgs","socketPath","runtimeReq","headers","runtimeRes","forwardStatusAndHeaders","statusCode","headersSent","keys","forEach","key","val","setHeader","write","end","lines","line","fromJSON"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst path = require(\"path\");\nconst express = require(\"express\");\nconst request = require(\"request\");\nconst clc = require(\"cli-color\");\nconst http = require(\"http\");\nconst logger = require(\"../logger\");\nconst track = require(\"../track\");\nconst constants_1 = require(\"./constants\");\nconst types_1 = require(\"./types\");\nconst chokidar = require(\"chokidar\");\nconst spawn = require(\"cross-spawn\");\nconst child_process_1 = require(\"child_process\");\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\nconst registry_1 = require(\"./registry\");\nconst events_1 = require(\"events\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst functionsRuntimeWorker_1 = require(\"./functionsRuntimeWorker\");\nconst error_1 = require(\"../error\");\nconst workQueue_1 = require(\"./workQueue\");\nconst EVENT_INVOKE = \"functions:invoke\";\nconst DATABASE_PATH_PATTERN = new RegExp(\"^projects/[^/]+/instances/[^/]+/refs(/.*)$\");\nclass FunctionsEmulator {\n    constructor(args) {\n        this.args = args;\n        this.nodeBinary = \"\";\n        this.triggers = [];\n        this.knownTriggerIDs = {};\n        emulatorLogger_1.EmulatorLogger.verbosity = this.args.quiet ? emulatorLogger_1.Verbosity.QUIET : emulatorLogger_1.Verbosity.DEBUG;\n        const mode = this.args.debugPort\n            ? types_1.FunctionsExecutionMode.SEQUENTIAL\n            : types_1.FunctionsExecutionMode.AUTO;\n        this.workerPool = new functionsRuntimeWorker_1.RuntimeWorkerPool(mode);\n        this.workQueue = new workQueue_1.WorkQueue(mode);\n    }\n    static getHttpFunctionUrl(host, port, projectId, name, region) {\n        return `http://${host}:${port}/${projectId}/${region}/${name}`;\n    }\n    createHubServer() {\n        this.workQueue.start();\n        const hub = express();\n        hub.use((req, res, next) => {\n            const chunks = [];\n            req.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            req.on(\"end\", () => {\n                req.rawBody = Buffer.concat(chunks);\n                next();\n            });\n        });\n        hub.get(\"/\", (req, res) => __awaiter(this, void 0, void 0, function* () {\n            res.json({ status: \"alive\" });\n        }));\n        const backgroundFunctionRoute = `/functions/projects/${this.args.projectId}/triggers/:trigger_name`;\n        const httpsFunctionRoute = `/${this.args.projectId}/:region/:trigger_name`;\n        const httpsFunctionRoutes = [httpsFunctionRoute, `${httpsFunctionRoute}/*`];\n        const backgroundHandler = (req, res) => __awaiter(this, void 0, void 0, function* () {\n            this.workQueue.submit(() => {\n                return this.handleBackgroundTrigger(req, res);\n            });\n        });\n        const httpsHandler = (req, res) => __awaiter(this, void 0, void 0, function* () {\n            this.workQueue.submit(() => {\n                return this.handleHttpsTrigger(req, res);\n            });\n        });\n        hub.post(backgroundFunctionRoute, backgroundHandler);\n        hub.all(httpsFunctionRoutes, httpsHandler);\n        return hub;\n    }\n    startFunctionRuntime(triggerId, triggerType, proto, runtimeOpts) {\n        const bundleTemplate = this.getBaseBundle();\n        const runtimeBundle = Object.assign({}, bundleTemplate, { ports: {\n                firestore: registry_1.EmulatorRegistry.getPort(types_1.Emulators.FIRESTORE),\n                database: registry_1.EmulatorRegistry.getPort(types_1.Emulators.DATABASE),\n                pubsub: registry_1.EmulatorRegistry.getPort(types_1.Emulators.PUBSUB),\n            }, proto,\n            triggerId,\n            triggerType });\n        const opts = runtimeOpts || { nodeBinary: this.nodeBinary };\n        const worker = this.invokeRuntime(runtimeBundle, opts);\n        return worker;\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.nodeBinary = yield this.askInstallNodeVersion(this.args.functionsDir);\n            const { host, port } = this.getInfo();\n            this.workQueue.start();\n            this.server = this.createHubServer().listen(port, host);\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            emulatorLogger_1.EmulatorLogger.logLabeled(\"BULLET\", \"functions\", `Watching \"${this.args.functionsDir}\" for Cloud Functions...`);\n            const watcher = chokidar.watch(this.args.functionsDir, {\n                ignored: [\n                    /.+?[\\\\\\/]node_modules[\\\\\\/].+?/,\n                    /(^|[\\/\\\\])\\../,\n                    /.+\\.log/,\n                ],\n                persistent: true,\n            });\n            const loadTriggers = () => __awaiter(this, void 0, void 0, function* () {\n                this.workerPool.refresh();\n                const worker = this.invokeRuntime(this.getBaseBundle(), {\n                    nodeBinary: this.nodeBinary,\n                });\n                const triggerParseEvent = yield types_1.EmulatorLog.waitForLog(worker.runtime.events, \"SYSTEM\", \"triggers-parsed\");\n                const triggerDefinitions = triggerParseEvent.data\n                    .triggerDefinitions;\n                const toSetup = triggerDefinitions.filter((definition) => !this.knownTriggerIDs[definition.name]);\n                this.triggers = triggerDefinitions;\n                const triggerResults = [];\n                for (const definition of toSetup) {\n                    if (definition.httpsTrigger) {\n                        const region = functionsEmulatorShared_1.getFunctionRegion(definition);\n                        const { host, port } = this.getInfo();\n                        const url = FunctionsEmulator.getHttpFunctionUrl(host, port, this.args.projectId, definition.name, region);\n                        triggerResults.push({\n                            name: definition.name,\n                            type: \"http\",\n                            details: url,\n                        });\n                    }\n                    else {\n                        const service = functionsEmulatorShared_1.getFunctionService(definition);\n                        const result = {\n                            name: definition.name,\n                            type: constants_1.Constants.getServiceName(service),\n                        };\n                        let added = false;\n                        switch (service) {\n                            case constants_1.Constants.SERVICE_FIRESTORE:\n                                added = yield this.addFirestoreTrigger(this.args.projectId, definition);\n                                break;\n                            case constants_1.Constants.SERVICE_REALTIME_DATABASE:\n                                added = yield this.addRealtimeDatabaseTrigger(this.args.projectId, definition);\n                                break;\n                            case constants_1.Constants.SERVICE_PUBSUB:\n                                added = yield this.addPubsubTrigger(this.args.projectId, definition);\n                                break;\n                            default:\n                                emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `Unsupported trigger: ${JSON.stringify(definition)}`);\n                                break;\n                        }\n                        result.ignored = !added;\n                        triggerResults.push(result);\n                    }\n                    this.knownTriggerIDs[definition.name] = true;\n                }\n                const successTriggers = triggerResults.filter((r) => !r.ignored);\n                for (const result of successTriggers) {\n                    const msg = result.details\n                        ? `${clc.bold(result.type)} function initialized (${result.details}).`\n                        : `${clc.bold(result.type)} function initialized.`;\n                    emulatorLogger_1.EmulatorLogger.logLabeled(\"SUCCESS\", `functions[${result.name}]`, msg);\n                }\n                const ignoreTriggers = triggerResults.filter((r) => r.ignored);\n                for (const result of ignoreTriggers) {\n                    const msg = `function ignored because the ${result.type} emulator does not exist or is not running.`;\n                    emulatorLogger_1.EmulatorLogger.logLabeled(\"BULLET\", `functions[${result.name}]`, msg);\n                }\n            });\n            const debouncedLoadTriggers = _.debounce(loadTriggers, 1000);\n            watcher.on(\"change\", (filePath) => {\n                emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `File ${filePath} changed, reloading triggers`);\n                return debouncedLoadTriggers();\n            });\n            return loadTriggers();\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.workQueue.stop();\n            this.workerPool.exit();\n            Promise.resolve(this.server && this.server.close());\n        });\n    }\n    addRealtimeDatabaseTrigger(projectId, definition) {\n        const databasePort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.DATABASE);\n        if (!databasePort) {\n            return Promise.resolve(false);\n        }\n        if (!definition.eventTrigger) {\n            emulatorLogger_1.EmulatorLogger.log(\"WARN\", `Event trigger \"${definition.name}\" has undefined \"eventTrigger\" member`);\n            return Promise.reject();\n        }\n        const result = DATABASE_PATH_PATTERN.exec(definition.eventTrigger.resource);\n        if (result === null || result.length !== 2) {\n            emulatorLogger_1.EmulatorLogger.log(\"WARN\", `Event trigger \"${definition.name}\" has malformed \"resource\" member. ` +\n                `${definition.eventTrigger.resource}`);\n            return Promise.reject();\n        }\n        const bundle = JSON.stringify({\n            name: `projects/${projectId}/locations/_/functions/${definition.name}`,\n            path: result[1],\n            event: definition.eventTrigger.eventType,\n            topic: `projects/${projectId}/topics/${definition.name}`,\n        });\n        logger.debug(`addDatabaseTrigger`, JSON.stringify(bundle));\n        return new Promise((resolve, reject) => {\n            let setTriggersPath = `http://localhost:${databasePort}/.settings/functionTriggers.json`;\n            if (projectId !== \"\") {\n                setTriggersPath += `?ns=${projectId}`;\n            }\n            else {\n                emulatorLogger_1.EmulatorLogger.log(\"WARN\", `No project in use. Registering function trigger for sentinel namespace '${constants_1.Constants.DEFAULT_DATABASE_EMULATOR_NAMESPACE}'`);\n            }\n            request.post(setTriggersPath, {\n                auth: {\n                    bearer: \"owner\",\n                },\n                body: bundle,\n            }, (err, res, body) => {\n                if (err) {\n                    emulatorLogger_1.EmulatorLogger.log(\"WARN\", \"Error adding trigger: \" + err);\n                    reject();\n                    return;\n                }\n                resolve(true);\n            });\n        });\n    }\n    addFirestoreTrigger(projectId, definition) {\n        const firestorePort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.FIRESTORE);\n        if (!firestorePort) {\n            return Promise.resolve(false);\n        }\n        const bundle = JSON.stringify({ eventTrigger: definition.eventTrigger });\n        logger.debug(`addFirestoreTrigger`, JSON.stringify(bundle));\n        return new Promise((resolve, reject) => {\n            request.put(`http://localhost:${firestorePort}/emulator/v1/projects/${projectId}/triggers/${definition.name}`, {\n                body: bundle,\n            }, (err, res, body) => {\n                if (err) {\n                    emulatorLogger_1.EmulatorLogger.log(\"WARN\", \"Error adding trigger: \" + err);\n                    reject();\n                    return;\n                }\n                resolve(true);\n            });\n        });\n    }\n    addPubsubTrigger(projectId, definition) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pubsubPort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.PUBSUB);\n            if (!pubsubPort) {\n                return false;\n            }\n            if (!definition.eventTrigger) {\n                return false;\n            }\n            const pubsubEmulator = registry_1.EmulatorRegistry.get(types_1.Emulators.PUBSUB);\n            logger.debug(`addPubsubTrigger`, JSON.stringify({ eventTrigger: definition.eventTrigger }));\n            const resource = definition.eventTrigger.resource;\n            const resourceParts = resource.split(\"/\");\n            const topic = resourceParts[resourceParts.length - 1];\n            try {\n                yield pubsubEmulator.addTrigger(topic, definition.name);\n                return true;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n    }\n    getProjectId() {\n        return this.args.projectId;\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.FUNCTIONS);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.FUNCTIONS);\n        return {\n            host,\n            port,\n        };\n    }\n    getName() {\n        return types_1.Emulators.FUNCTIONS;\n    }\n    getTriggers() {\n        return this.triggers;\n    }\n    getTriggerById(triggerId) {\n        for (const trigger of this.triggers) {\n            if (trigger.name === triggerId) {\n                return trigger;\n            }\n        }\n        throw new error_1.FirebaseError(`No trigger with name ${triggerId}`);\n    }\n    getBaseBundle() {\n        return {\n            cwd: this.args.functionsDir,\n            projectId: this.args.projectId,\n            triggerId: \"\",\n            triggerType: undefined,\n            ports: {\n                firestore: registry_1.EmulatorRegistry.getPort(types_1.Emulators.FIRESTORE),\n                database: registry_1.EmulatorRegistry.getPort(types_1.Emulators.DATABASE),\n                pubsub: registry_1.EmulatorRegistry.getPort(types_1.Emulators.PUBSUB),\n            },\n            disabled_features: this.args.disabledRuntimeFeatures,\n        };\n    }\n    askInstallNodeVersion(cwd) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pkg = require(path.join(cwd, \"package.json\"));\n            if (!pkg.engines || !pkg.engines.node) {\n                emulatorLogger_1.EmulatorLogger.log(\"WARN\", \"Your functions directory does not specify a Node version.\\n   \" +\n                    \"- Learn more at https://firebase.google.com/docs/functions/manage-functions#set_runtime_options\");\n                return process.execPath;\n            }\n            const hostMajorVersion = process.versions.node.split(\".\")[0];\n            const requestedMajorVersion = pkg.engines.node;\n            let localMajorVersion = \"0\";\n            const localNodePath = path.join(cwd, \"node_modules/.bin/node\");\n            try {\n                const localNodeOutput = child_process_1.spawnSync(localNodePath, [\"--version\"]).stdout.toString();\n                localMajorVersion = localNodeOutput.slice(1).split(\".\")[0];\n            }\n            catch (err) {\n            }\n            if (requestedMajorVersion === hostMajorVersion) {\n                emulatorLogger_1.EmulatorLogger.logLabeled(\"SUCCESS\", \"functions\", `Using node@${requestedMajorVersion} from host.`);\n                return process.execPath;\n            }\n            if (localMajorVersion === requestedMajorVersion) {\n                emulatorLogger_1.EmulatorLogger.logLabeled(\"SUCCESS\", \"functions\", `Using node@${requestedMajorVersion} from local cache.`);\n                return localNodePath;\n            }\n            emulatorLogger_1.EmulatorLogger.log(\"WARN\", `Your requested \"node\" version \"${requestedMajorVersion}\" doesn't match your global version \"${hostMajorVersion}\"`);\n            return process.execPath;\n        });\n    }\n    invokeRuntime(frb, opts) {\n        if (this.workerPool.readyForWork(frb.triggerId)) {\n            return this.workerPool.submitWork(frb.triggerId, frb, opts);\n        }\n        const emitter = new events_1.EventEmitter();\n        const args = [path.join(__dirname, \"functionsEmulatorRuntime\")];\n        if (opts.ignore_warnings) {\n            args.unshift(\"--no-warnings\");\n        }\n        if (this.args.debugPort) {\n            const { host } = this.getInfo();\n            args.unshift(`--inspect=${host}:${this.args.debugPort}`);\n        }\n        const childProcess = spawn(opts.nodeBinary, args, {\n            env: Object.assign({ node: opts.nodeBinary }, opts.env, process.env),\n            cwd: frb.cwd,\n            stdio: [\"pipe\", \"pipe\", \"pipe\", \"ipc\"],\n        });\n        const buffers = {\n            stderr: { pipe: childProcess.stderr, value: \"\" },\n            stdout: { pipe: childProcess.stdout, value: \"\" },\n        };\n        const ipcBuffer = { value: \"\" };\n        childProcess.on(\"message\", (message) => {\n            this.onData(childProcess, emitter, ipcBuffer, message);\n        });\n        for (const id in buffers) {\n            if (buffers.hasOwnProperty(id)) {\n                const buffer = buffers[id];\n                buffer.pipe.on(\"data\", (buf) => {\n                    this.onData(childProcess, emitter, buffer, buf);\n                });\n            }\n        }\n        const runtime = {\n            pid: childProcess.pid,\n            exit: new Promise((resolve) => {\n                childProcess.on(\"exit\", resolve);\n            }),\n            events: emitter,\n            shutdown: () => {\n                childProcess.kill();\n            },\n            kill: (signal) => {\n                childProcess.kill(signal);\n                emitter.emit(\"log\", new types_1.EmulatorLog(\"SYSTEM\", \"runtime-status\", \"killed\"));\n            },\n            send: (args) => {\n                return childProcess.send(JSON.stringify(args));\n            },\n        };\n        this.workerPool.addWorker(frb.triggerId, runtime);\n        return this.workerPool.submitWork(frb.triggerId, frb, opts);\n    }\n    handleBackgroundTrigger(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const method = req.method;\n            const triggerId = req.params.trigger_name;\n            emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `Accepted request ${method} ${req.url} --> ${triggerId}`);\n            const reqBody = req.rawBody;\n            const proto = JSON.parse(reqBody.toString());\n            const worker = this.startFunctionRuntime(triggerId, functionsEmulatorShared_1.EmulatedTriggerType.BACKGROUND, proto);\n            worker.onLogs((el) => {\n                if (el.level === \"FATAL\") {\n                    res.status(500).send(el.text);\n                }\n            });\n            if (triggerId) {\n                const trigger = this.getTriggerById(triggerId);\n                track(EVENT_INVOKE, functionsEmulatorShared_1.getFunctionService(trigger));\n            }\n            yield worker.waitForDone();\n            return res.json({ status: \"acknowledged\" });\n        });\n    }\n    handleHttpsTrigger(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const method = req.method;\n            const triggerId = req.params.trigger_name;\n            logger.debug(`Accepted request ${method} ${req.url} --> ${triggerId}`);\n            const reqBody = req.rawBody;\n            const worker = this.startFunctionRuntime(triggerId, functionsEmulatorShared_1.EmulatedTriggerType.HTTPS);\n            worker.onLogs((el) => {\n                if (el.level === \"FATAL\") {\n                    res.status(500).send(el.text);\n                }\n            });\n            yield worker.waitForSocketReady();\n            track(EVENT_INVOKE, \"https\");\n            emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `[functions] Runtime ready! Sending request!`);\n            if (!worker.lastArgs) {\n                throw new error_1.FirebaseError(\"Cannot execute on a worker with no arguments\");\n            }\n            if (!worker.lastArgs.frb.socketPath) {\n                throw new error_1.FirebaseError(`Cannot execute on a worker without a socketPath: ${JSON.stringify(worker.lastArgs)}`);\n            }\n            const runtimeReq = http.request({\n                method,\n                path: req.url || \"/\",\n                headers: req.headers,\n                socketPath: worker.lastArgs.frb.socketPath,\n            }, (runtimeRes) => {\n                function forwardStatusAndHeaders() {\n                    res.status(runtimeRes.statusCode || 200);\n                    if (!res.headersSent) {\n                        Object.keys(runtimeRes.headers).forEach((key) => {\n                            const val = runtimeRes.headers[key];\n                            if (val) {\n                                res.setHeader(key, val);\n                            }\n                        });\n                    }\n                }\n                runtimeRes.on(\"data\", (buf) => {\n                    forwardStatusAndHeaders();\n                    res.write(buf);\n                });\n                runtimeRes.on(\"close\", () => {\n                    forwardStatusAndHeaders();\n                    res.end();\n                });\n                runtimeRes.on(\"end\", () => {\n                    forwardStatusAndHeaders();\n                    res.end();\n                });\n            });\n            runtimeReq.on(\"error\", () => {\n                res.end();\n            });\n            if (reqBody) {\n                runtimeReq.write(reqBody);\n                runtimeReq.end();\n            }\n            req\n                .pipe(runtimeReq, { end: true })\n                .on(\"error\", () => {\n                res.end();\n            });\n            yield worker.waitForDone();\n        });\n    }\n    onData(runtime, emitter, buffer, buf) {\n        buffer.value += buf.toString();\n        const lines = buffer.value.split(\"\\n\");\n        if (lines.length > 1) {\n            lines.slice(0, -1).forEach((line) => {\n                const log = types_1.EmulatorLog.fromJSON(line);\n                emitter.emit(\"log\", log);\n                if (log.level === \"FATAL\") {\n                    emitter.emit(\"log\", new types_1.EmulatorLog(\"SYSTEM\", \"runtime-status\", \"killed\"));\n                    runtime.kill();\n                }\n            });\n        }\n        buffer.value = lines[lines.length - 1];\n    }\n}\nexports.FunctionsEmulator = FunctionsEmulator;\n"]},"metadata":{},"sourceType":"script"}