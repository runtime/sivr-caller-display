{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"./error\"),\n    FirebaseError = _require.FirebaseError;\n\nvar fork = require(\"child_process\").fork;\n\nvar path = require(\"path\");\n\nvar _ = require(\"lodash\");\n\nvar TRIGGER_PARSER = path.resolve(__dirname, \"./triggerParser.js\");\n\nmodule.exports = function (projectId, sourceDir, configValues, firebaseConfig) {\n  return new Promise(function (resolve, reject) {\n    var env = _.cloneDeep(process.env);\n\n    env.GCLOUD_PROJECT = projectId;\n\n    if (!_.isEmpty(configValues)) {\n      env.CLOUD_RUNTIME_CONFIG = JSON.stringify(configValues);\n\n      if (configValues.firebase) {\n        env.FIREBASE_CONFIG = JSON.stringify(configValues.firebase);\n      }\n    }\n\n    if (firebaseConfig) {\n      env.FIREBASE_PROJECT = firebaseConfig;\n      env.FIREBASE_CONFIG = firebaseConfig;\n    }\n\n    var parser = fork(TRIGGER_PARSER, [sourceDir], {\n      silent: true,\n      env: env\n    });\n    parser.on(\"message\", function (message) {\n      if (message.triggers) {\n        resolve(message.triggers);\n      } else if (message.error) {\n        reject(new FirebaseError(message.error, {\n          exit: 1\n        }));\n      }\n    });\n    parser.on(\"exit\", function (code) {\n      if (code !== 0) {\n        reject(new FirebaseError(\"There was an unknown problem while trying to parse function triggers. \" + \"Please ensure you are using Node.js v6 or greater.\", {\n          exit: 2\n        }));\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/parseTriggers.js"],"names":["require","FirebaseError","fork","path","_","TRIGGER_PARSER","resolve","__dirname","module","exports","projectId","sourceDir","configValues","firebaseConfig","Promise","reject","env","cloneDeep","process","GCLOUD_PROJECT","isEmpty","CLOUD_RUNTIME_CONFIG","JSON","stringify","firebase","FIREBASE_CONFIG","FIREBASE_PROJECT","parser","silent","on","message","triggers","error","exit","code"],"mappings":"AAAA;;eACwBA,OAAO,CAAC,SAAD,C;IAAzBC,a,YAAAA,a;;AACN,IAAIC,IAAI,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBE,IAApC;;AACA,IAAIC,IAAI,GAAGH,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAII,CAAC,GAAGJ,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIK,cAAc,GAAGF,IAAI,CAACG,OAAL,CAAaC,SAAb,EAAwB,oBAAxB,CAArB;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,SAAV,EAAqBC,SAArB,EAAgCC,YAAhC,EAA8CC,cAA9C,EAA8D;AAC3E,SAAO,IAAIC,OAAJ,CAAY,UAAUR,OAAV,EAAmBS,MAAnB,EAA2B;AAC1C,QAAIC,GAAG,GAAGZ,CAAC,CAACa,SAAF,CAAYC,OAAO,CAACF,GAApB,CAAV;;AACAA,IAAAA,GAAG,CAACG,cAAJ,GAAqBT,SAArB;;AACA,QAAI,CAACN,CAAC,CAACgB,OAAF,CAAUR,YAAV,CAAL,EAA8B;AAC1BI,MAAAA,GAAG,CAACK,oBAAJ,GAA2BC,IAAI,CAACC,SAAL,CAAeX,YAAf,CAA3B;;AACA,UAAIA,YAAY,CAACY,QAAjB,EAA2B;AACvBR,QAAAA,GAAG,CAACS,eAAJ,GAAsBH,IAAI,CAACC,SAAL,CAAeX,YAAY,CAACY,QAA5B,CAAtB;AACH;AACJ;;AACD,QAAIX,cAAJ,EAAoB;AAChBG,MAAAA,GAAG,CAACU,gBAAJ,GAAuBb,cAAvB;AACAG,MAAAA,GAAG,CAACS,eAAJ,GAAsBZ,cAAtB;AACH;;AACD,QAAIc,MAAM,GAAGzB,IAAI,CAACG,cAAD,EAAiB,CAACM,SAAD,CAAjB,EAA8B;AAAEiB,MAAAA,MAAM,EAAE,IAAV;AAAgBZ,MAAAA,GAAG,EAAEA;AAArB,KAA9B,CAAjB;AACAW,IAAAA,MAAM,CAACE,EAAP,CAAU,SAAV,EAAqB,UAAUC,OAAV,EAAmB;AACpC,UAAIA,OAAO,CAACC,QAAZ,EAAsB;AAClBzB,QAAAA,OAAO,CAACwB,OAAO,CAACC,QAAT,CAAP;AACH,OAFD,MAGK,IAAID,OAAO,CAACE,KAAZ,EAAmB;AACpBjB,QAAAA,MAAM,CAAC,IAAId,aAAJ,CAAkB6B,OAAO,CAACE,KAA1B,EAAiC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAjC,CAAD,CAAN;AACH;AACJ,KAPD;AAQAN,IAAAA,MAAM,CAACE,EAAP,CAAU,MAAV,EAAkB,UAAUK,IAAV,EAAgB;AAC9B,UAAIA,IAAI,KAAK,CAAb,EAAgB;AACZnB,QAAAA,MAAM,CAAC,IAAId,aAAJ,CAAkB,2EACrB,oDADG,EACmD;AAAEgC,UAAAA,IAAI,EAAE;AAAR,SADnD,CAAD,CAAN;AAEH;AACJ,KALD;AAMH,GA5BM,CAAP;AA6BH,CA9BD","sourcesContent":["\"use strict\";\nvar { FirebaseError } = require(\"./error\");\nvar fork = require(\"child_process\").fork;\nvar path = require(\"path\");\nvar _ = require(\"lodash\");\nvar TRIGGER_PARSER = path.resolve(__dirname, \"./triggerParser.js\");\nmodule.exports = function (projectId, sourceDir, configValues, firebaseConfig) {\n    return new Promise(function (resolve, reject) {\n        var env = _.cloneDeep(process.env);\n        env.GCLOUD_PROJECT = projectId;\n        if (!_.isEmpty(configValues)) {\n            env.CLOUD_RUNTIME_CONFIG = JSON.stringify(configValues);\n            if (configValues.firebase) {\n                env.FIREBASE_CONFIG = JSON.stringify(configValues.firebase);\n            }\n        }\n        if (firebaseConfig) {\n            env.FIREBASE_PROJECT = firebaseConfig;\n            env.FIREBASE_CONFIG = firebaseConfig;\n        }\n        var parser = fork(TRIGGER_PARSER, [sourceDir], { silent: true, env: env });\n        parser.on(\"message\", function (message) {\n            if (message.triggers) {\n                resolve(message.triggers);\n            }\n            else if (message.error) {\n                reject(new FirebaseError(message.error, { exit: 1 }));\n            }\n        });\n        parser.on(\"exit\", function (code) {\n            if (code !== 0) {\n                reject(new FirebaseError(\"There was an unknown problem while trying to parse function triggers. \" +\n                    \"Please ensure you are using Node.js v6 or greater.\", { exit: 2 }));\n            }\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"script"}