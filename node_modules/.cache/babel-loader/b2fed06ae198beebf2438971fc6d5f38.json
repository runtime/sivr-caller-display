{"ast":null,"code":"var events = require('events'),\n    util = require('util'),\n    common = require('../common'),\n    Transport = require('./transport').Transport; //\n// ### function Memory (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Memory transport object responsible\n// for persisting log messages and metadata to a memory array of messages.\n//\n\n\nvar Memory = exports.Memory = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n  this.errorOutput = [];\n  this.writeOutput = [];\n  this.json = options.json || false;\n  this.colorize = options.colorize || false;\n  this.prettyPrint = options.prettyPrint || false;\n  this.timestamp = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\n  this.showLevel = options.showLevel === undefined ? true : options.showLevel;\n  this.label = options.label || null;\n  this.depth = options.depth || null;\n\n  if (this.json) {\n    this.stringify = options.stringify || function (obj) {\n      return JSON.stringify(obj, null, 2);\n    };\n  }\n}; //\n// Inherit from `winston.Transport`.\n//\n\n\nutil.inherits(Memory, Transport); //\n// Expose the name of this Transport on the prototype\n//\n\nMemory.prototype.name = 'memory'; //\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\n\nMemory.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n\n  var self = this,\n      output;\n  output = common.log({\n    colorize: this.colorize,\n    json: this.json,\n    level: level,\n    message: msg,\n    meta: meta,\n    stringify: this.stringify,\n    timestamp: this.timestamp,\n    prettyPrint: this.prettyPrint,\n    raw: this.raw,\n    label: this.label,\n    depth: this.depth,\n    formatter: this.formatter,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  });\n\n  if (level === 'error' || level === 'debug') {\n    this.errorOutput.push(output);\n  } else {\n    this.writeOutput.push(output);\n  }\n\n  self.emit('logged');\n  callback(null, true);\n};\n\nMemory.prototype.clearLogs = function () {\n  this.errorOutput = [];\n  this.writeOutput = [];\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/winston/lib/winston/transports/memory.js"],"names":["events","require","util","common","Transport","Memory","exports","options","call","errorOutput","writeOutput","json","colorize","prettyPrint","timestamp","showLevel","undefined","label","depth","stringify","obj","JSON","inherits","prototype","name","log","level","msg","meta","callback","silent","self","output","message","raw","formatter","humanReadableUnhandledException","push","emit","clearLogs"],"mappings":"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","sourcesContent":["var events = require('events'),\n    util = require('util'),\n    common = require('../common'),\n    Transport = require('./transport').Transport;\n\n//\n// ### function Memory (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Memory transport object responsible\n// for persisting log messages and metadata to a memory array of messages.\n//\nvar Memory = exports.Memory = function (options) {\n  Transport.call(this, options);\n  options = options || {};\n\n  this.errorOutput = [];\n  this.writeOutput = [];\n\n  this.json        = options.json        || false;\n  this.colorize    = options.colorize    || false;\n  this.prettyPrint = options.prettyPrint || false;\n  this.timestamp   = typeof options.timestamp !== 'undefined' ? options.timestamp : false;\n  this.showLevel   = options.showLevel === undefined ? true : options.showLevel;\n  this.label       = options.label       || null;\n  this.depth       = options.depth       || null;\n\n  if (this.json) {\n    this.stringify = options.stringify || function (obj) {\n      return JSON.stringify(obj, null, 2);\n    };\n  }\n};\n\n//\n// Inherit from `winston.Transport`.\n//\nutil.inherits(Memory, Transport);\n\n//\n// Expose the name of this Transport on the prototype\n//\nMemory.prototype.name = 'memory';\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nMemory.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n\n  var self = this,\n      output;\n\n  output = common.log({\n    colorize:    this.colorize,\n    json:        this.json,\n    level:       level,\n    message:     msg,\n    meta:        meta,\n    stringify:   this.stringify,\n    timestamp:   this.timestamp,\n    prettyPrint: this.prettyPrint,\n    raw:         this.raw,\n    label:       this.label,\n    depth:       this.depth,\n    formatter:   this.formatter,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  });\n\n  if (level === 'error' || level === 'debug') {\n    this.errorOutput.push(output);\n  } else {\n    this.writeOutput.push(output);\n  }\n\n  self.emit('logged');\n  callback(null, true);\n};\n\nMemory.prototype.clearLogs = function () {\n  this.errorOutput = [];\n  this.writeOutput = [];\n};\n"]},"metadata":{},"sourceType":"script"}