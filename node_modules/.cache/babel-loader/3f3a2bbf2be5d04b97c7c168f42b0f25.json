{"ast":null,"code":"/*\n * container.js: Inversion of control container for winston logger instances\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\nvar common = require('./common'),\n    winston = require('../winston'),\n    extend = require('util')._extend; //\n// ### function Container (options)\n// #### @options {Object} Default pass-thru options for Loggers\n// Constructor function for the Container object responsible for managing\n// a set of `winston.Logger` instances based on string ids.\n//\n\n\nvar Container = exports.Container = function (options) {\n  this.loggers = {};\n  this.options = options || {};\n  this.default = {\n    transports: [new winston.transports.Console({\n      level: 'silly',\n      colorize: false\n    })]\n  };\n}; //\n// ### function get / add (id, options)\n// #### @id {string} Id of the Logger to get\n// #### @options {Object} **Optional** Options for the Logger instance\n// Retreives a `winston.Logger` instance for the specified `id`. If\n// an instance does not exist, one is created.\n//\n\n\nContainer.prototype.get = Container.prototype.add = function (id, options) {\n  var self = this,\n      existing;\n\n  if (!this.loggers[id]) {\n    //\n    // Remark: Simple shallow clone for configuration options in case we pass in\n    // instantiated protoypal objects\n    //\n    options = extend({}, options || this.options || this.default);\n    existing = options.transports || this.options.transports; //\n    // Remark: Make sure if we have an array of transports we slice it to make copies\n    // of those references.\n    //\n\n    options.transports = existing ? existing.slice() : [];\n\n    if (options.transports.length === 0 && (!options || !options['console'])) {\n      options.transports.push(this.default.transports[0]);\n    }\n\n    Object.keys(options).forEach(function (key) {\n      if (key === 'transports') {\n        return;\n      }\n\n      var name = common.capitalize(key);\n\n      if (!winston.transports[name]) {\n        throw new Error('Cannot add unknown transport: ' + name);\n      }\n\n      var namedOptions = options[key];\n      namedOptions.id = id;\n      options.transports.push(new winston.transports[name](namedOptions));\n    });\n    this.loggers[id] = new winston.Logger(options);\n    this.loggers[id].on('close', function () {\n      self._delete(id);\n    });\n  }\n\n  return this.loggers[id];\n}; //\n// ### function close (id)\n// #### @id {string} **Optional** Id of the Logger instance to find\n// Returns a boolean value indicating if this instance\n// has a logger with the specified `id`.\n//\n\n\nContainer.prototype.has = function (id) {\n  return !!this.loggers[id];\n}; //\n// ### function close (id)\n// #### @id {string} **Optional** Id of the Logger instance to close\n// Closes a `Logger` instance with the specified `id` if it exists.\n// If no `id` is supplied then all Loggers are closed.\n//\n\n\nContainer.prototype.close = function (id) {\n  var self = this;\n\n  function _close(id) {\n    if (!self.loggers[id]) {\n      return;\n    }\n\n    self.loggers[id].close();\n\n    self._delete(id);\n  }\n\n  return id ? _close(id) : Object.keys(this.loggers).forEach(function (id) {\n    _close(id);\n  });\n}; //\n// ### @private function _delete (id)\n// #### @id {string} Id of the Logger instance to delete from container\n// Deletes a `Logger` instance with the specified `id`.\n//\n\n\nContainer.prototype._delete = function (id) {\n  delete this.loggers[id];\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/winston/lib/winston/container.js"],"names":["common","require","winston","extend","_extend","Container","exports","options","loggers","default","transports","Console","level","colorize","prototype","get","add","id","self","existing","slice","length","push","Object","keys","forEach","key","name","capitalize","Error","namedOptions","Logger","on","_delete","has","close","_close"],"mappings":"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","sourcesContent":["/*\n * container.js: Inversion of control container for winston logger instances\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\n\nvar common = require('./common'),\n    winston = require('../winston'),\n    extend = require('util')._extend;\n\n//\n// ### function Container (options)\n// #### @options {Object} Default pass-thru options for Loggers\n// Constructor function for the Container object responsible for managing\n// a set of `winston.Logger` instances based on string ids.\n//\nvar Container = exports.Container = function (options) {\n  this.loggers = {};\n  this.options = options || {};\n  this.default = {\n    transports: [\n      new winston.transports.Console({\n        level: 'silly',\n        colorize: false\n      })\n    ]\n  }\n};\n\n//\n// ### function get / add (id, options)\n// #### @id {string} Id of the Logger to get\n// #### @options {Object} **Optional** Options for the Logger instance\n// Retreives a `winston.Logger` instance for the specified `id`. If\n// an instance does not exist, one is created.\n//\nContainer.prototype.get = Container.prototype.add = function (id, options) {\n  var self = this,\n      existing;\n\n  if (!this.loggers[id]) {\n    //\n    // Remark: Simple shallow clone for configuration options in case we pass in\n    // instantiated protoypal objects\n    //\n    options = extend({}, options || this.options || this.default);\n    existing = options.transports || this.options.transports;\n    //\n    // Remark: Make sure if we have an array of transports we slice it to make copies\n    // of those references.\n    //\n    options.transports = existing ? existing.slice() : [];\n\n    if (options.transports.length === 0 && (!options || !options['console'])) {\n      options.transports.push(this.default.transports[0]);\n    }\n\n    Object.keys(options).forEach(function (key) {\n      if (key === 'transports') {\n        return;\n      }\n\n      var name = common.capitalize(key);\n\n      if (!winston.transports[name]) {\n        throw new Error('Cannot add unknown transport: ' + name);\n      }\n\n      var namedOptions = options[key];\n      namedOptions.id = id;\n      options.transports.push(new (winston.transports[name])(namedOptions));\n    });\n\n    this.loggers[id] = new winston.Logger(options);\n\n    this.loggers[id].on('close', function () {\n        self._delete(id);\n    });\n  }\n\n  return this.loggers[id];\n};\n\n//\n// ### function close (id)\n// #### @id {string} **Optional** Id of the Logger instance to find\n// Returns a boolean value indicating if this instance\n// has a logger with the specified `id`.\n//\nContainer.prototype.has = function (id) {\n  return !!this.loggers[id];\n};\n\n//\n// ### function close (id)\n// #### @id {string} **Optional** Id of the Logger instance to close\n// Closes a `Logger` instance with the specified `id` if it exists.\n// If no `id` is supplied then all Loggers are closed.\n//\nContainer.prototype.close = function (id) {\n  var self = this;\n\n  function _close (id) {\n    if (!self.loggers[id]) {\n      return;\n    }\n\n    self.loggers[id].close();\n    self._delete(id);\n  }\n\n  return id ? _close(id) : Object.keys(this.loggers).forEach(function (id) {\n    _close(id);\n  });\n};\n\n//\n// ### @private function _delete (id)\n// #### @id {string} Id of the Logger instance to delete from container\n// Deletes a `Logger` instance with the specified `id`.\n//\nContainer.prototype._delete = function (id) {\n    delete this.loggers[id];\n}\n\n"]},"metadata":{},"sourceType":"script"}