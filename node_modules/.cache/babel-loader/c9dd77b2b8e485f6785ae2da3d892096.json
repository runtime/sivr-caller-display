{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst request = require(\"request\");\n\nconst utils = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst logger = require(\"../logger\");\n\nconst api = require(\"../api\");\n\nclass RTDBRemoveRemote {\n  constructor(instance) {\n    this.instance = instance;\n  }\n\n  deletePath(path) {\n    return this.patch(path, null, \"all data\");\n  }\n\n  deleteSubPath(path, subPaths) {\n    const body = {};\n\n    for (const c of subPaths) {\n      body[c] = null;\n    }\n\n    return this.patch(path, body, `${subPaths.length} subpaths`);\n  }\n\n  patch(path, body, note) {\n    const t0 = Date.now();\n    return new Promise((resolve, reject) => {\n      const url = utils.addSubdomain(api.realtimeOrigin, this.instance) + path + \".json?print=silent&writeSizeLimit=tiny\";\n      return api.addRequestHeaders({\n        url,\n        body,\n        json: true\n      }).then(reqOptionsWithToken => {\n        request.patch(reqOptionsWithToken, (err, res, resBody) => {\n          if (err) {\n            return reject(new error_1.FirebaseError(`Unexpected error while removing data at ${path}`, {\n              exit: 2,\n              original: err\n            }));\n          }\n\n          const dt = Date.now() - t0;\n\n          if (res.statusCode >= 400) {\n            logger.debug(`[database] Failed to remove ${note} at ${path} time: ${dt}ms, will try recursively chunked deletes.`);\n            return resolve(false);\n          }\n\n          logger.debug(`[database] Sucessfully removed ${note} at ${path} time: ${dt}ms`);\n          return resolve(true);\n        });\n      });\n    });\n  }\n\n}\n\nexports.RTDBRemoveRemote = RTDBRemoveRemote;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/database/removeRemote.js"],"names":["Object","defineProperty","exports","value","request","require","utils","error_1","logger","api","RTDBRemoveRemote","constructor","instance","deletePath","path","patch","deleteSubPath","subPaths","body","c","length","note","t0","Date","now","Promise","resolve","reject","url","addSubdomain","realtimeOrigin","addRequestHeaders","json","then","reqOptionsWithToken","err","res","resBody","FirebaseError","exit","original","dt","statusCode","debug"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMK,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,WAAO,KAAKC,KAAL,CAAWD,IAAX,EAAiB,IAAjB,EAAuB,UAAvB,CAAP;AACH;;AACDE,EAAAA,aAAa,CAACF,IAAD,EAAOG,QAAP,EAAiB;AAC1B,UAAMC,IAAI,GAAG,EAAb;;AACA,SAAK,MAAMC,CAAX,IAAgBF,QAAhB,EAA0B;AACtBC,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAU,IAAV;AACH;;AACD,WAAO,KAAKJ,KAAL,CAAWD,IAAX,EAAiBI,IAAjB,EAAwB,GAAED,QAAQ,CAACG,MAAO,WAA1C,CAAP;AACH;;AACDL,EAAAA,KAAK,CAACD,IAAD,EAAOI,IAAP,EAAaG,IAAb,EAAmB;AACpB,UAAMC,EAAE,GAAGC,IAAI,CAACC,GAAL,EAAX;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAMC,GAAG,GAAGtB,KAAK,CAACuB,YAAN,CAAmBpB,GAAG,CAACqB,cAAvB,EAAuC,KAAKlB,QAA5C,IACRE,IADQ,GAER,wCAFJ;AAGA,aAAOL,GAAG,CACLsB,iBADE,CACgB;AACnBH,QAAAA,GADmB;AAEnBV,QAAAA,IAFmB;AAGnBc,QAAAA,IAAI,EAAE;AAHa,OADhB,EAMFC,IANE,CAMIC,mBAAD,IAAyB;AAC/B9B,QAAAA,OAAO,CAACW,KAAR,CAAcmB,mBAAd,EAAmC,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,KAAuB;AACtD,cAAIF,GAAJ,EAAS;AACL,mBAAOR,MAAM,CAAC,IAAIpB,OAAO,CAAC+B,aAAZ,CAA2B,2CAA0CxB,IAAK,EAA1E,EAA6E;AACvFyB,cAAAA,IAAI,EAAE,CADiF;AAEvFC,cAAAA,QAAQ,EAAEL;AAF6E,aAA7E,CAAD,CAAb;AAIH;;AACD,gBAAMM,EAAE,GAAGlB,IAAI,CAACC,GAAL,KAAaF,EAAxB;;AACA,cAAIc,GAAG,CAACM,UAAJ,IAAkB,GAAtB,EAA2B;AACvBlC,YAAAA,MAAM,CAACmC,KAAP,CAAc,+BAA8BtB,IAAK,OAAMP,IAAK,UAAS2B,EAAG,2CAAxE;AACA,mBAAOf,OAAO,CAAC,KAAD,CAAd;AACH;;AACDlB,UAAAA,MAAM,CAACmC,KAAP,CAAc,kCAAiCtB,IAAK,OAAMP,IAAK,UAAS2B,EAAG,IAA3E;AACA,iBAAOf,OAAO,CAAC,IAAD,CAAd;AACH,SAdD;AAeH,OAtBM,CAAP;AAuBH,KA3BM,CAAP;AA4BH;;AA5CkB;;AA8CvBxB,OAAO,CAACQ,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request = require(\"request\");\nconst utils = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst logger = require(\"../logger\");\nconst api = require(\"../api\");\nclass RTDBRemoveRemote {\n    constructor(instance) {\n        this.instance = instance;\n    }\n    deletePath(path) {\n        return this.patch(path, null, \"all data\");\n    }\n    deleteSubPath(path, subPaths) {\n        const body = {};\n        for (const c of subPaths) {\n            body[c] = null;\n        }\n        return this.patch(path, body, `${subPaths.length} subpaths`);\n    }\n    patch(path, body, note) {\n        const t0 = Date.now();\n        return new Promise((resolve, reject) => {\n            const url = utils.addSubdomain(api.realtimeOrigin, this.instance) +\n                path +\n                \".json?print=silent&writeSizeLimit=tiny\";\n            return api\n                .addRequestHeaders({\n                url,\n                body,\n                json: true,\n            })\n                .then((reqOptionsWithToken) => {\n                request.patch(reqOptionsWithToken, (err, res, resBody) => {\n                    if (err) {\n                        return reject(new error_1.FirebaseError(`Unexpected error while removing data at ${path}`, {\n                            exit: 2,\n                            original: err,\n                        }));\n                    }\n                    const dt = Date.now() - t0;\n                    if (res.statusCode >= 400) {\n                        logger.debug(`[database] Failed to remove ${note} at ${path} time: ${dt}ms, will try recursively chunked deletes.`);\n                        return resolve(false);\n                    }\n                    logger.debug(`[database] Sucessfully removed ${note} at ${path} time: ${dt}ms`);\n                    return resolve(true);\n                });\n            });\n        });\n    }\n}\nexports.RTDBRemoveRemote = RTDBRemoveRemote;\n"]},"metadata":{},"sourceType":"script"}