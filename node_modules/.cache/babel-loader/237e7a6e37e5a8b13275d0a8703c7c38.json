{"ast":null,"code":"// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n'use strict';\n\nconst gapicConfig = require('./publisher_client_config.json');\n\nconst gax = require('google-gax');\n\nconst path = require('path');\n\nconst VERSION = require('../../../package.json').version;\n/**\n * The service that an application uses to manipulate topics, and to send\n * messages to a topic.\n *\n * @class\n * @memberof v1\n */\n\n\nclass PublisherClient {\n  /**\n   * Construct an instance of PublisherClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {function} [options.promise] - Custom promise module to use instead\n   *     of native Promises.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    opts = opts || {};\n    this._descriptors = {};\n\n    if (global.isBrowser) {\n      // If we're in browser, we use gRPC fallback.\n      opts.fallback = true;\n    } // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n\n\n    const gaxModule = !global.isBrowser && opts.fallback ? gax.fallback : gax;\n    const servicePath = opts.servicePath || opts.apiEndpoint || this.constructor.servicePath; // Ensure that options include the service address and port.\n\n    opts = Object.assign({\n      clientConfig: {},\n      port: this.constructor.port,\n      servicePath\n    }, opts); // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n\n    opts.scopes = this.constructor.scopes;\n    const gaxGrpc = new gaxModule.GrpcClient(opts); // Save the auth object to the client, for use by other methods.\n\n    this.auth = gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    }\n\n    clientHeader.push(`gax/${gaxModule.version}`);\n\n    if (opts.fallback) {\n      clientHeader.push(`gl-web/${gaxModule.version}`);\n    } else {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    }\n\n    clientHeader.push(`gapic/${VERSION}`);\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n\n    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');\n    const protos = gaxGrpc.loadProto(opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this._pathTemplates = {\n      projectPathTemplate: new gaxModule.PathTemplate('projects/{project}'),\n      topicPathTemplate: new gaxModule.PathTemplate('projects/{project}/topics/{topic}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this._descriptors.page = {\n      listTopics: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'topics'),\n      listTopicSubscriptions: new gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subscriptions')\n    };\n    const protoFilesRoot = opts.fallback ? gaxModule.protobuf.Root.fromJSON(require('../../protos/protos.json')) : gaxModule.protobuf.loadSync(nodejsProtoPath); // Some methods on this API support automatically batching\n    // requests; denote this.\n\n    this._descriptors.batching = {\n      publish: new gaxModule.BundleDescriptor('messages', ['topic'], 'messageIds', gax.createByteLengthFunction(protoFilesRoot.lookup('google.pubsub.v1.PubsubMessage')))\n    }; // Put together the default options sent with requests.\n\n    const defaults = gaxGrpc.constructSettings('google.pubsub.v1.Publisher', gapicConfig, opts.clientConfig, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this._innerApiCalls = {}; // Put together the \"service stub\" for\n    // google.iam.v1.IAMPolicy.\n\n    const iamPolicyStub = gaxGrpc.createStub(opts.fallback ? protos.lookupService('google.iam.v1.IAMPolicy') : protos.google.iam.v1.IAMPolicy, opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const iamPolicyStubMethods = ['setIamPolicy', 'getIamPolicy', 'testIamPermissions'];\n\n    for (const methodName of iamPolicyStubMethods) {\n      const innerCallPromise = iamPolicyStub.then(stub => (...args) => {\n        return stub[methodName].apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this._innerApiCalls[methodName] = gaxModule.createApiCall(innerCallPromise, defaults[methodName], this._descriptors.page[methodName] || this._descriptors.batching[methodName]);\n    } // Put together the \"service stub\" for\n    // google.pubsub.v1.Publisher.\n\n\n    const publisherStub = gaxGrpc.createStub(opts.fallback ? protos.lookupService('google.pubsub.v1.Publisher') : protos.google.pubsub.v1.Publisher, opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const publisherStubMethods = ['createTopic', 'updateTopic', 'publish', 'getTopic', 'listTopics', 'listTopicSubscriptions', 'deleteTopic'];\n\n    for (const methodName of publisherStubMethods) {\n      const innerCallPromise = publisherStub.then(stub => (...args) => {\n        return stub[methodName].apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this._innerApiCalls[methodName] = gaxModule.createApiCall(innerCallPromise, defaults[methodName], this._descriptors.page[methodName] || this._descriptors.batching[methodName]);\n    }\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'pubsub.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'pubsub.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/pubsub'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n\n\n  getProjectId(callback) {\n    return this.auth.getProjectId(callback);\n  } // -------------------\n  // -- Service calls --\n  // -------------------\n\n  /**\n   * Creates the given topic with the given name. See the\n   * <a href=\"https://cloud.google.com/pubsub/docs/admin#resource_names\">\n   * resource name rules</a>.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The name of the topic. It must have the format\n   *   `\"projects/{project}/topics/{topic}\"`. `{topic}` must start with a letter,\n   *   and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),\n   *   underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent\n   *   signs (`%`). It must be between 3 and 255 characters in length, and it\n   *   must not start with `\"goog\"`.\n   * @param {Object.<string, string>} [request.labels]\n   *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n   *   managing labels</a>.\n   * @param {Object} [request.messageStoragePolicy]\n   *   Policy constraining the set of Google Cloud Platform regions where messages\n   *   published to the topic may be stored. If not present, then no constraints\n   *   are in effect.\n   *\n   *   This object should have the same structure as [MessageStoragePolicy]{@link google.pubsub.v1.MessageStoragePolicy}\n   * @param {string} [request.kmsKeyName]\n   *   The resource name of the Cloud KMS CryptoKey to be used to protect access\n   *   to messages published on this topic.\n   *\n   *   The expected format is `projects/* /locations/* /keyRings/* /cryptoKeys/*`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.createTopic({name: formattedName})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  createTopic(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name\n    });\n    return this._innerApiCalls.createTopic(request, options, callback);\n  }\n  /**\n   * Updates an existing topic. Note that certain properties of a\n   * topic are not modifiable.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {Object} request.topic\n   *   The updated topic object.\n   *\n   *   This object should have the same structure as [Topic]{@link google.pubsub.v1.Topic}\n   * @param {Object} request.updateMask\n   *   Indicates which fields in the provided topic to update. Must be specified\n   *   and non-empty. Note that if `update_mask` contains\n   *   \"message_storage_policy\" then the new value will be determined based on the\n   *   policy configured at the project or organization level. The\n   *   `message_storage_policy` must not be set in the `topic` provided above.\n   *\n   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const topic = {};\n   * const updateMask = {};\n   * const request = {\n   *   topic: topic,\n   *   updateMask: updateMask,\n   * };\n   * client.updateTopic(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  updateTopic(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      'topic.name': request.topic.name\n    });\n    return this._innerApiCalls.updateTopic(request, options, callback);\n  }\n  /**\n   * Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic\n   * does not exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   The messages in the request will be published on this topic.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {Object[]} request.messages\n   *   The messages to publish.\n   *\n   *   This object should have the same structure as [PubsubMessage]{@link google.pubsub.v1.PubsubMessage}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [PublishResponse]{@link google.pubsub.v1.PublishResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [PublishResponse]{@link google.pubsub.v1.PublishResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * const data = Buffer.from('');\n   * const messagesElement = {\n   *   data: data,\n   * };\n   * const messages = [messagesElement];\n   * const request = {\n   *   topic: formattedTopic,\n   *   messages: messages,\n   * };\n   * client.publish(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  publish(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      topic: request.topic\n    });\n    return this._innerApiCalls.publish(request, options, callback);\n  }\n  /**\n   * Gets the configuration of a topic.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   The name of the topic to get.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.getTopic({topic: formattedTopic})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  getTopic(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      topic: request.topic\n    });\n    return this._innerApiCalls.getTopic(request, options, callback);\n  }\n  /**\n   * Lists matching topics.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list topics.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Topic]{@link google.pubsub.v1.Topic}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListTopicsResponse]{@link google.pubsub.v1.ListTopicsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Topic]{@link google.pubsub.v1.Topic}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Topic]{@link google.pubsub.v1.Topic} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListTopicsResponse]{@link google.pubsub.v1.ListTopicsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   * client.listTopics({project: formattedProject})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listTopics(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listTopics({project: formattedProject}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  listTopics(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      project: request.project\n    });\n    return this._innerApiCalls.listTopics(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listTopics}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listTopics} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list topics.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Topic]{@link google.pubsub.v1.Topic} on 'data' event.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedProject = client.projectPath('[PROJECT]');\n   * client.listTopicsStream({project: formattedProject})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n\n\n  listTopicsStream(request, options) {\n    options = options || {};\n    return this._descriptors.page.listTopics.createStream(this._innerApiCalls.listTopics, request, options);\n  }\n  /**\n   * Lists the names of the subscriptions on this topic.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   The name of the topic that subscriptions are attached to.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of string.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListTopicSubscriptionsResponse]{@link google.pubsub.v1.ListTopicSubscriptionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of string.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of string in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListTopicSubscriptionsResponse]{@link google.pubsub.v1.ListTopicSubscriptionsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   *\n   * client.listTopicSubscriptions({topic: formattedTopic})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listTopicSubscriptions(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listTopicSubscriptions({topic: formattedTopic}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  listTopicSubscriptions(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      topic: request.topic\n    });\n    return this._innerApiCalls.listTopicSubscriptions(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listTopicSubscriptions}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listTopicSubscriptions} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   The name of the topic that subscriptions are attached to.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits a string on 'data' event.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.listTopicSubscriptionsStream({topic: formattedTopic})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n\n\n  listTopicSubscriptionsStream(request, options) {\n    options = options || {};\n    return this._descriptors.page.listTopicSubscriptions.createStream(this._innerApiCalls.listTopicSubscriptions, request, options);\n  }\n  /**\n   * Deletes the topic with the given name. Returns `NOT_FOUND` if the topic\n   * does not exist. After a topic is deleted, a new topic may be created with\n   * the same name; this is an entirely new topic with none of the old\n   * configuration or subscriptions. Existing subscriptions to this topic are\n   * not deleted, but their `topic` field is set to `_deleted-topic_`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   Name of the topic to delete.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.deleteTopic({topic: formattedTopic}).catch(err => {\n   *   console.error(err);\n   * });\n   */\n\n\n  deleteTopic(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      topic: request.topic\n    });\n    return this._innerApiCalls.deleteTopic(request, options, callback);\n  }\n  /**\n   * Sets the access control policy on the specified resource. Replaces any\n   * existing policy.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being specified.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} request.policy\n   *   REQUIRED: The complete policy to be applied to the `resource`. The size of\n   *   the policy is limited to a few 10s of KB. An empty policy is a\n   *   valid policy but certain Cloud Platform services (such as Projects)\n   *   might reject them.\n   *\n   *   This object should have the same structure as [Policy]{@link google.iam.v1.Policy}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.topicPath('[PROJECT]', '[TOPIC]');\n   * const policy = {};\n   * const request = {\n   *   resource: formattedResource,\n   *   policy: policy,\n   * };\n   * client.setIamPolicy(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  setIamPolicy(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      resource: request.resource\n    });\n    return this._innerApiCalls.setIamPolicy(request, options, callback);\n  }\n  /**\n   * Gets the access control policy for a resource.\n   * Returns an empty policy if the resource exists and does not have a policy\n   * set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} [request.options]\n   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to\n   *   `GetIamPolicy`. This field is only used by Cloud IAM.\n   *\n   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.getIamPolicy({resource: formattedResource})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  getIamPolicy(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      resource: request.resource\n    });\n    return this._innerApiCalls.getIamPolicy(request, options, callback);\n  }\n  /**\n   * Returns permissions that a caller has on the specified resource.\n   * If the resource does not exist, this will return an empty set of\n   * permissions, not a NOT_FOUND error.\n   *\n   * Note: This operation is designed to be used for building permission-aware\n   * UIs and command-line tools, not for authorization checking. This operation\n   * may \"fail open\" without warning.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy detail is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {string[]} request.permissions\n   *   The set of permissions to check for the `resource`. Permissions with\n   *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n   *   information see\n   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.topicPath('[PROJECT]', '[TOPIC]');\n   * const permissions = [];\n   * const request = {\n   *   resource: formattedResource,\n   *   permissions: permissions,\n   * };\n   * client.testIamPermissions(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  testIamPermissions(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      resource: request.resource\n    });\n    return this._innerApiCalls.testIamPermissions(request, options, callback);\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {String} project\n   * @returns {String}\n   */\n\n\n  projectPath(project) {\n    return this._pathTemplates.projectPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Return a fully-qualified topic resource name string.\n   *\n   * @param {String} project\n   * @param {String} topic\n   * @returns {String}\n   */\n\n\n  topicPath(project, topic) {\n    return this._pathTemplates.topicPathTemplate.render({\n      project: project,\n      topic: topic\n    });\n  }\n  /**\n   * Parse the projectName from a project resource.\n   *\n   * @param {String} projectName\n   *   A fully-qualified path representing a project resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromProjectName(projectName) {\n    return this._pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n  /**\n   * Parse the topicName from a topic resource.\n   *\n   * @param {String} topicName\n   *   A fully-qualified path representing a topic resources.\n   * @returns {String} - A string representing the project.\n   */\n\n\n  matchProjectFromTopicName(topicName) {\n    return this._pathTemplates.topicPathTemplate.match(topicName).project;\n  }\n  /**\n   * Parse the topicName from a topic resource.\n   *\n   * @param {String} topicName\n   *   A fully-qualified path representing a topic resources.\n   * @returns {String} - A string representing the topic.\n   */\n\n\n  matchTopicFromTopicName(topicName) {\n    return this._pathTemplates.topicPathTemplate.match(topicName).topic;\n  }\n\n}\n\nmodule.exports = PublisherClient;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/@google-cloud/pubsub/build/src/v1/publisher_client.js"],"names":["gapicConfig","require","gax","path","VERSION","version","PublisherClient","constructor","opts","_descriptors","global","isBrowser","fallback","gaxModule","servicePath","apiEndpoint","Object","assign","clientConfig","port","scopes","gaxGrpc","GrpcClient","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","nodejsProtoPath","join","__dirname","protos","loadProto","_pathTemplates","projectPathTemplate","PathTemplate","topicPathTemplate","page","listTopics","PageDescriptor","listTopicSubscriptions","protoFilesRoot","protobuf","Root","fromJSON","loadSync","batching","publish","BundleDescriptor","createByteLengthFunction","lookup","defaults","constructSettings","_innerApiCalls","iamPolicyStub","createStub","lookupService","google","iam","v1","IAMPolicy","iamPolicyStubMethods","methodName","innerCallPromise","then","stub","args","apply","err","createApiCall","publisherStub","pubsub","Publisher","publisherStubMethods","getProjectId","callback","createTopic","request","options","Function","undefined","otherArgs","headers","routingHeader","fromParams","name","updateTopic","topic","getTopic","project","listTopicsStream","createStream","listTopicSubscriptionsStream","deleteTopic","setIamPolicy","resource","getIamPolicy","testIamPermissions","projectPath","render","topicPath","matchProjectFromProjectName","projectName","match","matchProjectFromTopicName","topicName","matchTopicFromTopicName","module","exports"],"mappings":"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","sourcesContent":["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n'use strict';\n\nconst gapicConfig = require('./publisher_client_config.json');\nconst gax = require('google-gax');\nconst path = require('path');\n\nconst VERSION = require('../../../package.json').version;\n\n/**\n * The service that an application uses to manipulate topics, and to send\n * messages to a topic.\n *\n * @class\n * @memberof v1\n */\nclass PublisherClient {\n  /**\n   * Construct an instance of PublisherClient.\n   *\n   * @param {object} [options] - The configuration object. See the subsequent\n   *   parameters for more details.\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {function} [options.promise] - Custom promise module to use instead\n   *     of native Promises.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   */\n  constructor(opts) {\n    opts = opts || {};\n    this._descriptors = {};\n\n    if (global.isBrowser) {\n      // If we're in browser, we use gRPC fallback.\n      opts.fallback = true;\n    }\n\n    // If we are in browser, we are already using fallback because of the\n    // \"browser\" field in package.json.\n    // But if we were explicitly requested to use fallback, let's do it now.\n    const gaxModule = !global.isBrowser && opts.fallback ? gax.fallback : gax;\n\n    const servicePath =\n      opts.servicePath || opts.apiEndpoint || this.constructor.servicePath;\n\n    // Ensure that options include the service address and port.\n    opts = Object.assign(\n      {\n        clientConfig: {},\n        port: this.constructor.port,\n        servicePath,\n      },\n      opts\n    );\n\n    // Create a `gaxGrpc` object, with any grpc-specific options\n    // sent to the client.\n    opts.scopes = this.constructor.scopes;\n    const gaxGrpc = new gaxModule.GrpcClient(opts);\n\n    // Save the auth object to the client, for use by other methods.\n    this.auth = gaxGrpc.auth;\n\n    // Determine the client header string.\n    const clientHeader = [];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    }\n    clientHeader.push(`gax/${gaxModule.version}`);\n    if (opts.fallback) {\n      clientHeader.push(`gl-web/${gaxModule.version}`);\n    } else {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    }\n    clientHeader.push(`gapic/${VERSION}`);\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n\n    // Load the applicable protos.\n    // For Node.js, pass the path to JSON proto file.\n    // For browsers, pass the JSON content.\n\n    const nodejsProtoPath = path.join(\n      __dirname,\n      '..',\n      '..',\n      'protos',\n      'protos.json'\n    );\n    const protos = gaxGrpc.loadProto(\n      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath\n    );\n\n    // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n    this._pathTemplates = {\n      projectPathTemplate: new gaxModule.PathTemplate('projects/{project}'),\n      topicPathTemplate: new gaxModule.PathTemplate(\n        'projects/{project}/topics/{topic}'\n      ),\n    };\n\n    // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n    this._descriptors.page = {\n      listTopics: new gaxModule.PageDescriptor(\n        'pageToken',\n        'nextPageToken',\n        'topics'\n      ),\n      listTopicSubscriptions: new gaxModule.PageDescriptor(\n        'pageToken',\n        'nextPageToken',\n        'subscriptions'\n      ),\n    };\n\n    const protoFilesRoot = opts.fallback\n      ? gaxModule.protobuf.Root.fromJSON(require('../../protos/protos.json'))\n      : gaxModule.protobuf.loadSync(nodejsProtoPath);\n\n    // Some methods on this API support automatically batching\n    // requests; denote this.\n    this._descriptors.batching = {\n      publish: new gaxModule.BundleDescriptor(\n        'messages',\n        ['topic'],\n        'messageIds',\n        gax.createByteLengthFunction(\n          protoFilesRoot.lookup('google.pubsub.v1.PubsubMessage')\n        )\n      ),\n    };\n\n    // Put together the default options sent with requests.\n    const defaults = gaxGrpc.constructSettings(\n      'google.pubsub.v1.Publisher',\n      gapicConfig,\n      opts.clientConfig,\n      {'x-goog-api-client': clientHeader.join(' ')}\n    );\n\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this._innerApiCalls = {};\n\n    // Put together the \"service stub\" for\n    // google.iam.v1.IAMPolicy.\n    const iamPolicyStub = gaxGrpc.createStub(\n      opts.fallback\n        ? protos.lookupService('google.iam.v1.IAMPolicy')\n        : protos.google.iam.v1.IAMPolicy,\n      opts\n    );\n\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const iamPolicyStubMethods = [\n      'setIamPolicy',\n      'getIamPolicy',\n      'testIamPermissions',\n    ];\n    for (const methodName of iamPolicyStubMethods) {\n      const innerCallPromise = iamPolicyStub.then(\n        stub => (...args) => {\n          return stub[methodName].apply(stub, args);\n        },\n        err => () => {\n          throw err;\n        }\n      );\n      this._innerApiCalls[methodName] = gaxModule.createApiCall(\n        innerCallPromise,\n        defaults[methodName],\n        this._descriptors.page[methodName] ||\n          this._descriptors.batching[methodName]\n      );\n    }\n\n    // Put together the \"service stub\" for\n    // google.pubsub.v1.Publisher.\n    const publisherStub = gaxGrpc.createStub(\n      opts.fallback\n        ? protos.lookupService('google.pubsub.v1.Publisher')\n        : protos.google.pubsub.v1.Publisher,\n      opts\n    );\n\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const publisherStubMethods = [\n      'createTopic',\n      'updateTopic',\n      'publish',\n      'getTopic',\n      'listTopics',\n      'listTopicSubscriptions',\n      'deleteTopic',\n    ];\n    for (const methodName of publisherStubMethods) {\n      const innerCallPromise = publisherStub.then(\n        stub => (...args) => {\n          return stub[methodName].apply(stub, args);\n        },\n        err => () => {\n          throw err;\n        }\n      );\n      this._innerApiCalls[methodName] = gaxModule.createApiCall(\n        innerCallPromise,\n        defaults[methodName],\n        this._descriptors.page[methodName] ||\n          this._descriptors.batching[methodName]\n      );\n    }\n  }\n\n  /**\n   * The DNS address for this API service.\n   */\n  static get servicePath() {\n    return 'pubsub.googleapis.com';\n  }\n\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n  static get apiEndpoint() {\n    return 'pubsub.googleapis.com';\n  }\n\n  /**\n   * The port for this API service.\n   */\n  static get port() {\n    return 443;\n  }\n\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n  static get scopes() {\n    return [\n      'https://www.googleapis.com/auth/cloud-platform',\n      'https://www.googleapis.com/auth/pubsub',\n    ];\n  }\n\n  /**\n   * Return the project ID used by this class.\n   * @param {function(Error, string)} callback - the callback to\n   *   be called with the current project Id.\n   */\n  getProjectId(callback) {\n    return this.auth.getProjectId(callback);\n  }\n\n  // -------------------\n  // -- Service calls --\n  // -------------------\n\n  /**\n   * Creates the given topic with the given name. See the\n   * <a href=\"https://cloud.google.com/pubsub/docs/admin#resource_names\">\n   * resource name rules</a>.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The name of the topic. It must have the format\n   *   `\"projects/{project}/topics/{topic}\"`. `{topic}` must start with a letter,\n   *   and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),\n   *   underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent\n   *   signs (`%`). It must be between 3 and 255 characters in length, and it\n   *   must not start with `\"goog\"`.\n   * @param {Object.<string, string>} [request.labels]\n   *   See <a href=\"https://cloud.google.com/pubsub/docs/labels\"> Creating and\n   *   managing labels</a>.\n   * @param {Object} [request.messageStoragePolicy]\n   *   Policy constraining the set of Google Cloud Platform regions where messages\n   *   published to the topic may be stored. If not present, then no constraints\n   *   are in effect.\n   *\n   *   This object should have the same structure as [MessageStoragePolicy]{@link google.pubsub.v1.MessageStoragePolicy}\n   * @param {string} [request.kmsKeyName]\n   *   The resource name of the Cloud KMS CryptoKey to be used to protect access\n   *   to messages published on this topic.\n   *\n   *   The expected format is `projects/* /locations/* /keyRings/* /cryptoKeys/*`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedName = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.createTopic({name: formattedName})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  createTopic(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      name: request.name,\n    });\n\n    return this._innerApiCalls.createTopic(request, options, callback);\n  }\n\n  /**\n   * Updates an existing topic. Note that certain properties of a\n   * topic are not modifiable.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {Object} request.topic\n   *   The updated topic object.\n   *\n   *   This object should have the same structure as [Topic]{@link google.pubsub.v1.Topic}\n   * @param {Object} request.updateMask\n   *   Indicates which fields in the provided topic to update. Must be specified\n   *   and non-empty. Note that if `update_mask` contains\n   *   \"message_storage_policy\" then the new value will be determined based on the\n   *   policy configured at the project or organization level. The\n   *   `message_storage_policy` must not be set in the `topic` provided above.\n   *\n   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const topic = {};\n   * const updateMask = {};\n   * const request = {\n   *   topic: topic,\n   *   updateMask: updateMask,\n   * };\n   * client.updateTopic(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  updateTopic(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      'topic.name': request.topic.name,\n    });\n\n    return this._innerApiCalls.updateTopic(request, options, callback);\n  }\n\n  /**\n   * Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic\n   * does not exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   The messages in the request will be published on this topic.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {Object[]} request.messages\n   *   The messages to publish.\n   *\n   *   This object should have the same structure as [PubsubMessage]{@link google.pubsub.v1.PubsubMessage}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [PublishResponse]{@link google.pubsub.v1.PublishResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [PublishResponse]{@link google.pubsub.v1.PublishResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * const data = Buffer.from('');\n   * const messagesElement = {\n   *   data: data,\n   * };\n   * const messages = [messagesElement];\n   * const request = {\n   *   topic: formattedTopic,\n   *   messages: messages,\n   * };\n   * client.publish(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  publish(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      topic: request.topic,\n    });\n\n    return this._innerApiCalls.publish(request, options, callback);\n  }\n\n  /**\n   * Gets the configuration of a topic.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   The name of the topic to get.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Topic]{@link google.pubsub.v1.Topic}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.getTopic({topic: formattedTopic})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  getTopic(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      topic: request.topic,\n    });\n\n    return this._innerApiCalls.getTopic(request, options, callback);\n  }\n\n  /**\n   * Lists matching topics.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list topics.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of [Topic]{@link google.pubsub.v1.Topic}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListTopicsResponse]{@link google.pubsub.v1.ListTopicsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Topic]{@link google.pubsub.v1.Topic}.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of [Topic]{@link google.pubsub.v1.Topic} in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListTopicsResponse]{@link google.pubsub.v1.ListTopicsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   * client.listTopics({project: formattedProject})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedProject = client.projectPath('[PROJECT]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listTopics(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listTopics({project: formattedProject}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  listTopics(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      project: request.project,\n    });\n\n    return this._innerApiCalls.listTopics(request, options, callback);\n  }\n\n  /**\n   * Equivalent to {@link listTopics}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listTopics} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.project\n   *   The name of the project in which to list topics.\n   *   Format is `projects/{project-id}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Topic]{@link google.pubsub.v1.Topic} on 'data' event.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedProject = client.projectPath('[PROJECT]');\n   * client.listTopicsStream({project: formattedProject})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n  listTopicsStream(request, options) {\n    options = options || {};\n\n    return this._descriptors.page.listTopics.createStream(\n      this._innerApiCalls.listTopics,\n      request,\n      options\n    );\n  }\n\n  /**\n   * Lists the names of the subscriptions on this topic.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   The name of the topic that subscriptions are attached to.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of string.\n   *\n   *   When autoPaginate: false is specified through options, it contains the result\n   *   in a single response. If the response indicates the next page exists, the third\n   *   parameter is set to be used for the next request object. The fourth parameter keeps\n   *   the raw response object of an object representing [ListTopicSubscriptionsResponse]{@link google.pubsub.v1.ListTopicSubscriptionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of string.\n   *\n   *   When autoPaginate: false is specified through options, the array has three elements.\n   *   The first element is Array of string in a single response.\n   *   The second element is the next request object if the response\n   *   indicates the next page exists, or null. The third element is\n   *   an object representing [ListTopicSubscriptionsResponse]{@link google.pubsub.v1.ListTopicSubscriptionsResponse}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * // Iterate over all elements.\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   *\n   * client.listTopicSubscriptions({topic: formattedTopic})\n   *   .then(responses => {\n   *     const resources = responses[0];\n   *     for (const resource of resources) {\n   *       // doThingsWith(resource)\n   *     }\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   *\n   * // Or obtain the paged response.\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   *\n   *\n   * const options = {autoPaginate: false};\n   * const callback = responses => {\n   *   // The actual resources in a response.\n   *   const resources = responses[0];\n   *   // The next request if the response shows that there are more responses.\n   *   const nextRequest = responses[1];\n   *   // The actual response object, if necessary.\n   *   // const rawResponse = responses[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   *   if (nextRequest) {\n   *     // Fetch the next page.\n   *     return client.listTopicSubscriptions(nextRequest, options).then(callback);\n   *   }\n   * }\n   * client.listTopicSubscriptions({topic: formattedTopic}, options)\n   *   .then(callback)\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  listTopicSubscriptions(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      topic: request.topic,\n    });\n\n    return this._innerApiCalls.listTopicSubscriptions(\n      request,\n      options,\n      callback\n    );\n  }\n\n  /**\n   * Equivalent to {@link listTopicSubscriptions}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listTopicSubscriptions} continuously\n   * and invokes the callback registered for 'data' event for each element in the\n   * responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   The name of the topic that subscriptions are attached to.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {number} [request.pageSize]\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @returns {Stream}\n   *   An object stream which emits a string on 'data' event.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.listTopicSubscriptionsStream({topic: formattedTopic})\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   }).on('error', err => {\n   *     console.log(err);\n   *   });\n   */\n  listTopicSubscriptionsStream(request, options) {\n    options = options || {};\n\n    return this._descriptors.page.listTopicSubscriptions.createStream(\n      this._innerApiCalls.listTopicSubscriptions,\n      request,\n      options\n    );\n  }\n\n  /**\n   * Deletes the topic with the given name. Returns `NOT_FOUND` if the topic\n   * does not exist. After a topic is deleted, a new topic may be created with\n   * the same name; this is an entirely new topic with none of the old\n   * configuration or subscriptions. Existing subscriptions to this topic are\n   * not deleted, but their `topic` field is set to `_deleted-topic_`.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.topic\n   *   Name of the topic to delete.\n   *   Format is `projects/{project}/topics/{topic}`.\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error)} [callback]\n   *   The function which will be called with the result of the API call.\n   * @returns {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedTopic = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.deleteTopic({topic: formattedTopic}).catch(err => {\n   *   console.error(err);\n   * });\n   */\n  deleteTopic(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      topic: request.topic,\n    });\n\n    return this._innerApiCalls.deleteTopic(request, options, callback);\n  }\n\n  /**\n   * Sets the access control policy on the specified resource. Replaces any\n   * existing policy.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being specified.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} request.policy\n   *   REQUIRED: The complete policy to be applied to the `resource`. The size of\n   *   the policy is limited to a few 10s of KB. An empty policy is a\n   *   valid policy but certain Cloud Platform services (such as Projects)\n   *   might reject them.\n   *\n   *   This object should have the same structure as [Policy]{@link google.iam.v1.Policy}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.topicPath('[PROJECT]', '[TOPIC]');\n   * const policy = {};\n   * const request = {\n   *   resource: formattedResource,\n   *   policy: policy,\n   * };\n   * client.setIamPolicy(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  setIamPolicy(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      resource: request.resource,\n    });\n\n    return this._innerApiCalls.setIamPolicy(request, options, callback);\n  }\n\n  /**\n   * Gets the access control policy for a resource.\n   * Returns an empty policy if the resource exists and does not have a policy\n   * set.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {Object} [request.options]\n   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to\n   *   `GetIamPolicy`. This field is only used by Cloud IAM.\n   *\n   *   This object should have the same structure as [GetPolicyOptions]{@link google.iam.v1.GetPolicyOptions}\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [Policy]{@link google.iam.v1.Policy}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.topicPath('[PROJECT]', '[TOPIC]');\n   * client.getIamPolicy({resource: formattedResource})\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  getIamPolicy(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      resource: request.resource,\n    });\n\n    return this._innerApiCalls.getIamPolicy(request, options, callback);\n  }\n\n  /**\n   * Returns permissions that a caller has on the specified resource.\n   * If the resource does not exist, this will return an empty set of\n   * permissions, not a NOT_FOUND error.\n   *\n   * Note: This operation is designed to be used for building permission-aware\n   * UIs and command-line tools, not for authorization checking. This operation\n   * may \"fail open\" without warning.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.resource\n   *   REQUIRED: The resource for which the policy detail is being requested.\n   *   See the operation documentation for the appropriate value for this field.\n   * @param {string[]} request.permissions\n   *   The set of permissions to check for the `resource`. Permissions with\n   *   wildcards (such as '*' or 'storage.*') are not allowed. For more\n   *   information see\n   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).\n   * @param {Object} [options]\n   *   Optional parameters. You can override the default settings for this call, e.g, timeout,\n   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html} for the details.\n   * @param {function(?Error, ?Object)} [callback]\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const pubsub = require('@google-cloud/pubsub');\n   *\n   * const client = new pubsub.v1.PublisherClient({\n   *   // optional auth parameters.\n   * });\n   *\n   * const formattedResource = client.topicPath('[PROJECT]', '[TOPIC]');\n   * const permissions = [];\n   * const request = {\n   *   resource: formattedResource,\n   *   permissions: permissions,\n   * };\n   * client.testIamPermissions(request)\n   *   .then(responses => {\n   *     const response = responses[0];\n   *     // doThingsWith(response)\n   *   })\n   *   .catch(err => {\n   *     console.error(err);\n   *   });\n   */\n  testIamPermissions(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers[\n      'x-goog-request-params'\n    ] = gax.routingHeader.fromParams({\n      resource: request.resource,\n    });\n\n    return this._innerApiCalls.testIamPermissions(request, options, callback);\n  }\n\n  // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {String} project\n   * @returns {String}\n   */\n  projectPath(project) {\n    return this._pathTemplates.projectPathTemplate.render({\n      project: project,\n    });\n  }\n\n  /**\n   * Return a fully-qualified topic resource name string.\n   *\n   * @param {String} project\n   * @param {String} topic\n   * @returns {String}\n   */\n  topicPath(project, topic) {\n    return this._pathTemplates.topicPathTemplate.render({\n      project: project,\n      topic: topic,\n    });\n  }\n\n  /**\n   * Parse the projectName from a project resource.\n   *\n   * @param {String} projectName\n   *   A fully-qualified path representing a project resources.\n   * @returns {String} - A string representing the project.\n   */\n  matchProjectFromProjectName(projectName) {\n    return this._pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n\n  /**\n   * Parse the topicName from a topic resource.\n   *\n   * @param {String} topicName\n   *   A fully-qualified path representing a topic resources.\n   * @returns {String} - A string representing the project.\n   */\n  matchProjectFromTopicName(topicName) {\n    return this._pathTemplates.topicPathTemplate.match(topicName).project;\n  }\n\n  /**\n   * Parse the topicName from a topic resource.\n   *\n   * @param {String} topicName\n   *   A fully-qualified path representing a topic resources.\n   * @returns {String} - A string representing the topic.\n   */\n  matchTopicFromTopicName(topicName) {\n    return this._pathTemplates.topicPathTemplate.match(topicName).topic;\n  }\n}\n\nmodule.exports = PublisherClient;\n"]},"metadata":{},"sourceType":"script"}