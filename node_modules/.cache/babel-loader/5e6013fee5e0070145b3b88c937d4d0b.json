{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Emulators;\n\n(function (Emulators) {\n  Emulators[\"FUNCTIONS\"] = \"functions\";\n  Emulators[\"FIRESTORE\"] = \"firestore\";\n  Emulators[\"DATABASE\"] = \"database\";\n  Emulators[\"HOSTING\"] = \"hosting\";\n  Emulators[\"PUBSUB\"] = \"pubsub\";\n})(Emulators = exports.Emulators || (exports.Emulators = {}));\n\nexports.ALL_EMULATORS = [Emulators.FUNCTIONS, Emulators.FIRESTORE, Emulators.DATABASE, Emulators.HOSTING, Emulators.PUBSUB];\nexports.JAVA_EMULATORS = [Emulators.FIRESTORE, Emulators.DATABASE, Emulators.PUBSUB];\n\nfunction isJavaEmulator(value) {\n  return isEmulator(value) && exports.JAVA_EMULATORS.indexOf(value) >= 0;\n}\n\nexports.isJavaEmulator = isJavaEmulator;\n\nfunction isEmulator(value) {\n  return Object.values(Emulators).indexOf(value) >= 0;\n}\n\nexports.isEmulator = isEmulator;\nvar FunctionsExecutionMode;\n\n(function (FunctionsExecutionMode) {\n  FunctionsExecutionMode[\"AUTO\"] = \"auto\";\n  FunctionsExecutionMode[\"SEQUENTIAL\"] = \"sequential\";\n})(FunctionsExecutionMode = exports.FunctionsExecutionMode || (exports.FunctionsExecutionMode = {}));\n\nclass EmulatorLog {\n  constructor(level, type, text, data, timestamp) {\n    this.level = level;\n    this.type = type;\n    this.text = text;\n    this.data = data;\n    this.timestamp = timestamp;\n    this.timestamp = this.timestamp || new Date().toISOString();\n    this.data = this.data || {};\n  }\n\n  get date() {\n    if (!this.timestamp) {\n      return new Date(0);\n    }\n\n    return new Date(this.timestamp);\n  }\n\n  static waitForFlush() {\n    return new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (!EmulatorLog.WAITING_FOR_FLUSH) {\n          resolve();\n          clearInterval(interval);\n        }\n      }, 10);\n    });\n  }\n\n  static waitForLog(emitter, level, type, filter) {\n    return new Promise((resolve, reject) => {\n      const listener = el => {\n        const levelTypeMatch = el.level === level && el.type === type;\n        let filterMatch = true;\n\n        if (filter) {\n          filterMatch = filter(el);\n        }\n\n        if (levelTypeMatch && filterMatch) {\n          emitter.removeListener(\"log\", listener);\n          resolve(el);\n        }\n      };\n\n      emitter.on(\"log\", listener);\n    });\n  }\n\n  static fromJSON(json) {\n    let parsedLog;\n    let isNotJSON = false;\n\n    try {\n      parsedLog = JSON.parse(json);\n    } catch (err) {\n      isNotJSON = true;\n    }\n\n    parsedLog = parsedLog || {};\n\n    if (isNotJSON || parsedLog.level === undefined || parsedLog.type === undefined || parsedLog.text === undefined) {\n      parsedLog = {\n        level: \"USER\",\n        type: \"function-log\",\n        text: json\n      };\n    }\n\n    return new EmulatorLog(parsedLog.level, parsedLog.type, parsedLog.text, parsedLog.data, parsedLog.timestamp);\n  }\n\n  toString() {\n    return this.toStringCore(false);\n  }\n\n  toPrettyString() {\n    return this.toStringCore(true);\n  }\n\n  log() {\n    const msg = `${this.toString()}\\n`;\n    this.bufferMessage(msg);\n    this.flush();\n  }\n\n  bufferMessage(msg) {\n    EmulatorLog.LOG_BUFFER.push(msg);\n  }\n\n  flush() {\n    const nextMsg = EmulatorLog.LOG_BUFFER.shift();\n\n    if (!nextMsg) {\n      return;\n    }\n\n    EmulatorLog.WAITING_FOR_FLUSH = true;\n\n    if (process.send) {\n      process.send(nextMsg, undefined, {}, err => {\n        if (err) {\n          process.stderr.write(err);\n        }\n\n        EmulatorLog.WAITING_FOR_FLUSH = EmulatorLog.LOG_BUFFER.length > 0;\n        this.flush();\n      });\n    } else {\n      process.stderr.write(\"subprocess.send() is undefined, cannot communicate with Functions Runtime.\");\n    }\n  }\n\n  toStringCore(pretty = false) {\n    return JSON.stringify({\n      timestamp: this.timestamp,\n      level: this.level,\n      text: this.text,\n      data: this.data,\n      type: this.type\n    }, undefined, pretty ? 2 : 0);\n  }\n\n}\n\nEmulatorLog.WAITING_FOR_FLUSH = false;\nEmulatorLog.LOG_BUFFER = [];\nexports.EmulatorLog = EmulatorLog;\nvar Severity;\n\n(function (Severity) {\n  Severity[Severity[\"SEVERITY_UNSPECIFIED\"] = 0] = \"SEVERITY_UNSPECIFIED\";\n  Severity[Severity[\"DEPRECATION\"] = 1] = \"DEPRECATION\";\n  Severity[Severity[\"WARNING\"] = 2] = \"WARNING\";\n  Severity[Severity[\"ERROR\"] = 3] = \"ERROR\";\n})(Severity = exports.Severity || (exports.Severity = {}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/types.js"],"names":["Object","defineProperty","exports","value","Emulators","ALL_EMULATORS","FUNCTIONS","FIRESTORE","DATABASE","HOSTING","PUBSUB","JAVA_EMULATORS","isJavaEmulator","isEmulator","indexOf","values","FunctionsExecutionMode","EmulatorLog","constructor","level","type","text","data","timestamp","Date","toISOString","date","waitForFlush","Promise","resolve","interval","setInterval","WAITING_FOR_FLUSH","clearInterval","waitForLog","emitter","filter","reject","listener","el","levelTypeMatch","filterMatch","removeListener","on","fromJSON","json","parsedLog","isNotJSON","JSON","parse","err","undefined","toString","toStringCore","toPrettyString","log","msg","bufferMessage","flush","LOG_BUFFER","push","nextMsg","shift","process","send","stderr","write","length","pretty","stringify","Severity"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Emulators;\n(function (Emulators) {\n    Emulators[\"FUNCTIONS\"] = \"functions\";\n    Emulators[\"FIRESTORE\"] = \"firestore\";\n    Emulators[\"DATABASE\"] = \"database\";\n    Emulators[\"HOSTING\"] = \"hosting\";\n    Emulators[\"PUBSUB\"] = \"pubsub\";\n})(Emulators = exports.Emulators || (exports.Emulators = {}));\nexports.ALL_EMULATORS = [\n    Emulators.FUNCTIONS,\n    Emulators.FIRESTORE,\n    Emulators.DATABASE,\n    Emulators.HOSTING,\n    Emulators.PUBSUB,\n];\nexports.JAVA_EMULATORS = [Emulators.FIRESTORE, Emulators.DATABASE, Emulators.PUBSUB];\nfunction isJavaEmulator(value) {\n    return isEmulator(value) && exports.JAVA_EMULATORS.indexOf(value) >= 0;\n}\nexports.isJavaEmulator = isJavaEmulator;\nfunction isEmulator(value) {\n    return Object.values(Emulators).indexOf(value) >= 0;\n}\nexports.isEmulator = isEmulator;\nvar FunctionsExecutionMode;\n(function (FunctionsExecutionMode) {\n    FunctionsExecutionMode[\"AUTO\"] = \"auto\";\n    FunctionsExecutionMode[\"SEQUENTIAL\"] = \"sequential\";\n})(FunctionsExecutionMode = exports.FunctionsExecutionMode || (exports.FunctionsExecutionMode = {}));\nclass EmulatorLog {\n    constructor(level, type, text, data, timestamp) {\n        this.level = level;\n        this.type = type;\n        this.text = text;\n        this.data = data;\n        this.timestamp = timestamp;\n        this.timestamp = this.timestamp || new Date().toISOString();\n        this.data = this.data || {};\n    }\n    get date() {\n        if (!this.timestamp) {\n            return new Date(0);\n        }\n        return new Date(this.timestamp);\n    }\n    static waitForFlush() {\n        return new Promise((resolve) => {\n            const interval = setInterval(() => {\n                if (!EmulatorLog.WAITING_FOR_FLUSH) {\n                    resolve();\n                    clearInterval(interval);\n                }\n            }, 10);\n        });\n    }\n    static waitForLog(emitter, level, type, filter) {\n        return new Promise((resolve, reject) => {\n            const listener = (el) => {\n                const levelTypeMatch = el.level === level && el.type === type;\n                let filterMatch = true;\n                if (filter) {\n                    filterMatch = filter(el);\n                }\n                if (levelTypeMatch && filterMatch) {\n                    emitter.removeListener(\"log\", listener);\n                    resolve(el);\n                }\n            };\n            emitter.on(\"log\", listener);\n        });\n    }\n    static fromJSON(json) {\n        let parsedLog;\n        let isNotJSON = false;\n        try {\n            parsedLog = JSON.parse(json);\n        }\n        catch (err) {\n            isNotJSON = true;\n        }\n        parsedLog = parsedLog || {};\n        if (isNotJSON ||\n            parsedLog.level === undefined ||\n            parsedLog.type === undefined ||\n            parsedLog.text === undefined) {\n            parsedLog = {\n                level: \"USER\",\n                type: \"function-log\",\n                text: json,\n            };\n        }\n        return new EmulatorLog(parsedLog.level, parsedLog.type, parsedLog.text, parsedLog.data, parsedLog.timestamp);\n    }\n    toString() {\n        return this.toStringCore(false);\n    }\n    toPrettyString() {\n        return this.toStringCore(true);\n    }\n    log() {\n        const msg = `${this.toString()}\\n`;\n        this.bufferMessage(msg);\n        this.flush();\n    }\n    bufferMessage(msg) {\n        EmulatorLog.LOG_BUFFER.push(msg);\n    }\n    flush() {\n        const nextMsg = EmulatorLog.LOG_BUFFER.shift();\n        if (!nextMsg) {\n            return;\n        }\n        EmulatorLog.WAITING_FOR_FLUSH = true;\n        if (process.send) {\n            process.send(nextMsg, undefined, {}, (err) => {\n                if (err) {\n                    process.stderr.write(err);\n                }\n                EmulatorLog.WAITING_FOR_FLUSH = EmulatorLog.LOG_BUFFER.length > 0;\n                this.flush();\n            });\n        }\n        else {\n            process.stderr.write(\"subprocess.send() is undefined, cannot communicate with Functions Runtime.\");\n        }\n    }\n    toStringCore(pretty = false) {\n        return JSON.stringify({\n            timestamp: this.timestamp,\n            level: this.level,\n            text: this.text,\n            data: this.data,\n            type: this.type,\n        }, undefined, pretty ? 2 : 0);\n    }\n}\nEmulatorLog.WAITING_FOR_FLUSH = false;\nEmulatorLog.LOG_BUFFER = [];\nexports.EmulatorLog = EmulatorLog;\nvar Severity;\n(function (Severity) {\n    Severity[Severity[\"SEVERITY_UNSPECIFIED\"] = 0] = \"SEVERITY_UNSPECIFIED\";\n    Severity[Severity[\"DEPRECATION\"] = 1] = \"DEPRECATION\";\n    Severity[Severity[\"WARNING\"] = 2] = \"WARNING\";\n    Severity[Severity[\"ERROR\"] = 3] = \"ERROR\";\n})(Severity = exports.Severity || (exports.Severity = {}));\n"]},"metadata":{},"sourceType":"script"}