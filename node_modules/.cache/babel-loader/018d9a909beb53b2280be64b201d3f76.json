{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst chokidar = require(\"chokidar\");\n\nconst fs = require(\"fs\");\n\nconst request = require(\"request\");\n\nconst clc = require(\"cli-color\");\n\nconst path = require(\"path\");\n\nconst pf = require(\"portfinder\");\n\nconst utils = require(\"../utils\");\n\nconst javaEmulators = require(\"../serve/javaEmulators\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst registry_1 = require(\"./registry\");\n\nconst constants_1 = require(\"./constants\");\n\nclass FirestoreEmulator {\n  constructor(args) {\n    this.args = args;\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const functionsPort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.FUNCTIONS);\n\n      if (functionsPort) {\n        this.args.functions_emulator = `localhost:${functionsPort}`;\n      }\n\n      if (this.args.rules && this.args.projectId) {\n        const rulesPath = this.args.rules;\n        this.rulesWatcher = chokidar.watch(rulesPath, {\n          persistent: true,\n          ignoreInitial: true\n        });\n        this.rulesWatcher.on(\"change\", (event, stats) => __awaiter(this, void 0, void 0, function* () {\n          const newContent = fs.readFileSync(rulesPath).toString();\n          utils.logLabeledBullet(\"firestore\", \"Change detected, updating rules...\");\n          const issues = yield this.updateRules(newContent);\n\n          if (issues && issues.length > 0) {\n            for (const issue of issues) {\n              utils.logWarning(this.prettyPrintRulesIssue(rulesPath, issue));\n            }\n\n            utils.logWarning(\"Failed to update rules\");\n          } else {\n            utils.logLabeledSuccess(\"firestore\", \"Rules updated.\");\n          }\n        }));\n      }\n\n      const host = this.getInfo().host;\n      const basePort = this.getInfo().port;\n      const port = basePort + 1;\n\n      try {\n        const webChannelPort = yield pf.getPortPromise({\n          port,\n          stopPort: port\n        });\n        this.args.webchannel_port = webChannelPort;\n        utils.logLabeledBullet(\"firestore\", `Serving ALL traffic (including WebChannel) on ${clc.bold(`http://${host}:${basePort}`)}`);\n        utils.logLabeledWarning(\"firestore\", `Support for WebChannel on a separate port (${webChannelPort}) is DEPRECATED and will go away soon. ` + \"Please use port above instead.\");\n      } catch (e) {}\n\n      return javaEmulators.start(types_1.Emulators.FIRESTORE, this.args);\n    });\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return;\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.rulesWatcher) {\n        this.rulesWatcher.close();\n      }\n\n      return javaEmulators.stop(types_1.Emulators.FIRESTORE);\n    });\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.FIRESTORE);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.FIRESTORE);\n    return {\n      host,\n      port\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.FIRESTORE;\n  }\n\n  updateRules(content) {\n    const projectId = this.args.projectId;\n\n    const _this$getInfo = this.getInfo(),\n          host = _this$getInfo.host,\n          port = _this$getInfo.port;\n\n    const url = `http://${host}:${port}/emulator/v1/projects/${projectId}:securityRules`;\n    const body = {\n      ignore_errors: true,\n      rules: {\n        files: [{\n          name: \"security.rules\",\n          content\n        }]\n      }\n    };\n    return new Promise((resolve, reject) => {\n      request.put(url, {\n        json: body\n      }, (err, res, resBody) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        const rulesValid = res.statusCode === 200 && !resBody.issues;\n\n        if (!rulesValid) {\n          const issues = resBody.issues;\n          resolve(issues);\n        }\n\n        resolve([]);\n      });\n    });\n  }\n\n  prettyPrintRulesIssue(filePath, issue) {\n    const relativePath = path.relative(process.cwd(), filePath);\n    const line = issue.sourcePosition.line || 0;\n    const col = issue.sourcePosition.column || 0;\n    return `${clc.cyan(relativePath)}:${clc.yellow(line)}:${clc.yellow(col)} - ${clc.red(issue.severity)} ${issue.description}`;\n  }\n\n}\n\nFirestoreEmulator.FIRESTORE_EMULATOR_ENV = \"FIRESTORE_EMULATOR_HOST\";\nFirestoreEmulator.FIRESTORE_EMULATOR_ENV_ALT = \"FIREBASE_FIRESTORE_EMULATOR_ADDRESS\";\nexports.FirestoreEmulator = FirestoreEmulator;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/firestoreEmulator.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","chokidar","require","fs","request","clc","path","pf","utils","javaEmulators","types_1","registry_1","constants_1","FirestoreEmulator","constructor","args","start","functionsPort","EmulatorRegistry","getPort","Emulators","FUNCTIONS","functions_emulator","rules","projectId","rulesPath","rulesWatcher","watch","persistent","ignoreInitial","on","event","stats","newContent","readFileSync","toString","logLabeledBullet","issues","updateRules","length","issue","logWarning","prettyPrintRulesIssue","logLabeledSuccess","host","getInfo","basePort","port","webChannelPort","getPortPromise","stopPort","webchannel_port","bold","logLabeledWarning","FIRESTORE","connect","stop","close","Constants","getDefaultHost","getDefaultPort","getName","content","url","body","ignore_errors","files","name","put","json","err","res","resBody","rulesValid","statusCode","filePath","relativePath","relative","process","cwd","line","sourcePosition","col","column","cyan","yellow","red","severity","description","FIRESTORE_EMULATOR_ENV","FIRESTORE_EMULATOR_ENV_ALT"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chokidar = require(\"chokidar\");\nconst fs = require(\"fs\");\nconst request = require(\"request\");\nconst clc = require(\"cli-color\");\nconst path = require(\"path\");\nconst pf = require(\"portfinder\");\nconst utils = require(\"../utils\");\nconst javaEmulators = require(\"../serve/javaEmulators\");\nconst types_1 = require(\"../emulator/types\");\nconst registry_1 = require(\"./registry\");\nconst constants_1 = require(\"./constants\");\nclass FirestoreEmulator {\n    constructor(args) {\n        this.args = args;\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const functionsPort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.FUNCTIONS);\n            if (functionsPort) {\n                this.args.functions_emulator = `localhost:${functionsPort}`;\n            }\n            if (this.args.rules && this.args.projectId) {\n                const rulesPath = this.args.rules;\n                this.rulesWatcher = chokidar.watch(rulesPath, { persistent: true, ignoreInitial: true });\n                this.rulesWatcher.on(\"change\", (event, stats) => __awaiter(this, void 0, void 0, function* () {\n                    const newContent = fs.readFileSync(rulesPath).toString();\n                    utils.logLabeledBullet(\"firestore\", \"Change detected, updating rules...\");\n                    const issues = yield this.updateRules(newContent);\n                    if (issues && issues.length > 0) {\n                        for (const issue of issues) {\n                            utils.logWarning(this.prettyPrintRulesIssue(rulesPath, issue));\n                        }\n                        utils.logWarning(\"Failed to update rules\");\n                    }\n                    else {\n                        utils.logLabeledSuccess(\"firestore\", \"Rules updated.\");\n                    }\n                }));\n            }\n            const host = this.getInfo().host;\n            const basePort = this.getInfo().port;\n            const port = basePort + 1;\n            try {\n                const webChannelPort = yield pf.getPortPromise({\n                    port,\n                    stopPort: port,\n                });\n                this.args.webchannel_port = webChannelPort;\n                utils.logLabeledBullet(\"firestore\", `Serving ALL traffic (including WebChannel) on ${clc.bold(`http://${host}:${basePort}`)}`);\n                utils.logLabeledWarning(\"firestore\", `Support for WebChannel on a separate port (${webChannelPort}) is DEPRECATED and will go away soon. ` +\n                    \"Please use port above instead.\");\n            }\n            catch (e) {\n            }\n            return javaEmulators.start(types_1.Emulators.FIRESTORE, this.args);\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return;\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.rulesWatcher) {\n                this.rulesWatcher.close();\n            }\n            return javaEmulators.stop(types_1.Emulators.FIRESTORE);\n        });\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.FIRESTORE);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.FIRESTORE);\n        return {\n            host,\n            port,\n        };\n    }\n    getName() {\n        return types_1.Emulators.FIRESTORE;\n    }\n    updateRules(content) {\n        const projectId = this.args.projectId;\n        const { host, port } = this.getInfo();\n        const url = `http://${host}:${port}/emulator/v1/projects/${projectId}:securityRules`;\n        const body = {\n            ignore_errors: true,\n            rules: {\n                files: [\n                    {\n                        name: \"security.rules\",\n                        content,\n                    },\n                ],\n            },\n        };\n        return new Promise((resolve, reject) => {\n            request.put(url, { json: body }, (err, res, resBody) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                const rulesValid = res.statusCode === 200 && !resBody.issues;\n                if (!rulesValid) {\n                    const issues = resBody.issues;\n                    resolve(issues);\n                }\n                resolve([]);\n            });\n        });\n    }\n    prettyPrintRulesIssue(filePath, issue) {\n        const relativePath = path.relative(process.cwd(), filePath);\n        const line = issue.sourcePosition.line || 0;\n        const col = issue.sourcePosition.column || 0;\n        return `${clc.cyan(relativePath)}:${clc.yellow(line)}:${clc.yellow(col)} - ${clc.red(issue.severity)} ${issue.description}`;\n    }\n}\nFirestoreEmulator.FIRESTORE_EMULATOR_ENV = \"FIRESTORE_EMULATOR_HOST\";\nFirestoreEmulator.FIRESTORE_EMULATOR_ENV_ALT = \"FIREBASE_FIRESTORE_EMULATOR_ADDRESS\";\nexports.FirestoreEmulator = FirestoreEmulator;\n"]},"metadata":{},"sourceType":"script"}