{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs-extra\");\n\nconst error_1 = require(\"../error\");\n\nconst crypto = require(\"crypto\");\n\nvar DistributionFileType;\n\n(function (DistributionFileType) {\n  DistributionFileType[\"IPA\"] = \"ipa\";\n  DistributionFileType[\"APK\"] = \"apk\";\n})(DistributionFileType = exports.DistributionFileType || (exports.DistributionFileType = {}));\n\nclass Distribution {\n  constructor(path) {\n    this.path = path;\n\n    if (!path) {\n      throw new error_1.FirebaseError(\"must specify a distribution file\");\n    }\n\n    const distributionType = path.split(\".\").pop();\n\n    if (distributionType !== DistributionFileType.IPA && distributionType !== DistributionFileType.APK) {\n      throw new error_1.FirebaseError(\"unsupported distribution file format, should be .ipa or .apk\");\n    }\n\n    if (!fs.existsSync(path)) {\n      throw new error_1.FirebaseError(`File ${path} does not exist: verify that file points to a distribution`);\n    }\n\n    this.path = path;\n    this.fileType = distributionType;\n  }\n\n  fileSize() {\n    return fs.statSync(this.path).size;\n  }\n\n  readStream() {\n    return fs.createReadStream(this.path);\n  }\n\n  platform() {\n    switch (this.fileType) {\n      case DistributionFileType.IPA:\n        return \"ios\";\n\n      case DistributionFileType.APK:\n        return \"android\";\n\n      default:\n        throw new error_1.FirebaseError(\"Unsupported distribution file format, should be .ipa or .apk\");\n    }\n  }\n\n  releaseHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        const hash = crypto.createHash(\"sha1\");\n        const stream = this.readStream();\n        stream.on(\"data\", data => hash.update(data));\n        stream.on(\"end\", () => {\n          return resolve(hash.digest(\"hex\"));\n        });\n      });\n    });\n  }\n\n}\n\nexports.Distribution = Distribution;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/appdistribution/distribution.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","fs","require","error_1","crypto","DistributionFileType","Distribution","constructor","path","FirebaseError","distributionType","split","pop","IPA","APK","existsSync","fileType","fileSize","statSync","size","readStream","createReadStream","platform","releaseHash","hash","createHash","stream","on","data","update","digest"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs-extra\");\nconst error_1 = require(\"../error\");\nconst crypto = require(\"crypto\");\nvar DistributionFileType;\n(function (DistributionFileType) {\n    DistributionFileType[\"IPA\"] = \"ipa\";\n    DistributionFileType[\"APK\"] = \"apk\";\n})(DistributionFileType = exports.DistributionFileType || (exports.DistributionFileType = {}));\nclass Distribution {\n    constructor(path) {\n        this.path = path;\n        if (!path) {\n            throw new error_1.FirebaseError(\"must specify a distribution file\");\n        }\n        const distributionType = path.split(\".\").pop();\n        if (distributionType !== DistributionFileType.IPA &&\n            distributionType !== DistributionFileType.APK) {\n            throw new error_1.FirebaseError(\"unsupported distribution file format, should be .ipa or .apk\");\n        }\n        if (!fs.existsSync(path)) {\n            throw new error_1.FirebaseError(`File ${path} does not exist: verify that file points to a distribution`);\n        }\n        this.path = path;\n        this.fileType = distributionType;\n    }\n    fileSize() {\n        return fs.statSync(this.path).size;\n    }\n    readStream() {\n        return fs.createReadStream(this.path);\n    }\n    platform() {\n        switch (this.fileType) {\n            case DistributionFileType.IPA:\n                return \"ios\";\n            case DistributionFileType.APK:\n                return \"android\";\n            default:\n                throw new error_1.FirebaseError(\"Unsupported distribution file format, should be .ipa or .apk\");\n        }\n    }\n    releaseHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => {\n                const hash = crypto.createHash(\"sha1\");\n                const stream = this.readStream();\n                stream.on(\"data\", (data) => hash.update(data));\n                stream.on(\"end\", () => {\n                    return resolve(hash.digest(\"hex\"));\n                });\n            });\n        });\n    }\n}\nexports.Distribution = Distribution;\n"]},"metadata":{},"sourceType":"script"}