{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst utils = require(\"../../utils\");\n\nconst prompt_1 = require(\"../../prompt\");\n\nconst types_1 = require(\"../../emulator/types\");\n\nconst constants_1 = require(\"../../emulator/constants\");\n\nconst javaEmulators_1 = require(\"../../serve/javaEmulators\");\n\nfunction doSetup(setup, config) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const choices = types_1.ALL_EMULATORS.map(e => {\n      return {\n        value: e,\n        name: _.capitalize(e),\n        checked: config && config.has(e)\n      };\n    });\n    const selections = {};\n    yield prompt_1.prompt(selections, [{\n      type: \"checkbox\",\n      name: \"emulators\",\n      message: \"Which Firebase emulators do you want to set up? \" + \"Press Space to select emulators, then Enter to confirm your choices.\",\n      choices: choices\n    }]);\n\n    if (!selections.emulators) {\n      return;\n    }\n\n    setup.config.emulators = setup.config.emulators || {};\n\n    for (const selected of selections.emulators) {\n      setup.config.emulators[selected] = setup.config.emulators[selected] || {};\n      const currentPort = setup.config.emulators[selected].port;\n\n      if (currentPort) {\n        utils.logBullet(`Port for ${selected} already configured: ${clc.cyan(currentPort)}`);\n      } else {\n        yield prompt_1.prompt(setup.config.emulators[selected], [{\n          type: \"input\",\n          name: \"port\",\n          message: `Which port do you want to use for the ${clc.underline(selected)} emulator?`,\n          default: constants_1.Constants.getDefaultPort(selected)\n        }]);\n      }\n    }\n\n    if (selections.emulators.length) {\n      yield prompt_1.prompt(selections, [{\n        name: \"download\",\n        type: \"confirm\",\n        message: \"Would you like to download the emulators now?\",\n        default: false\n      }]);\n    }\n\n    if (selections.download) {\n      for (const selected of selections.emulators) {\n        if (types_1.isJavaEmulator(selected)) {\n          yield javaEmulators_1.downloadIfNecessary(selected);\n        }\n      }\n    }\n  });\n}\n\nexports.doSetup = doSetup;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/init/features/emulators.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","clc","require","_","utils","prompt_1","types_1","constants_1","javaEmulators_1","doSetup","setup","config","choices","ALL_EMULATORS","map","name","capitalize","checked","has","selections","prompt","type","message","emulators","selected","currentPort","port","logBullet","cyan","underline","default","Constants","getDefaultPort","length","download","isJavaEmulator","downloadIfNecessary"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst utils = require(\"../../utils\");\nconst prompt_1 = require(\"../../prompt\");\nconst types_1 = require(\"../../emulator/types\");\nconst constants_1 = require(\"../../emulator/constants\");\nconst javaEmulators_1 = require(\"../../serve/javaEmulators\");\nfunction doSetup(setup, config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const choices = types_1.ALL_EMULATORS.map((e) => {\n            return {\n                value: e,\n                name: _.capitalize(e),\n                checked: config && config.has(e),\n            };\n        });\n        const selections = {};\n        yield prompt_1.prompt(selections, [\n            {\n                type: \"checkbox\",\n                name: \"emulators\",\n                message: \"Which Firebase emulators do you want to set up? \" +\n                    \"Press Space to select emulators, then Enter to confirm your choices.\",\n                choices: choices,\n            },\n        ]);\n        if (!selections.emulators) {\n            return;\n        }\n        setup.config.emulators = setup.config.emulators || {};\n        for (const selected of selections.emulators) {\n            setup.config.emulators[selected] = setup.config.emulators[selected] || {};\n            const currentPort = setup.config.emulators[selected].port;\n            if (currentPort) {\n                utils.logBullet(`Port for ${selected} already configured: ${clc.cyan(currentPort)}`);\n            }\n            else {\n                yield prompt_1.prompt(setup.config.emulators[selected], [\n                    {\n                        type: \"input\",\n                        name: \"port\",\n                        message: `Which port do you want to use for the ${clc.underline(selected)} emulator?`,\n                        default: constants_1.Constants.getDefaultPort(selected),\n                    },\n                ]);\n            }\n        }\n        if (selections.emulators.length) {\n            yield prompt_1.prompt(selections, [\n                {\n                    name: \"download\",\n                    type: \"confirm\",\n                    message: \"Would you like to download the emulators now?\",\n                    default: false,\n                },\n            ]);\n        }\n        if (selections.download) {\n            for (const selected of selections.emulators) {\n                if (types_1.isJavaEmulator(selected)) {\n                    yield javaEmulators_1.downloadIfNecessary(selected);\n                }\n            }\n        }\n    });\n}\nexports.doSetup = doSetup;\n"]},"metadata":{},"sourceType":"script"}