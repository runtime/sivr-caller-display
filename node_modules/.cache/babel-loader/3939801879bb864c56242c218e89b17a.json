{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst utils_1 = require(\"./utils\");\n\nconst functionsConfig_1 = require(\"../functionsConfig\");\n\nconst resolveSource_1 = require(\"./resolveSource\");\n\nconst error_1 = require(\"../error\");\n\nconst askUserForParam_1 = require(\"./askUserForParam\");\n\nconst ensureApiEnabled_1 = require(\"../ensureApiEnabled\");\n\nconst getProjectId = require(\"../getProjectId\");\n\nconst generateInstanceId_1 = require(\"./generateInstanceId\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst logger = require(\"../logger\");\n\nexports.logPrefix = \"extensions\";\n\nfunction getDBInstanceFromURL(databaseUrl = \"\") {\n  const instanceRegex = new RegExp(\"(?:https://)(.*)(?:.firebaseio.com)\");\n  const matches = databaseUrl.match(instanceRegex);\n\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n\n  return \"\";\n}\n\nexports.getDBInstanceFromURL = getDBInstanceFromURL;\n\nfunction getFirebaseProjectParams(projectId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const body = yield functionsConfig_1.getFirebaseConfig({\n      project: projectId\n    });\n    const FIREBASE_CONFIG = JSON.stringify({\n      projectId: body.projectId,\n      databaseURL: body.databaseURL,\n      storageBucket: body.storageBucket\n    });\n    return {\n      PROJECT_ID: body.projectId,\n      DATABASE_URL: body.databaseURL,\n      STORAGE_BUCKET: body.storageBucket,\n      FIREBASE_CONFIG,\n      DATABASE_INSTANCE: getDBInstanceFromURL(body.databaseURL)\n    };\n  });\n}\n\nexports.getFirebaseProjectParams = getFirebaseProjectParams;\n\nfunction substituteParams(original, params) {\n  const startingString = JSON.stringify(original);\n\n  const reduceFunction = (intermediateResult, paramVal, paramKey) => {\n    const regex = new RegExp(\"\\\\$\\\\{\" + paramKey + \"\\\\}\", \"g\");\n    return intermediateResult.replace(regex, paramVal);\n  };\n\n  return JSON.parse(_.reduce(params, reduceFunction, startingString));\n}\n\nexports.substituteParams = substituteParams;\n\nfunction populateDefaultParams(paramVars, paramSpec) {\n  const newParams = paramVars;\n\n  _.forEach(paramSpec, env => {\n    if (!paramVars[env.param]) {\n      if (env.default) {\n        newParams[env.param] = env.default;\n      } else {\n        throw new error_1.FirebaseError(`${env.param} has not been set in the given params file` + \" and there is no default available. Please set this variable before installing again.\");\n      }\n    }\n  });\n\n  return newParams;\n}\n\nexports.populateDefaultParams = populateDefaultParams;\n\nfunction validateCommandLineParams(envVars, paramSpec) {\n  if (_.size(envVars) < _.size(paramSpec)) {\n    throw new error_1.FirebaseError(\"A param is missing from the passed in .env file.\" + \"Please check to see that all variables are set before installing again.\");\n  }\n\n  if (_.size(envVars) > _.size(paramSpec)) {\n    const paramList = _.map(paramSpec, param => {\n      return param.param;\n    });\n\n    const misnamedParams = Object.keys(envVars).filter(key => {\n      return paramList.indexOf(key) === -1;\n    });\n    logger.info(\"Warning: The following params were specified in your env file but do not exist in the extension spec: \" + `${misnamedParams.join(\", \")}.`);\n  }\n\n  _.forEach(paramSpec, param => {\n    if (!askUserForParam_1.checkResponse(envVars[param.param], param)) {\n      throw new error_1.FirebaseError(`${param.param} is not valid for the reason listed above. Please set a valid value` + \" before installing again.\");\n    }\n  });\n}\n\nexports.validateCommandLineParams = validateCommandLineParams;\n\nfunction getValidInstanceId(projectId, extensionName) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let instanceId = yield generateInstanceId_1.generateInstanceId(projectId, extensionName);\n\n    if (instanceId !== extensionName) {\n      logger.info(`An extension named ${extensionName} already exists in project ${projectId}.`);\n      instanceId = yield promptForValidInstanceId(instanceId);\n    }\n\n    return instanceId;\n  });\n}\n\nexports.getValidInstanceId = getValidInstanceId;\n\nfunction promptForValidInstanceId(instanceId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let instanceIdIsValid = false;\n    let newInstanceId;\n    const instanceIdRegex = /^[a-z][a-z\\d\\-]*[a-z\\d]$/;\n\n    while (!instanceIdIsValid) {\n      newInstanceId = yield prompt_1.promptOnce({\n        type: \"input\",\n        default: instanceId,\n        message: `Please enter a new name for this instance:`\n      });\n\n      if (newInstanceId.length <= 6 || 45 <= newInstanceId.length) {\n        logger.info(\"Invalid instance ID. Instance ID must be between 6 and 45 characters.\");\n      } else if (!instanceIdRegex.test(newInstanceId)) {\n        logger.info(\"Invalid instance ID. Instance ID must start with a lowercase letter, \" + \"end with a lowercase letter or number, and only contain lowercase letters, numbers, or -\");\n      } else {\n        instanceIdIsValid = true;\n      }\n    }\n\n    return newInstanceId;\n  });\n}\n\nexports.promptForValidInstanceId = promptForValidInstanceId;\n\nfunction ensureExtensionsApiEnabled(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const projectId = getProjectId(options);\n    return yield ensureApiEnabled_1.ensure(projectId, \"firebaseextensions.googleapis.com\", \"extensions\", options.markdown);\n  });\n}\n\nexports.ensureExtensionsApiEnabled = ensureExtensionsApiEnabled;\n\nfunction promptForOfficialExtension(message) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const officialExts = yield resolveSource_1.getExtensionRegistry();\n    return yield prompt_1.promptOnce({\n      name: \"input\",\n      type: \"list\",\n      message,\n      choices: utils_1.convertOfficialExtensionsToList(officialExts),\n      pageSize: _.size(officialExts)\n    });\n  });\n}\n\nexports.promptForOfficialExtension = promptForOfficialExtension;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/extensions/extensionsHelper.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","utils_1","functionsConfig_1","resolveSource_1","error_1","askUserForParam_1","ensureApiEnabled_1","getProjectId","generateInstanceId_1","prompt_1","logger","logPrefix","getDBInstanceFromURL","databaseUrl","instanceRegex","RegExp","matches","match","length","getFirebaseProjectParams","projectId","body","getFirebaseConfig","project","FIREBASE_CONFIG","JSON","stringify","databaseURL","storageBucket","PROJECT_ID","DATABASE_URL","STORAGE_BUCKET","DATABASE_INSTANCE","substituteParams","original","params","startingString","reduceFunction","intermediateResult","paramVal","paramKey","regex","replace","parse","reduce","populateDefaultParams","paramVars","paramSpec","newParams","forEach","env","param","default","FirebaseError","validateCommandLineParams","envVars","size","paramList","map","misnamedParams","keys","filter","key","indexOf","info","join","checkResponse","getValidInstanceId","extensionName","instanceId","generateInstanceId","promptForValidInstanceId","instanceIdIsValid","newInstanceId","instanceIdRegex","promptOnce","type","message","test","ensureExtensionsApiEnabled","options","ensure","markdown","promptForOfficialExtension","officialExts","getExtensionRegistry","name","choices","convertOfficialExtensionsToList","pageSize"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst utils_1 = require(\"./utils\");\nconst functionsConfig_1 = require(\"../functionsConfig\");\nconst resolveSource_1 = require(\"./resolveSource\");\nconst error_1 = require(\"../error\");\nconst askUserForParam_1 = require(\"./askUserForParam\");\nconst ensureApiEnabled_1 = require(\"../ensureApiEnabled\");\nconst getProjectId = require(\"../getProjectId\");\nconst generateInstanceId_1 = require(\"./generateInstanceId\");\nconst prompt_1 = require(\"../prompt\");\nconst logger = require(\"../logger\");\nexports.logPrefix = \"extensions\";\nfunction getDBInstanceFromURL(databaseUrl = \"\") {\n    const instanceRegex = new RegExp(\"(?:https://)(.*)(?:.firebaseio.com)\");\n    const matches = databaseUrl.match(instanceRegex);\n    if (matches && matches.length > 1) {\n        return matches[1];\n    }\n    return \"\";\n}\nexports.getDBInstanceFromURL = getDBInstanceFromURL;\nfunction getFirebaseProjectParams(projectId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const body = yield functionsConfig_1.getFirebaseConfig({ project: projectId });\n        const FIREBASE_CONFIG = JSON.stringify({\n            projectId: body.projectId,\n            databaseURL: body.databaseURL,\n            storageBucket: body.storageBucket,\n        });\n        return {\n            PROJECT_ID: body.projectId,\n            DATABASE_URL: body.databaseURL,\n            STORAGE_BUCKET: body.storageBucket,\n            FIREBASE_CONFIG,\n            DATABASE_INSTANCE: getDBInstanceFromURL(body.databaseURL),\n        };\n    });\n}\nexports.getFirebaseProjectParams = getFirebaseProjectParams;\nfunction substituteParams(original, params) {\n    const startingString = JSON.stringify(original);\n    const reduceFunction = (intermediateResult, paramVal, paramKey) => {\n        const regex = new RegExp(\"\\\\$\\\\{\" + paramKey + \"\\\\}\", \"g\");\n        return intermediateResult.replace(regex, paramVal);\n    };\n    return JSON.parse(_.reduce(params, reduceFunction, startingString));\n}\nexports.substituteParams = substituteParams;\nfunction populateDefaultParams(paramVars, paramSpec) {\n    const newParams = paramVars;\n    _.forEach(paramSpec, (env) => {\n        if (!paramVars[env.param]) {\n            if (env.default) {\n                newParams[env.param] = env.default;\n            }\n            else {\n                throw new error_1.FirebaseError(`${env.param} has not been set in the given params file` +\n                    \" and there is no default available. Please set this variable before installing again.\");\n            }\n        }\n    });\n    return newParams;\n}\nexports.populateDefaultParams = populateDefaultParams;\nfunction validateCommandLineParams(envVars, paramSpec) {\n    if (_.size(envVars) < _.size(paramSpec)) {\n        throw new error_1.FirebaseError(\"A param is missing from the passed in .env file.\" +\n            \"Please check to see that all variables are set before installing again.\");\n    }\n    if (_.size(envVars) > _.size(paramSpec)) {\n        const paramList = _.map(paramSpec, (param) => {\n            return param.param;\n        });\n        const misnamedParams = Object.keys(envVars).filter((key) => {\n            return paramList.indexOf(key) === -1;\n        });\n        logger.info(\"Warning: The following params were specified in your env file but do not exist in the extension spec: \" +\n            `${misnamedParams.join(\", \")}.`);\n    }\n    _.forEach(paramSpec, (param) => {\n        if (!askUserForParam_1.checkResponse(envVars[param.param], param)) {\n            throw new error_1.FirebaseError(`${param.param} is not valid for the reason listed above. Please set a valid value` +\n                \" before installing again.\");\n        }\n    });\n}\nexports.validateCommandLineParams = validateCommandLineParams;\nfunction getValidInstanceId(projectId, extensionName) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let instanceId = yield generateInstanceId_1.generateInstanceId(projectId, extensionName);\n        if (instanceId !== extensionName) {\n            logger.info(`An extension named ${extensionName} already exists in project ${projectId}.`);\n            instanceId = yield promptForValidInstanceId(instanceId);\n        }\n        return instanceId;\n    });\n}\nexports.getValidInstanceId = getValidInstanceId;\nfunction promptForValidInstanceId(instanceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let instanceIdIsValid = false;\n        let newInstanceId;\n        const instanceIdRegex = /^[a-z][a-z\\d\\-]*[a-z\\d]$/;\n        while (!instanceIdIsValid) {\n            newInstanceId = yield prompt_1.promptOnce({\n                type: \"input\",\n                default: instanceId,\n                message: `Please enter a new name for this instance:`,\n            });\n            if (newInstanceId.length <= 6 || 45 <= newInstanceId.length) {\n                logger.info(\"Invalid instance ID. Instance ID must be between 6 and 45 characters.\");\n            }\n            else if (!instanceIdRegex.test(newInstanceId)) {\n                logger.info(\"Invalid instance ID. Instance ID must start with a lowercase letter, \" +\n                    \"end with a lowercase letter or number, and only contain lowercase letters, numbers, or -\");\n            }\n            else {\n                instanceIdIsValid = true;\n            }\n        }\n        return newInstanceId;\n    });\n}\nexports.promptForValidInstanceId = promptForValidInstanceId;\nfunction ensureExtensionsApiEnabled(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const projectId = getProjectId(options);\n        return yield ensureApiEnabled_1.ensure(projectId, \"firebaseextensions.googleapis.com\", \"extensions\", options.markdown);\n    });\n}\nexports.ensureExtensionsApiEnabled = ensureExtensionsApiEnabled;\nfunction promptForOfficialExtension(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const officialExts = yield resolveSource_1.getExtensionRegistry();\n        return yield prompt_1.promptOnce({\n            name: \"input\",\n            type: \"list\",\n            message,\n            choices: utils_1.convertOfficialExtensionsToList(officialExts),\n            pageSize: _.size(officialExts),\n        });\n    });\n}\nexports.promptForOfficialExtension = promptForOfficialExtension;\n"]},"metadata":{},"sourceType":"script"}