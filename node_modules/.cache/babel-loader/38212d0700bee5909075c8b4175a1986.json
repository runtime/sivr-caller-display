{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst error_1 = require(\"../../../error\");\n\nconst iv2 = require(\"../../../firestore/indexes\");\n\nconst fsutils = require(\"../../../fsutils\");\n\nconst prompt_1 = require(\"../../../prompt\");\n\nconst logger = require(\"../../../logger\");\n\nconst indexes = new iv2.FirestoreIndexes();\nconst INDEXES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/firestore/firestore.indexes.json\", \"utf8\");\n\nfunction initIndexes(setup, config) {\n  return __awaiter(this, void 0, void 0, function* () {\n    logger.info();\n    logger.info(\"Firestore indexes allow you to perform complex queries while\");\n    logger.info(\"maintaining performance that scales with the size of the result\");\n    logger.info(\"set. You can keep index definitions in your project directory\");\n    logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n    logger.info();\n    return prompt_1.prompt(setup.config.firestore, [{\n      type: \"input\",\n      name: \"indexes\",\n      message: \"What file should be used for Firestore indexes?\",\n      default: \"firestore.indexes.json\"\n    }]).then(() => {\n      const filename = setup.config.firestore.indexes;\n\n      if (fsutils.fileExistsSync(filename)) {\n        const msg = \"File \" + clc.bold(filename) + \" already exists.\" + \" Do you want to overwrite it with the Firestore Indexes from the Firebase Console?\";\n        return prompt_1.promptOnce({\n          type: \"confirm\",\n          message: msg,\n          default: false\n        });\n      }\n\n      return Promise.resolve(true);\n    }).then(overwrite => {\n      if (!overwrite) {\n        return Promise.resolve();\n      }\n\n      return getIndexesFromConsole(setup.projectId).then(contents => {\n        return config.writeProjectFile(setup.config.firestore.indexes, contents);\n      });\n    });\n  });\n}\n\nexports.initIndexes = initIndexes;\n\nfunction getIndexesFromConsole(projectId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const indexesPromise = indexes.listIndexes(projectId);\n    const fieldOverridesPromise = indexes.listFieldOverrides(projectId);\n    return Promise.all([indexesPromise, fieldOverridesPromise]).then(res => {\n      return indexes.makeIndexSpec(res[0], res[1]);\n    }).catch(e => {\n      if (e.message.indexOf(\"is not a Cloud Firestore enabled project\") >= 0) {\n        return INDEXES_TEMPLATE;\n      }\n\n      throw new error_1.FirebaseError(\"Error fetching Firestore indexes\", {\n        original: e\n      });\n    });\n  });\n}","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/init/features/firestore/indexes.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","clc","require","fs","error_1","iv2","fsutils","prompt_1","logger","indexes","FirestoreIndexes","INDEXES_TEMPLATE","readFileSync","__dirname","initIndexes","setup","config","info","bold","prompt","firestore","type","name","message","default","filename","fileExistsSync","msg","promptOnce","overwrite","getIndexesFromConsole","projectId","contents","writeProjectFile","indexesPromise","listIndexes","fieldOverridesPromise","listFieldOverrides","all","res","makeIndexSpec","catch","indexOf","FirebaseError","original"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst error_1 = require(\"../../../error\");\nconst iv2 = require(\"../../../firestore/indexes\");\nconst fsutils = require(\"../../../fsutils\");\nconst prompt_1 = require(\"../../../prompt\");\nconst logger = require(\"../../../logger\");\nconst indexes = new iv2.FirestoreIndexes();\nconst INDEXES_TEMPLATE = fs.readFileSync(__dirname + \"/../../../../templates/init/firestore/firestore.indexes.json\", \"utf8\");\nfunction initIndexes(setup, config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        logger.info();\n        logger.info(\"Firestore indexes allow you to perform complex queries while\");\n        logger.info(\"maintaining performance that scales with the size of the result\");\n        logger.info(\"set. You can keep index definitions in your project directory\");\n        logger.info(\"and publish them with \" + clc.bold(\"firebase deploy\") + \".\");\n        logger.info();\n        return prompt_1.prompt(setup.config.firestore, [\n            {\n                type: \"input\",\n                name: \"indexes\",\n                message: \"What file should be used for Firestore indexes?\",\n                default: \"firestore.indexes.json\",\n            },\n        ])\n            .then(() => {\n            const filename = setup.config.firestore.indexes;\n            if (fsutils.fileExistsSync(filename)) {\n                const msg = \"File \" +\n                    clc.bold(filename) +\n                    \" already exists.\" +\n                    \" Do you want to overwrite it with the Firestore Indexes from the Firebase Console?\";\n                return prompt_1.promptOnce({\n                    type: \"confirm\",\n                    message: msg,\n                    default: false,\n                });\n            }\n            return Promise.resolve(true);\n        })\n            .then((overwrite) => {\n            if (!overwrite) {\n                return Promise.resolve();\n            }\n            return getIndexesFromConsole(setup.projectId).then((contents) => {\n                return config.writeProjectFile(setup.config.firestore.indexes, contents);\n            });\n        });\n    });\n}\nexports.initIndexes = initIndexes;\nfunction getIndexesFromConsole(projectId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const indexesPromise = indexes.listIndexes(projectId);\n        const fieldOverridesPromise = indexes.listFieldOverrides(projectId);\n        return Promise.all([indexesPromise, fieldOverridesPromise])\n            .then((res) => {\n            return indexes.makeIndexSpec(res[0], res[1]);\n        })\n            .catch((e) => {\n            if (e.message.indexOf(\"is not a Cloud Firestore enabled project\") >= 0) {\n                return INDEXES_TEMPLATE;\n            }\n            throw new error_1.FirebaseError(\"Error fetching Firestore indexes\", {\n                original: e,\n            });\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}