{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"../command\"),\n    Command = _require.Command;\n\nvar requireInstance = require(\"../requireInstance\");\n\nvar _require2 = require(\"../requirePermissions\"),\n    requirePermissions = _require2.requirePermissions;\n\nvar request = require(\"request\");\n\nvar api = require(\"../api\");\n\nvar responseToError = require(\"../responseToError\");\n\nvar _require3 = require(\"../error\"),\n    FirebaseError = _require3.FirebaseError;\n\nvar utils = require(\"../utils\");\n\nvar clc = require(\"cli-color\");\n\nvar logger = require(\"../logger\");\n\nvar fs = require(\"fs\");\n\nvar _ = require(\"lodash\");\n\nmodule.exports = new Command(\"database:push <path> [infile]\").description(\"add a new JSON object to a list of data in your Firebase\").option(\"-d, --data <data>\", \"specify escaped JSON directly\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\").before(requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireInstance).action(function (path, infile, options) {\n  if (!_.startsWith(path, \"/\")) {\n    return utils.reject(\"Path must begin with /\", {\n      exit: 1\n    });\n  }\n\n  var inStream = utils.stringToStream(options.data) || (infile ? fs.createReadStream(infile) : process.stdin);\n  var url = utils.addSubdomain(api.realtimeOrigin, options.instance) + path + \".json?\";\n\n  if (!infile && !options.data) {\n    utils.explainStdin();\n  }\n\n  var reqOptions = {\n    url: url,\n    json: true\n  };\n  return api.addRequestHeaders(reqOptions).then(function (reqOptionsWithToken) {\n    return new Promise(function (resolve, reject) {\n      inStream.pipe(request.post(reqOptionsWithToken, function (err, res, body) {\n        logger.info();\n\n        if (err) {\n          return reject(new FirebaseError(\"Unexpected error while pushing data\", {\n            exit: 2\n          }));\n        } else if (res.statusCode >= 400) {\n          return reject(responseToError(res, body));\n        }\n\n        if (!_.endsWith(path, \"/\")) {\n          path += \"/\";\n        }\n\n        var consoleUrl = utils.consoleUrl(options.project, \"/database/data\" + path + body.name);\n        utils.logSuccess(\"Data pushed successfully\");\n        logger.info();\n        logger.info(clc.bold(\"View data at:\"), consoleUrl);\n        return resolve({\n          key: body.name\n        });\n      }));\n    });\n  });\n});","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/database-push.js"],"names":["require","Command","requireInstance","requirePermissions","request","api","responseToError","FirebaseError","utils","clc","logger","fs","_","module","exports","description","option","before","action","path","infile","options","startsWith","reject","exit","inStream","stringToStream","data","createReadStream","process","stdin","url","addSubdomain","realtimeOrigin","instance","explainStdin","reqOptions","json","addRequestHeaders","then","reqOptionsWithToken","Promise","resolve","pipe","post","err","res","body","info","statusCode","endsWith","consoleUrl","project","name","logSuccess","bold","key"],"mappings":"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","sourcesContent":["\"use strict\";\nvar { Command } = require(\"../command\");\nvar requireInstance = require(\"../requireInstance\");\nvar { requirePermissions } = require(\"../requirePermissions\");\nvar request = require(\"request\");\nvar api = require(\"../api\");\nvar responseToError = require(\"../responseToError\");\nvar { FirebaseError } = require(\"../error\");\nvar utils = require(\"../utils\");\nvar clc = require(\"cli-color\");\nvar logger = require(\"../logger\");\nvar fs = require(\"fs\");\nvar _ = require(\"lodash\");\nmodule.exports = new Command(\"database:push <path> [infile]\")\n    .description(\"add a new JSON object to a list of data in your Firebase\")\n    .option(\"-d, --data <data>\", \"specify escaped JSON directly\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\")\n    .before(requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireInstance)\n    .action(function (path, infile, options) {\n    if (!_.startsWith(path, \"/\")) {\n        return utils.reject(\"Path must begin with /\", { exit: 1 });\n    }\n    var inStream = utils.stringToStream(options.data) || (infile ? fs.createReadStream(infile) : process.stdin);\n    var url = utils.addSubdomain(api.realtimeOrigin, options.instance) + path + \".json?\";\n    if (!infile && !options.data) {\n        utils.explainStdin();\n    }\n    var reqOptions = {\n        url: url,\n        json: true,\n    };\n    return api.addRequestHeaders(reqOptions).then(function (reqOptionsWithToken) {\n        return new Promise(function (resolve, reject) {\n            inStream.pipe(request.post(reqOptionsWithToken, function (err, res, body) {\n                logger.info();\n                if (err) {\n                    return reject(new FirebaseError(\"Unexpected error while pushing data\", {\n                        exit: 2,\n                    }));\n                }\n                else if (res.statusCode >= 400) {\n                    return reject(responseToError(res, body));\n                }\n                if (!_.endsWith(path, \"/\")) {\n                    path += \"/\";\n                }\n                var consoleUrl = utils.consoleUrl(options.project, \"/database/data\" + path + body.name);\n                utils.logSuccess(\"Data pushed successfully\");\n                logger.info();\n                logger.info(clc.bold(\"View data at:\"), consoleUrl);\n                return resolve({ key: body.name });\n            }));\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}