{"ast":null,"code":"\"use strict\";\n\nvar clc = require(\"cli-color\");\n\nvar autoAuth = require(\"google-auto-auth\");\n\nvar api = require(\"./api\");\n\nvar configstore = require(\"./configstore\");\n\nvar _require = require(\"./error\"),\n    FirebaseError = _require.FirebaseError;\n\nvar logger = require(\"./logger\");\n\nvar utils = require(\"./utils\");\n\nvar scopes = require(\"./scopes\");\n\nvar AUTH_ERROR = new FirebaseError(\"Command requires authentication, please run \" + clc.bold(\"firebase login\"));\n\nfunction _autoAuth(options, authScopes) {\n  return new Promise(function (resolve, reject) {\n    logger.debug(\"> attempting to authenticate via app default credentials\");\n    autoAuth({\n      scopes: authScopes\n    }).getToken(function (err, token) {\n      if (err) {\n        logger.debug(\"! auto-auth error:\", err.message);\n        logger.debug(\"> no credentials could be found or automatically retrieved\");\n        return reject(AUTH_ERROR);\n      }\n\n      logger.debug(token);\n      logger.debug(\"> retrieved access token via default credentials\");\n      api.setAccessToken(token);\n      resolve();\n    });\n  });\n}\n\nmodule.exports = function (options) {\n  api.setScopes([scopes.CLOUD_PLATFORM, scopes.FIREBASE_PLATFORM]);\n  options.authScopes = api.getScopes();\n  var tokens = configstore.get(\"tokens\");\n  var user = configstore.get(\"user\");\n  var tokenOpt = utils.getInheritedOption(options, \"token\");\n\n  if (tokenOpt) {\n    logger.debug(\"> authorizing via --token option\");\n  } else if (process.env.FIREBASE_TOKEN) {\n    logger.debug(\"> authorizing via FIREBASE_TOKEN environment variable\");\n  } else if (user) {\n    logger.debug(\"> authorizing via signed-in user\");\n  } else {\n    return _autoAuth(options, options.authScopes);\n  }\n\n  tokenOpt = tokenOpt || process.env.FIREBASE_TOKEN;\n\n  if (tokenOpt) {\n    api.setRefreshToken(tokenOpt);\n    return Promise.resolve();\n  }\n\n  if (!user || !tokens) {\n    return new Promise(function (resolve, reject) {\n      if (configstore.get(\"session\")) {\n        return reject(new FirebaseError(\"This version of Firebase CLI requires reauthentication.\\n\\nPlease run \" + clc.bold(\"firebase login\") + \" to regain access.\"));\n      }\n\n      return reject(AUTH_ERROR);\n    });\n  }\n\n  options.user = user;\n  options.tokens = tokens;\n  api.setRefreshToken(tokens.refresh_token);\n  return Promise.resolve();\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/requireAuth.js"],"names":["clc","require","autoAuth","api","configstore","FirebaseError","logger","utils","scopes","AUTH_ERROR","bold","_autoAuth","options","authScopes","Promise","resolve","reject","debug","getToken","err","token","message","setAccessToken","module","exports","setScopes","CLOUD_PLATFORM","FIREBASE_PLATFORM","getScopes","tokens","get","user","tokenOpt","getInheritedOption","process","env","FIREBASE_TOKEN","setRefreshToken","refresh_token"],"mappings":"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","sourcesContent":["\"use strict\";\nvar clc = require(\"cli-color\");\nvar autoAuth = require(\"google-auto-auth\");\nvar api = require(\"./api\");\nvar configstore = require(\"./configstore\");\nvar { FirebaseError } = require(\"./error\");\nvar logger = require(\"./logger\");\nvar utils = require(\"./utils\");\nvar scopes = require(\"./scopes\");\nvar AUTH_ERROR = new FirebaseError(\"Command requires authentication, please run \" + clc.bold(\"firebase login\"));\nfunction _autoAuth(options, authScopes) {\n    return new Promise(function (resolve, reject) {\n        logger.debug(\"> attempting to authenticate via app default credentials\");\n        autoAuth({ scopes: authScopes }).getToken(function (err, token) {\n            if (err) {\n                logger.debug(\"! auto-auth error:\", err.message);\n                logger.debug(\"> no credentials could be found or automatically retrieved\");\n                return reject(AUTH_ERROR);\n            }\n            logger.debug(token);\n            logger.debug(\"> retrieved access token via default credentials\");\n            api.setAccessToken(token);\n            resolve();\n        });\n    });\n}\nmodule.exports = function (options) {\n    api.setScopes([scopes.CLOUD_PLATFORM, scopes.FIREBASE_PLATFORM]);\n    options.authScopes = api.getScopes();\n    var tokens = configstore.get(\"tokens\");\n    var user = configstore.get(\"user\");\n    var tokenOpt = utils.getInheritedOption(options, \"token\");\n    if (tokenOpt) {\n        logger.debug(\"> authorizing via --token option\");\n    }\n    else if (process.env.FIREBASE_TOKEN) {\n        logger.debug(\"> authorizing via FIREBASE_TOKEN environment variable\");\n    }\n    else if (user) {\n        logger.debug(\"> authorizing via signed-in user\");\n    }\n    else {\n        return _autoAuth(options, options.authScopes);\n    }\n    tokenOpt = tokenOpt || process.env.FIREBASE_TOKEN;\n    if (tokenOpt) {\n        api.setRefreshToken(tokenOpt);\n        return Promise.resolve();\n    }\n    if (!user || !tokens) {\n        return new Promise(function (resolve, reject) {\n            if (configstore.get(\"session\")) {\n                return reject(new FirebaseError(\"This version of Firebase CLI requires reauthentication.\\n\\nPlease run \" +\n                    clc.bold(\"firebase login\") +\n                    \" to regain access.\"));\n            }\n            return reject(AUTH_ERROR);\n        });\n    }\n    options.user = user;\n    options.tokens = tokens;\n    api.setRefreshToken(tokens.refresh_token);\n    return Promise.resolve();\n};\n"]},"metadata":{},"sourceType":"script"}