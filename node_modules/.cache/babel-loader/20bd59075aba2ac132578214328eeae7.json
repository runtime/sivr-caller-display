{"ast":null,"code":"/*\n * daily-rotate-file.js: Transport for outputting to a local log file\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\nvar events = require('events'),\n    fs = require('fs'),\n    path = require('path'),\n    util = require('util'),\n    common = require('../common'),\n    Transport = require('./transport').Transport,\n    Stream = require('stream').Stream,\n    os = require('os'); //\n// ### function DailyRotateFile (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the DailyRotateFile transport object responsible\n// for persisting log messages and metadata to one or more files.\n//\n\n\nvar DailyRotateFile = exports.DailyRotateFile = function (options) {\n  Transport.call(this, options); //\n  // Helper function which throws an `Error` in the event\n  // that any of the rest of the arguments is present in `options`.\n  //\n\n  function throwIf(target\n  /*, illegal... */\n  ) {\n    Array.prototype.slice.call(arguments, 1).forEach(function (name) {\n      if (options[name]) {\n        throw new Error('Cannot set ' + name + ' and ' + target + 'together');\n      }\n    });\n  }\n\n  if (options.filename || options.dirname) {\n    throwIf('filename or dirname', 'stream');\n    this._basename = this.filename = options.filename ? path.basename(options.filename) : 'winston.log';\n    this.dirname = options.dirname || path.dirname(options.filename);\n    this.options = options.options || {\n      flags: 'a'\n    }; //\n    // \"24 bytes\" is maybe a good value for logging lines.\n    //\n\n    this.options.highWaterMark = this.options.highWaterMark || 24;\n  } else if (options.stream) {\n    throwIf('stream', 'filename', 'maxsize');\n    this._stream = options.stream;\n\n    this._stream.on('error', function (error) {\n      self.emit('error', error);\n    }); //\n    // We need to listen for drain events when\n    // write() returns false. This can make node\n    // mad at times.\n    //\n\n\n    this._stream.setMaxListeners(Infinity);\n  } else {\n    throw new Error('Cannot log to file without filename or stream.');\n  }\n\n  this.json = options.json !== false;\n  this.colorize = options.colorize || false;\n  this.maxsize = options.maxsize || null;\n  this.maxFiles = options.maxFiles || null;\n  this.label = options.label || null;\n  this.prettyPrint = options.prettyPrint || false;\n  this.showLevel = options.showLevel === undefined ? true : options.showLevel;\n  this.timestamp = options.timestamp != null ? options.timestamp : true;\n  this.datePattern = options.datePattern != null ? options.datePattern : '.yyyy-MM-dd';\n  this.depth = options.depth || null;\n  this.eol = options.eol || os.EOL;\n  this.maxRetries = options.maxRetries || 2;\n\n  if (this.json) {\n    this.stringify = options.stringify;\n  } //\n  // Internal state variables representing the number\n  // of files this instance has created and the current\n  // size (in bytes) of the current logfile.\n  //\n\n\n  this._size = 0;\n  this._created = 0;\n  this._buffer = [];\n  this._draining = false;\n  this._failures = 0;\n  var now = new Date();\n  this._year = now.getFullYear();\n  this._month = now.getMonth();\n  this._date = now.getDate();\n  this._hour = now.getHours();\n  this._minute = now.getMinutes();\n\n  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhM])\\1?/g,\n      pad = function (val, len) {\n    val = String(val);\n    len = len || 2;\n\n    while (val.length < len) val = \"0\" + val;\n\n    return val;\n  };\n\n  this.getFormattedDate = function () {\n    var flags = {\n      yy: String(this._year).slice(2),\n      yyyy: this._year,\n      M: this._month + 1,\n      MM: pad(this._month + 1),\n      d: this._date,\n      dd: pad(this._date),\n      H: this._hour,\n      HH: pad(this._hour),\n      m: this._minute,\n      mm: pad(this._minute)\n    };\n    return this.datePattern.replace(token, function ($0) {\n      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n    });\n  };\n}; //\n// Inherit from `winston.Transport`.\n//\n\n\nutil.inherits(DailyRotateFile, Transport); //\n// Expose the name of this Transport on the prototype\n//\n\nDailyRotateFile.prototype.name = 'dailyRotateFile'; //\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\n\nDailyRotateFile.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  } //\n  // If failures exceeds maxRetries then we can't access the\n  // stream. In this case we need to perform a noop and return\n  // an error.\n  //\n\n\n  if (this._failures >= this.maxRetries) {\n    return callback(new Error('Transport is in a failed state.'));\n  }\n\n  var self = this;\n  var output = common.log({\n    level: level,\n    message: msg,\n    meta: meta,\n    json: this.json,\n    colorize: this.colorize,\n    prettyPrint: this.prettyPrint,\n    timestamp: this.timestamp,\n    label: this.label,\n    stringify: this.stringify,\n    showLevel: this.showLevel,\n    depth: this.depth,\n    formatter: this.formatter,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  }) + this.eol;\n  this._size += output.length;\n\n  if (!this.filename) {\n    //\n    // If there is no `filename` on this instance then it was configured\n    // with a raw `WriteableStream` instance and we should not perform any\n    // size restrictions.\n    //\n    this._write(output, callback);\n\n    this._lazyDrain();\n  } else {\n    this.open(function (err) {\n      if (err) {\n        //\n        // If there was an error enqueue the message\n        //\n        return self._buffer.push([output, callback]);\n      }\n\n      self._write(output, callback);\n\n      self._lazyDrain();\n    });\n  }\n}; //\n// ### function _write (data, cb)\n// #### @data {String|Buffer} Data to write to the instance's stream.\n// #### @cb {function} Continuation to respond to when complete.\n// Write to the stream, ensure execution of a callback on completion.\n//\n\n\nDailyRotateFile.prototype._write = function (data, callback) {\n  // If this is a file write stream, we could use the builtin\n  // callback functionality, however, the stream is not guaranteed\n  // to be an fs.WriteStream.\n  var ret = this._stream.write(data);\n\n  if (!callback) return;\n\n  if (ret === false) {\n    return this._stream.once('drain', function () {\n      callback(null, true);\n    });\n  }\n\n  callback(null, true);\n}; //\n// ### function query (options, callback)\n// #### @options {Object} Loggly-like query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Query the transport. Options object is optional.\n//\n\n\nDailyRotateFile.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  } // TODO when maxfilesize rotate occurs\n\n\n  var file = path.join(this.dirname, this._basename + this.getFormattedDate()),\n      options = this.normalizeQuery(options),\n      buff = '',\n      results = [],\n      row = 0;\n  var stream = fs.createReadStream(file, {\n    encoding: 'utf8'\n  });\n  stream.on('error', function (err) {\n    if (stream.readable) {\n      stream.destroy();\n    }\n\n    if (!callback) return;\n    return err.code !== 'ENOENT' ? callback(err) : callback(null, results);\n  });\n  stream.on('data', function (data) {\n    var data = (buff + data).split(/\\n+/),\n        l = data.length - 1,\n        i = 0;\n\n    for (; i < l; i++) {\n      if (!options.start || row >= options.start) {\n        add(data[i]);\n      }\n\n      row++;\n    }\n\n    buff = data[l];\n  });\n  stream.on('close', function () {\n    if (buff) add(buff, true);\n\n    if (options.order === 'desc') {\n      results = results.reverse();\n    }\n\n    if (callback) callback(null, results);\n  });\n\n  function add(buff, attempt) {\n    try {\n      var log = JSON.parse(buff);\n      if (check(log)) push(log);\n    } catch (e) {\n      if (!attempt) {\n        stream.emit('error', e);\n      }\n    }\n  }\n\n  function push(log) {\n    if (options.rows && results.length >= options.rows) {\n      if (stream.readable) {\n        stream.destroy();\n      }\n\n      return;\n    }\n\n    if (options.fields) {\n      var obj = {};\n      options.fields.forEach(function (key) {\n        obj[key] = log[key];\n      });\n      log = obj;\n    }\n\n    results.push(log);\n  }\n\n  function check(log) {\n    if (!log) return;\n    if (typeof log !== 'object') return;\n    var time = new Date(log.timestamp);\n\n    if (options.from && time < options.from || options.until && time > options.until) {\n      return;\n    }\n\n    return true;\n  }\n}; //\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for this transport. Options object is optional.\n//\n\n\nDailyRotateFile.prototype.stream = function (options) {\n  var file = path.join(this.dirname, this._basename + this.getFormattedDate()),\n      options = options || {},\n      stream = new Stream();\n  var tail = {\n    file: file,\n    start: options.start\n  };\n  stream.destroy = common.tailFile(tail, function (err, line) {\n    if (err) {\n      return stream.emit('error', err);\n    }\n\n    try {\n      stream.emit('data', line);\n      line = JSON.parse(line);\n      stream.emit('log', line);\n    } catch (e) {\n      stream.emit('error', e);\n    }\n  });\n\n  if (stream.resume) {\n    stream.resume();\n  }\n\n  return stream;\n}; //\n// ### function open (callback)\n// #### @callback {function} Continuation to respond to when complete\n// Checks to see if a new file needs to be created based on the `maxsize`\n// (if any) and the current size of the file used.\n//\n\n\nDailyRotateFile.prototype.open = function (callback) {\n  var now = new Date();\n\n  if (this.opening) {\n    //\n    // If we are already attempting to open the next\n    // available file then respond with a value indicating\n    // that the message should be buffered.\n    //\n    return callback(true);\n  } else if (!this._stream || this.maxsize && this._size >= this.maxsize || this._year < now.getFullYear() || this._month < now.getMonth() || this._date < now.getDate() || this._hour < now.getHours() || this._minute < now.getMinutes()) {\n    //\n    // If we dont have a stream or have exceeded our size, then create\n    // the next stream and respond with a value indicating that\n    // the message should be buffered.\n    //\n    callback(true);\n    return this._createStream();\n  } //\n  // Otherwise we have a valid (and ready) stream.\n  //\n\n\n  callback();\n}; //\n// ### function close ()\n// Closes the stream associated with this instance.\n//\n\n\nDailyRotateFile.prototype.close = function () {\n  var self = this;\n\n  if (this._stream) {\n    this._stream.end();\n\n    this._stream.destroySoon();\n\n    this._stream.once('drain', function () {\n      self.emit('flush');\n      self.emit('closed');\n    });\n  }\n}; //\n// ### function flush ()\n// Flushes any buffered messages to the current `stream`\n// used by this instance.\n//\n\n\nDailyRotateFile.prototype.flush = function () {\n  var self = this; //\n  // Iterate over the `_buffer` of enqueued messaged\n  // and then write them to the newly created stream.\n  //\n\n  this._buffer.forEach(function (item) {\n    var str = item[0],\n        callback = item[1];\n    process.nextTick(function () {\n      self._write(str, callback);\n\n      self._size += str.length;\n    });\n  }); //\n  // Quickly truncate the `_buffer` once the write operations\n  // have been started\n  //\n\n\n  self._buffer.length = 0; //\n  // When the stream has drained we have flushed\n  // our buffer.\n  //\n\n  self._stream.once('drain', function () {\n    self.emit('flush');\n    self.emit('logged');\n  });\n}; //\n// ### @private function _createStream ()\n// Attempts to open the next appropriate file for this instance\n// based on the common state (such as `maxsize` and `_basename`).\n//\n\n\nDailyRotateFile.prototype._createStream = function () {\n  var self = this;\n  this.opening = true;\n\n  (function checkFile(target) {\n    var fullname = path.join(self.dirname, target); //\n    // Creates the `WriteStream` and then flushes any\n    // buffered messages.\n    //\n\n    function createAndFlush(size) {\n      if (self._stream) {\n        self._stream.end();\n\n        self._stream.destroySoon();\n      }\n\n      self._size = size;\n      self.filename = target;\n      self._stream = fs.createWriteStream(fullname, self.options);\n\n      self._stream.on('error', function (error) {\n        if (self._failures < self.maxRetries) {\n          self._createStream();\n\n          self._failures++;\n        } else {\n          self.emit('error', error);\n        }\n      }); //\n      // We need to listen for drain events when\n      // write() returns false. This can make node\n      // mad at times.\n      //\n\n\n      self._stream.setMaxListeners(Infinity); //\n      // When the current stream has finished flushing\n      // then we can be sure we have finished opening\n      // and thus can emit the `open` event.\n      //\n\n\n      self.once('flush', function () {\n        self.opening = false;\n        self.emit('open', fullname);\n      }); //\n      // Remark: It is possible that in the time it has taken to find the\n      // next logfile to be written more data than `maxsize` has been buffered,\n      // but for sensible limits (10s - 100s of MB) this seems unlikely in less\n      // than one second.\n      //\n\n      self.flush();\n    }\n\n    fs.stat(fullname, function (err, stats) {\n      if (err) {\n        if (err.code !== 'ENOENT') {\n          return self.emit('error', err);\n        }\n\n        return createAndFlush(0);\n      }\n\n      if (!stats || self.maxsize && stats.size >= self.maxsize) {\n        //\n        // If `stats.size` is greater than the `maxsize` for\n        // this instance then try again\n        //\n        return checkFile(self._getFile(true));\n      }\n\n      var now = new Date();\n\n      if (self._year < now.getFullYear() || self._month < now.getMonth() || self._date < now.getDate() || self._hour < now.getHours() || self._minute < now.getMinutes()) {\n        self._year = now.getFullYear();\n        self._month = now.getMonth();\n        self._date = now.getDate();\n        self._hour = now.getHours();\n        self._minute = now.getMinutes();\n        self._created = 0;\n        return checkFile(self._getFile());\n      }\n\n      createAndFlush(stats.size);\n    });\n  })(this._getFile());\n}; //\n// ### @private function _getFile ()\n// Gets the next filename to use for this instance\n// in the case that log filesizes are being capped.\n//\n\n\nDailyRotateFile.prototype._getFile = function (inc) {\n  var self = this,\n      filename = this._basename + this.getFormattedDate(),\n      remaining;\n\n  if (inc) {\n    //\n    // Increment the number of files created or\n    // checked by this instance.\n    //\n    // Check for maxFiles option and delete file\n    if (this.maxFiles && this._created >= this.maxFiles - 1) {\n      remaining = this._created - (this.maxFiles - 1);\n\n      if (remaining === 0) {\n        fs.unlinkSync(path.join(this.dirname, filename));\n      } else {\n        fs.unlinkSync(path.join(this.dirname, filename + '.' + remaining));\n      }\n    }\n\n    this._created += 1;\n  }\n\n  return this._created ? filename + '.' + this._created : filename;\n}; //\n// ### @private function _lazyDrain ()\n// Lazily attempts to emit the `logged` event when `this.stream` has\n// drained. This is really just a simple mutex that only works because\n// Node.js is single-threaded.\n//\n\n\nDailyRotateFile.prototype._lazyDrain = function () {\n  var self = this;\n\n  if (!this._draining && this._stream) {\n    this._draining = true;\n\n    this._stream.once('drain', function () {\n      this._draining = false;\n      self.emit('logged');\n    });\n  }\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/winston/lib/winston/transports/daily-rotate-file.js"],"names":["events","require","fs","path","util","common","Transport","Stream","os","DailyRotateFile","exports","options","call","throwIf","target","Array","prototype","slice","arguments","forEach","name","Error","filename","dirname","_basename","basename","flags","highWaterMark","stream","_stream","on","error","self","emit","setMaxListeners","Infinity","json","colorize","maxsize","maxFiles","label","prettyPrint","showLevel","undefined","timestamp","datePattern","depth","eol","EOL","maxRetries","stringify","_size","_created","_buffer","_draining","_failures","now","Date","_year","getFullYear","_month","getMonth","_date","getDate","_hour","getHours","_minute","getMinutes","token","pad","val","len","String","length","getFormattedDate","yy","yyyy","M","MM","d","dd","H","HH","m","mm","replace","$0","inherits","log","level","msg","meta","callback","silent","output","message","formatter","humanReadableUnhandledException","_write","_lazyDrain","open","err","push","data","ret","write","once","query","file","join","normalizeQuery","buff","results","row","createReadStream","encoding","readable","destroy","code","split","l","i","start","add","order","reverse","attempt","JSON","parse","check","e","rows","fields","obj","key","time","from","until","tail","tailFile","line","resume","opening","_createStream","close","end","destroySoon","flush","item","str","process","nextTick","checkFile","fullname","createAndFlush","size","createWriteStream","stat","stats","_getFile","inc","remaining","unlinkSync"],"mappings":"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","sourcesContent":["/*\n * daily-rotate-file.js: Transport for outputting to a local log file\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\n\nvar events = require('events'),\n    fs = require('fs'),\n    path = require('path'),\n    util = require('util'),\n    common = require('../common'),\n    Transport = require('./transport').Transport,\n    Stream = require('stream').Stream,\n    os = require('os');\n\n//\n// ### function DailyRotateFile (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the DailyRotateFile transport object responsible\n// for persisting log messages and metadata to one or more files.\n//\nvar DailyRotateFile = exports.DailyRotateFile = function (options) {\n  Transport.call(this, options);\n\n  //\n  // Helper function which throws an `Error` in the event\n  // that any of the rest of the arguments is present in `options`.\n  //\n  function throwIf (target /*, illegal... */) {\n    Array.prototype.slice.call(arguments, 1).forEach(function (name) {\n      if (options[name]) {\n        throw new Error('Cannot set ' + name + ' and ' + target + 'together');\n      }\n    });\n  }\n\n  if (options.filename || options.dirname) {\n    throwIf('filename or dirname', 'stream');\n    this._basename = this.filename = options.filename\n      ? path.basename(options.filename)\n      : 'winston.log';\n\n    this.dirname   = options.dirname || path.dirname(options.filename);\n    this.options   = options.options || { flags: 'a' };\n\n    //\n    // \"24 bytes\" is maybe a good value for logging lines.\n    //\n    this.options.highWaterMark = this.options.highWaterMark || 24;\n  }\n  else if (options.stream) {\n    throwIf('stream', 'filename', 'maxsize');\n    this._stream = options.stream;\n    this._stream.on('error', function(error){\n      self.emit('error', error);\n    });\n\n    //\n    // We need to listen for drain events when\n    // write() returns false. This can make node\n    // mad at times.\n    //\n    this._stream.setMaxListeners(Infinity);\n  }\n  else {\n    throw new Error('Cannot log to file without filename or stream.');\n  }\n\n  this.json        = options.json !== false;\n  this.colorize    = options.colorize    || false;\n  this.maxsize     = options.maxsize     || null;\n  this.maxFiles    = options.maxFiles    || null;\n  this.label       = options.label       || null;\n  this.prettyPrint = options.prettyPrint || false;\n  this.showLevel   = options.showLevel === undefined ? true : options.showLevel;\n  this.timestamp   = options.timestamp != null ? options.timestamp : true;\n  this.datePattern = options.datePattern != null ? options.datePattern : '.yyyy-MM-dd';\n  this.depth       = options.depth       || null;\n  this.eol         = options.eol || os.EOL;\n  this.maxRetries  = options.maxRetries || 2;\n\n  if (this.json) {\n    this.stringify = options.stringify;\n  }\n\n  //\n  // Internal state variables representing the number\n  // of files this instance has created and the current\n  // size (in bytes) of the current logfile.\n  //\n  this._size     = 0;\n  this._created  = 0;\n  this._buffer   = [];\n  this._draining = false;\n  this._failures = 0;\n\n  var now = new Date();\n  this._year   = now.getFullYear();\n  this._month  = now.getMonth();\n  this._date   = now.getDate();\n  this._hour   = now.getHours();\n  this._minute = now.getMinutes();\n\n  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhM])\\1?/g,\n      pad = function (val, len) {\n              val = String(val);\n              len = len || 2;\n              while (val.length < len) val = \"0\" + val;\n              return val;\n      };\n\n  this.getFormattedDate = function() {\n    var flags = {\n      yy:   String(this._year).slice(2),\n      yyyy: this._year,\n      M:    this._month + 1,\n      MM:   pad(this._month + 1),\n      d:    this._date,\n      dd:   pad(this._date),\n      H:    this._hour,\n      HH:   pad(this._hour),\n      m:    this._minute,\n      mm:   pad(this._minute)\n    };\n    return this.datePattern.replace(token, function ($0) {\n      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);\n    });\n  };\n};\n\n//\n// Inherit from `winston.Transport`.\n//\nutil.inherits(DailyRotateFile, Transport);\n\n//\n// Expose the name of this Transport on the prototype\n//\nDailyRotateFile.prototype.name = 'dailyRotateFile';\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nDailyRotateFile.prototype.log = function (level, msg, meta, callback) {\n  if (this.silent) {\n    return callback(null, true);\n  }\n\n  //\n  // If failures exceeds maxRetries then we can't access the\n  // stream. In this case we need to perform a noop and return\n  // an error.\n  //\n  if (this._failures >= this.maxRetries) {\n    return callback(new Error('Transport is in a failed state.'));\n  }\n\n  var self = this;\n\n  var output = common.log({\n    level:       level,\n    message:     msg,\n    meta:        meta,\n    json:        this.json,\n    colorize:    this.colorize,\n    prettyPrint: this.prettyPrint,\n    timestamp:   this.timestamp,\n    label:       this.label,\n    stringify:   this.stringify,\n    showLevel:   this.showLevel,\n    depth:       this.depth,\n    formatter:   this.formatter,\n    humanReadableUnhandledException: this.humanReadableUnhandledException\n  }) + this.eol;\n\n  this._size += output.length;\n\n  if (!this.filename) {\n    //\n    // If there is no `filename` on this instance then it was configured\n    // with a raw `WriteableStream` instance and we should not perform any\n    // size restrictions.\n    //\n    this._write(output, callback);\n    this._lazyDrain();\n  }\n  else {\n    this.open(function (err) {\n      if (err) {\n        //\n        // If there was an error enqueue the message\n        //\n        return self._buffer.push([output, callback]);\n      }\n\n      self._write(output, callback);\n      self._lazyDrain();\n    });\n  }\n};\n\n//\n// ### function _write (data, cb)\n// #### @data {String|Buffer} Data to write to the instance's stream.\n// #### @cb {function} Continuation to respond to when complete.\n// Write to the stream, ensure execution of a callback on completion.\n//\nDailyRotateFile.prototype._write = function(data, callback) {\n  // If this is a file write stream, we could use the builtin\n  // callback functionality, however, the stream is not guaranteed\n  // to be an fs.WriteStream.\n  var ret = this._stream.write(data);\n  if (!callback) return;\n  if (ret === false) {\n    return this._stream.once('drain', function() {\n      callback(null, true);\n    });\n  }\n  callback(null, true);\n};\n\n//\n// ### function query (options, callback)\n// #### @options {Object} Loggly-like query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Query the transport. Options object is optional.\n//\nDailyRotateFile.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  // TODO when maxfilesize rotate occurs\n  var file = path.join(this.dirname, this._basename + this.getFormattedDate()),\n      options = this.normalizeQuery(options),\n      buff = '',\n      results = [],\n      row = 0;\n\n  var stream = fs.createReadStream(file, {\n    encoding: 'utf8'\n  });\n\n  stream.on('error', function (err) {\n    if (stream.readable) {\n      stream.destroy();\n    }\n    if (!callback) return;\n    return err.code !== 'ENOENT'\n      ? callback(err)\n      : callback(null, results);\n  });\n\n  stream.on('data', function (data) {\n    var data = (buff + data).split(/\\n+/),\n        l = data.length - 1,\n        i = 0;\n\n    for (; i < l; i++) {\n      if (!options.start || row >= options.start) {\n        add(data[i]);\n      }\n      row++;\n    }\n\n    buff = data[l];\n  });\n\n  stream.on('close', function () {\n    if (buff) add(buff, true);\n    if (options.order === 'desc') {\n      results = results.reverse();\n    }\n    if (callback) callback(null, results);\n  });\n\n  function add(buff, attempt) {\n    try {\n      var log = JSON.parse(buff);\n      if (check(log)) push(log);\n    } catch (e) {\n      if (!attempt) {\n        stream.emit('error', e);\n      }\n    }\n  }\n\n  function push(log) {\n    if (options.rows && results.length >= options.rows) {\n      if (stream.readable) {\n        stream.destroy();\n      }\n      return;\n    }\n\n    if (options.fields) {\n      var obj = {};\n      options.fields.forEach(function (key) {\n        obj[key] = log[key];\n      });\n      log = obj;\n    }\n\n    results.push(log);\n  }\n\n  function check(log) {\n    if (!log) return;\n\n    if (typeof log !== 'object') return;\n\n    var time = new Date(log.timestamp);\n    if ((options.from && time < options.from)\n        || (options.until && time > options.until)) {\n      return;\n    }\n\n    return true;\n  }\n};\n\n//\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for this transport. Options object is optional.\n//\nDailyRotateFile.prototype.stream = function (options) {\n  var file = path.join(this.dirname, this._basename + this.getFormattedDate()),\n      options = options || {},\n      stream = new Stream;\n\n  var tail = {\n    file: file,\n    start: options.start\n  };\n\n  stream.destroy = common.tailFile(tail, function (err, line) {\n\n    if(err){\n      return stream.emit('error',err);\n    }\n\n    try {\n      stream.emit('data', line);\n      line = JSON.parse(line);\n      stream.emit('log', line);\n    } catch (e) {\n      stream.emit('error', e);\n    }\n  });\n\n  if(stream.resume){\n    stream.resume();\n  }\n\n  return stream;\n};\n\n//\n// ### function open (callback)\n// #### @callback {function} Continuation to respond to when complete\n// Checks to see if a new file needs to be created based on the `maxsize`\n// (if any) and the current size of the file used.\n//\nDailyRotateFile.prototype.open = function (callback) {\n  var now = new Date();\n  if (this.opening) {\n    //\n    // If we are already attempting to open the next\n    // available file then respond with a value indicating\n    // that the message should be buffered.\n    //\n    return callback(true);\n  }\n  else if (!this._stream || (this.maxsize && this._size >= this.maxsize) ||\n      (this._year < now.getFullYear() || this._month < now.getMonth() || this._date < now.getDate() || this._hour < now.getHours() || this._minute < now.getMinutes())) {\n    //\n    // If we dont have a stream or have exceeded our size, then create\n    // the next stream and respond with a value indicating that\n    // the message should be buffered.\n    //\n    callback(true);\n    return this._createStream();\n  }\n\n  //\n  // Otherwise we have a valid (and ready) stream.\n  //\n  callback();\n};\n\n//\n// ### function close ()\n// Closes the stream associated with this instance.\n//\nDailyRotateFile.prototype.close = function () {\n  var self = this;\n\n  if (this._stream) {\n    this._stream.end();\n    this._stream.destroySoon();\n\n    this._stream.once('drain', function () {\n      self.emit('flush');\n      self.emit('closed');\n    });\n  }\n};\n\n//\n// ### function flush ()\n// Flushes any buffered messages to the current `stream`\n// used by this instance.\n//\nDailyRotateFile.prototype.flush = function () {\n  var self = this;\n\n  //\n  // Iterate over the `_buffer` of enqueued messaged\n  // and then write them to the newly created stream.\n  //\n  this._buffer.forEach(function (item) {\n    var str = item[0],\n        callback = item[1];\n\n    process.nextTick(function () {\n      self._write(str, callback);\n      self._size += str.length;\n    });\n  });\n\n  //\n  // Quickly truncate the `_buffer` once the write operations\n  // have been started\n  //\n  self._buffer.length = 0;\n\n  //\n  // When the stream has drained we have flushed\n  // our buffer.\n  //\n  self._stream.once('drain', function () {\n    self.emit('flush');\n    self.emit('logged');\n  });\n};\n\n//\n// ### @private function _createStream ()\n// Attempts to open the next appropriate file for this instance\n// based on the common state (such as `maxsize` and `_basename`).\n//\nDailyRotateFile.prototype._createStream = function () {\n  var self = this;\n  this.opening = true;\n\n  (function checkFile (target) {\n    var fullname = path.join(self.dirname, target);\n\n    //\n    // Creates the `WriteStream` and then flushes any\n    // buffered messages.\n    //\n    function createAndFlush (size) {\n      if (self._stream) {\n        self._stream.end();\n        self._stream.destroySoon();\n      }\n\n      self._size = size;\n      self.filename = target;\n      self._stream = fs.createWriteStream(fullname, self.options);\n      self._stream.on('error', function(error){\n        if (self._failures < self.maxRetries) {\n          self._createStream();\n          self._failures++;\n        }\n        else {\n          self.emit('error', error);\n        }\n      });\n\n      //\n      // We need to listen for drain events when\n      // write() returns false. This can make node\n      // mad at times.\n      //\n      self._stream.setMaxListeners(Infinity);\n\n      //\n      // When the current stream has finished flushing\n      // then we can be sure we have finished opening\n      // and thus can emit the `open` event.\n      //\n      self.once('flush', function () {\n        self.opening = false;\n        self.emit('open', fullname);\n      });\n\n      //\n      // Remark: It is possible that in the time it has taken to find the\n      // next logfile to be written more data than `maxsize` has been buffered,\n      // but for sensible limits (10s - 100s of MB) this seems unlikely in less\n      // than one second.\n      //\n      self.flush();\n    }\n\n    fs.stat(fullname, function (err, stats) {\n      if (err) {\n        if (err.code !== 'ENOENT') {\n          return self.emit('error', err);\n        }\n\n        return createAndFlush(0);\n      }\n\n      if (!stats || (self.maxsize && stats.size >= self.maxsize)) {\n        //\n        // If `stats.size` is greater than the `maxsize` for\n        // this instance then try again\n        //\n        return checkFile(self._getFile(true));\n      }\n\n      var now = new Date();\n      if (self._year < now.getFullYear() || self._month < now.getMonth() || self._date < now.getDate() || self._hour < now.getHours() || self._minute < now.getMinutes()) {\n        self._year   = now.getFullYear();\n        self._month  = now.getMonth();\n        self._date   = now.getDate();\n        self._hour   = now.getHours();\n        self._minute = now.getMinutes();\n        self._created  = 0;\n        return checkFile(self._getFile());\n      }\n\n      createAndFlush(stats.size);\n    });\n  })(this._getFile());\n};\n\n//\n// ### @private function _getFile ()\n// Gets the next filename to use for this instance\n// in the case that log filesizes are being capped.\n//\nDailyRotateFile.prototype._getFile = function (inc) {\n  var self = this,\n      filename = this._basename + this.getFormattedDate(),\n      remaining;\n\n  if (inc) {\n    //\n    // Increment the number of files created or\n    // checked by this instance.\n    //\n    // Check for maxFiles option and delete file\n    if (this.maxFiles && (this._created >= (this.maxFiles - 1))) {\n      remaining = this._created - (this.maxFiles - 1);\n      if (remaining === 0) {\n        fs.unlinkSync(path.join(this.dirname, filename));\n      }\n      else {\n        fs.unlinkSync(path.join(this.dirname, filename + '.' + remaining));\n      }\n    }\n\n    this._created += 1;\n  }\n\n  return this._created\n    ? filename + '.' + this._created\n    : filename;\n};\n\n//\n// ### @private function _lazyDrain ()\n// Lazily attempts to emit the `logged` event when `this.stream` has\n// drained. This is really just a simple mutex that only works because\n// Node.js is single-threaded.\n//\nDailyRotateFile.prototype._lazyDrain = function () {\n  var self = this;\n\n  if (!this._draining && this._stream) {\n    this._draining = true;\n\n    this._stream.once('drain', function () {\n      this._draining = false;\n      self.emit('logged');\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"script"}