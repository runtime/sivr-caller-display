{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst types_1 = require(\"./types\");\n\nclass WorkQueue {\n  constructor(mode = types_1.FunctionsExecutionMode.AUTO) {\n    this.mode = mode;\n    this.queue = [];\n    this.workRunningCount = 0;\n\n    this.notifyQueue = () => {};\n\n    this.stopped = true;\n  }\n\n  submit(entry) {\n    this.queue.push(entry);\n    this.notifyQueue();\n    this.logState();\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.stopped) {\n        return;\n      }\n\n      this.stopped = false;\n\n      while (!this.stopped) {\n        if (!this.queue.length) {\n          yield new Promise(res => {\n            this.notifyQueue = res;\n          });\n        }\n\n        const workPromise = this.runNext();\n\n        if (this.mode === types_1.FunctionsExecutionMode.SEQUENTIAL) {\n          yield workPromise;\n        }\n      }\n    });\n  }\n\n  stop() {\n    this.stopped = true;\n  }\n\n  runNext() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const next = this.queue.shift();\n\n      if (next) {\n        this.workRunningCount++;\n        this.logState();\n\n        try {\n          yield next();\n        } catch (e) {\n          emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", e);\n        } finally {\n          this.workRunningCount--;\n          this.logState();\n        }\n      }\n    });\n  }\n\n  logState() {\n    emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"work-queue\", JSON.stringify({\n      queueLength: this.queue.length,\n      workRunningCount: this.workRunningCount\n    }));\n  }\n\n}\n\nexports.WorkQueue = WorkQueue;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/workQueue.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","emulatorLogger_1","require","types_1","WorkQueue","constructor","mode","FunctionsExecutionMode","AUTO","queue","workRunningCount","notifyQueue","stopped","submit","entry","push","logState","start","length","res","workPromise","runNext","SEQUENTIAL","stop","shift","EmulatorLogger","log","logLabeled","JSON","stringify","queueLength"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst types_1 = require(\"./types\");\nclass WorkQueue {\n    constructor(mode = types_1.FunctionsExecutionMode.AUTO) {\n        this.mode = mode;\n        this.queue = [];\n        this.workRunningCount = 0;\n        this.notifyQueue = () => { };\n        this.stopped = true;\n    }\n    submit(entry) {\n        this.queue.push(entry);\n        this.notifyQueue();\n        this.logState();\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.stopped) {\n                return;\n            }\n            this.stopped = false;\n            while (!this.stopped) {\n                if (!this.queue.length) {\n                    yield new Promise((res) => {\n                        this.notifyQueue = res;\n                    });\n                }\n                const workPromise = this.runNext();\n                if (this.mode === types_1.FunctionsExecutionMode.SEQUENTIAL) {\n                    yield workPromise;\n                }\n            }\n        });\n    }\n    stop() {\n        this.stopped = true;\n    }\n    runNext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const next = this.queue.shift();\n            if (next) {\n                this.workRunningCount++;\n                this.logState();\n                try {\n                    yield next();\n                }\n                catch (e) {\n                    emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", e);\n                }\n                finally {\n                    this.workRunningCount--;\n                    this.logState();\n                }\n            }\n        });\n    }\n    logState() {\n        emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"work-queue\", JSON.stringify({\n            queueLength: this.queue.length,\n            workRunningCount: this.workRunningCount,\n        }));\n    }\n}\nexports.WorkQueue = WorkQueue;\n"]},"metadata":{},"sourceType":"script"}