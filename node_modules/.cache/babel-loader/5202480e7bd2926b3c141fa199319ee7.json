{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst API = require(\"./indexes-api\");\n\nconst util = require(\"./util\");\n\nconst QUERY_SCOPE_SEQUENCE = [API.QueryScope.COLLECTION_GROUP, API.QueryScope.COLLECTION, undefined];\nconst ORDER_SEQUENCE = [API.Order.ASCENDING, API.Order.DESCENDING, undefined];\nconst ARRAY_CONFIG_SEQUENCE = [API.ArrayConfig.CONTAINS, undefined];\n\nfunction compareSpecIndex(a, b) {\n  if (a.collectionGroup !== b.collectionGroup) {\n    return a.collectionGroup.localeCompare(b.collectionGroup);\n  }\n\n  if (a.queryScope !== b.queryScope) {\n    return compareQueryScope(a.queryScope, b.queryScope);\n  }\n\n  return compareArrays(a.fields, b.fields, compareIndexField);\n}\n\nexports.compareSpecIndex = compareSpecIndex;\n\nfunction compareApiIndex(a, b) {\n  if (a.name && b.name) {\n    const aName = util.parseIndexName(a.name);\n    const bName = util.parseIndexName(b.name);\n\n    if (aName.collectionGroupId !== bName.collectionGroupId) {\n      return aName.collectionGroupId.localeCompare(bName.collectionGroupId);\n    }\n  }\n\n  if (a.queryScope !== b.queryScope) {\n    return compareQueryScope(a.queryScope, b.queryScope);\n  }\n\n  return compareArrays(a.fields, b.fields, compareIndexField);\n}\n\nexports.compareApiIndex = compareApiIndex;\n\nfunction compareApiField(a, b) {\n  const aName = util.parseFieldName(a.name);\n  const bName = util.parseFieldName(b.name);\n\n  if (aName.collectionGroupId !== bName.collectionGroupId) {\n    return aName.collectionGroupId.localeCompare(bName.collectionGroupId);\n  }\n\n  if (aName.fieldPath !== bName.fieldPath) {\n    return aName.fieldPath.localeCompare(bName.fieldPath);\n  }\n\n  return compareArraysSorted(a.indexConfig.indexes || [], b.indexConfig.indexes || [], compareApiIndex);\n}\n\nexports.compareApiField = compareApiField;\n\nfunction compareFieldOverride(a, b) {\n  if (a.collectionGroup !== b.collectionGroup) {\n    return a.collectionGroup.localeCompare(b.collectionGroup);\n  }\n\n  if (a.fieldPath !== b.fieldPath) {\n    return a.fieldPath.localeCompare(b.fieldPath);\n  }\n\n  return compareArraysSorted(a.indexes, b.indexes, compareFieldIndex);\n}\n\nexports.compareFieldOverride = compareFieldOverride;\n\nfunction compareIndexField(a, b) {\n  if (a.fieldPath !== b.fieldPath) {\n    return a.fieldPath.localeCompare(b.fieldPath);\n  }\n\n  if (a.order !== b.order) {\n    return compareOrder(a.order, b.order);\n  }\n\n  if (a.arrayConfig !== b.arrayConfig) {\n    return compareArrayConfig(a.arrayConfig, b.arrayConfig);\n  }\n\n  return 0;\n}\n\nfunction compareFieldIndex(a, b) {\n  if (a.queryScope !== b.queryScope) {\n    return compareQueryScope(a.queryScope, b.queryScope);\n  }\n\n  if (a.order !== b.order) {\n    return compareOrder(a.order, b.order);\n  }\n\n  if (a.arrayConfig !== b.arrayConfig) {\n    return compareArrayConfig(a.arrayConfig, b.arrayConfig);\n  }\n\n  return 0;\n}\n\nfunction compareQueryScope(a, b) {\n  return QUERY_SCOPE_SEQUENCE.indexOf(a) - QUERY_SCOPE_SEQUENCE.indexOf(b);\n}\n\nfunction compareOrder(a, b) {\n  return ORDER_SEQUENCE.indexOf(a) - ORDER_SEQUENCE.indexOf(b);\n}\n\nfunction compareArrayConfig(a, b) {\n  return ARRAY_CONFIG_SEQUENCE.indexOf(a) - ARRAY_CONFIG_SEQUENCE.indexOf(b);\n}\n\nfunction compareArrays(a, b, fn) {\n  const minFields = Math.min(a.length, b.length);\n\n  for (let i = 0; i < minFields; i++) {\n    const cmp = fn(a[i], b[i]);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n\n  return a.length - b.length;\n}\n\nfunction compareArraysSorted(a, b, fn) {\n  const aSorted = a.sort(fn);\n  const bSorted = b.sort(fn);\n  return compareArrays(aSorted, bSorted, fn);\n}","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/firestore/indexes-sort.js"],"names":["Object","defineProperty","exports","value","API","require","util","QUERY_SCOPE_SEQUENCE","QueryScope","COLLECTION_GROUP","COLLECTION","undefined","ORDER_SEQUENCE","Order","ASCENDING","DESCENDING","ARRAY_CONFIG_SEQUENCE","ArrayConfig","CONTAINS","compareSpecIndex","a","b","collectionGroup","localeCompare","queryScope","compareQueryScope","compareArrays","fields","compareIndexField","compareApiIndex","name","aName","parseIndexName","bName","collectionGroupId","compareApiField","parseFieldName","fieldPath","compareArraysSorted","indexConfig","indexes","compareFieldOverride","compareFieldIndex","order","compareOrder","arrayConfig","compareArrayConfig","indexOf","fn","minFields","Math","min","length","i","cmp","aSorted","sort","bSorted"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst API = require(\"./indexes-api\");\nconst util = require(\"./util\");\nconst QUERY_SCOPE_SEQUENCE = [\n    API.QueryScope.COLLECTION_GROUP,\n    API.QueryScope.COLLECTION,\n    undefined,\n];\nconst ORDER_SEQUENCE = [API.Order.ASCENDING, API.Order.DESCENDING, undefined];\nconst ARRAY_CONFIG_SEQUENCE = [API.ArrayConfig.CONTAINS, undefined];\nfunction compareSpecIndex(a, b) {\n    if (a.collectionGroup !== b.collectionGroup) {\n        return a.collectionGroup.localeCompare(b.collectionGroup);\n    }\n    if (a.queryScope !== b.queryScope) {\n        return compareQueryScope(a.queryScope, b.queryScope);\n    }\n    return compareArrays(a.fields, b.fields, compareIndexField);\n}\nexports.compareSpecIndex = compareSpecIndex;\nfunction compareApiIndex(a, b) {\n    if (a.name && b.name) {\n        const aName = util.parseIndexName(a.name);\n        const bName = util.parseIndexName(b.name);\n        if (aName.collectionGroupId !== bName.collectionGroupId) {\n            return aName.collectionGroupId.localeCompare(bName.collectionGroupId);\n        }\n    }\n    if (a.queryScope !== b.queryScope) {\n        return compareQueryScope(a.queryScope, b.queryScope);\n    }\n    return compareArrays(a.fields, b.fields, compareIndexField);\n}\nexports.compareApiIndex = compareApiIndex;\nfunction compareApiField(a, b) {\n    const aName = util.parseFieldName(a.name);\n    const bName = util.parseFieldName(b.name);\n    if (aName.collectionGroupId !== bName.collectionGroupId) {\n        return aName.collectionGroupId.localeCompare(bName.collectionGroupId);\n    }\n    if (aName.fieldPath !== bName.fieldPath) {\n        return aName.fieldPath.localeCompare(bName.fieldPath);\n    }\n    return compareArraysSorted(a.indexConfig.indexes || [], b.indexConfig.indexes || [], compareApiIndex);\n}\nexports.compareApiField = compareApiField;\nfunction compareFieldOverride(a, b) {\n    if (a.collectionGroup !== b.collectionGroup) {\n        return a.collectionGroup.localeCompare(b.collectionGroup);\n    }\n    if (a.fieldPath !== b.fieldPath) {\n        return a.fieldPath.localeCompare(b.fieldPath);\n    }\n    return compareArraysSorted(a.indexes, b.indexes, compareFieldIndex);\n}\nexports.compareFieldOverride = compareFieldOverride;\nfunction compareIndexField(a, b) {\n    if (a.fieldPath !== b.fieldPath) {\n        return a.fieldPath.localeCompare(b.fieldPath);\n    }\n    if (a.order !== b.order) {\n        return compareOrder(a.order, b.order);\n    }\n    if (a.arrayConfig !== b.arrayConfig) {\n        return compareArrayConfig(a.arrayConfig, b.arrayConfig);\n    }\n    return 0;\n}\nfunction compareFieldIndex(a, b) {\n    if (a.queryScope !== b.queryScope) {\n        return compareQueryScope(a.queryScope, b.queryScope);\n    }\n    if (a.order !== b.order) {\n        return compareOrder(a.order, b.order);\n    }\n    if (a.arrayConfig !== b.arrayConfig) {\n        return compareArrayConfig(a.arrayConfig, b.arrayConfig);\n    }\n    return 0;\n}\nfunction compareQueryScope(a, b) {\n    return QUERY_SCOPE_SEQUENCE.indexOf(a) - QUERY_SCOPE_SEQUENCE.indexOf(b);\n}\nfunction compareOrder(a, b) {\n    return ORDER_SEQUENCE.indexOf(a) - ORDER_SEQUENCE.indexOf(b);\n}\nfunction compareArrayConfig(a, b) {\n    return ARRAY_CONFIG_SEQUENCE.indexOf(a) - ARRAY_CONFIG_SEQUENCE.indexOf(b);\n}\nfunction compareArrays(a, b, fn) {\n    const minFields = Math.min(a.length, b.length);\n    for (let i = 0; i < minFields; i++) {\n        const cmp = fn(a[i], b[i]);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    return a.length - b.length;\n}\nfunction compareArraysSorted(a, b, fn) {\n    const aSorted = a.sort(fn);\n    const bSorted = b.sort(fn);\n    return compareArrays(aSorted, bSorted, fn);\n}\n"]},"metadata":{},"sourceType":"script"}