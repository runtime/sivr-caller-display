{"ast":null,"code":"'use strict';\n\nvar extend = require('extend');\n\nvar request = require('retry-request');\n\nvar BASE_URL = 'http://metadata.google.internal/computeMetadata/v1';\nvar gcpMetadata = {\n  _buildMetadataAccessor: function (type) {\n    return function (options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (typeof options === 'string') {\n        options = {\n          property: options\n        };\n      }\n\n      var property = options.property ? '/' + options.property : '';\n      var reqOpts = extend(true, {\n        uri: BASE_URL + '/' + type + property,\n        headers: {\n          'Metadata-Flavor': 'Google'\n        }\n      }, options);\n      delete reqOpts.property;\n      return request(reqOpts, function (err, res, body) {\n        if (err) {\n          callback(err);\n        } else if (!res) {\n          callback(new Error('Invalid response from metadata service'));\n        } else if (res.statusCode !== 200) {\n          callback(new Error('Unsuccessful response status code'), res);\n        } else {\n          callback(null, res, body);\n        }\n      });\n    };\n  }\n};\ngcpMetadata.instance = gcpMetadata._buildMetadataAccessor('instance');\ngcpMetadata.project = gcpMetadata._buildMetadataAccessor('project');\nmodule.exports = gcpMetadata;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/google-auto-auth/node_modules/gcp-metadata/index.js"],"names":["extend","require","request","BASE_URL","gcpMetadata","_buildMetadataAccessor","type","options","callback","property","reqOpts","uri","headers","err","res","body","Error","statusCode","instance","project","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAArB;;AAEA,IAAIE,QAAQ,GAAG,oDAAf;AAEA,IAAIC,WAAW,GAAG;AAChBC,EAAAA,sBAAsB,EAAE,UAAUC,IAAV,EAAgB;AACtC,WAAO,UAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AAClC,UAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,QAAAA,QAAQ,GAAGD,OAAX;AACAA,QAAAA,OAAO,GAAG,EAAV;AACD;;AAED,UAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,QAAAA,OAAO,GAAG;AACRE,UAAAA,QAAQ,EAAEF;AADF,SAAV;AAGD;;AAED,UAAIE,QAAQ,GAAGF,OAAO,CAACE,QAAR,GAAmB,MAAMF,OAAO,CAACE,QAAjC,GAA4C,EAA3D;AAEA,UAAIC,OAAO,GAAGV,MAAM,CAAC,IAAD,EAAO;AACzBW,QAAAA,GAAG,EAAER,QAAQ,GAAG,GAAX,GAAiBG,IAAjB,GAAwBG,QADJ;AAEzBG,QAAAA,OAAO,EAAE;AAAE,6BAAmB;AAArB;AAFgB,OAAP,EAGjBL,OAHiB,CAApB;AAIA,aAAOG,OAAO,CAACD,QAAf;AAEA,aAAOP,OAAO,CAACQ,OAAD,EAAU,UAAUG,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChD,YAAIF,GAAJ,EAAS;AACPL,UAAAA,QAAQ,CAACK,GAAD,CAAR;AACD,SAFD,MAEO,IAAI,CAACC,GAAL,EAAU;AACfN,UAAAA,QAAQ,CAAC,IAAIQ,KAAJ,CAAU,wCAAV,CAAD,CAAR;AACD,SAFM,MAEA,IAAIF,GAAG,CAACG,UAAJ,KAAmB,GAAvB,EAA4B;AACjCT,UAAAA,QAAQ,CAAC,IAAIQ,KAAJ,CAAU,mCAAV,CAAD,EAAiDF,GAAjD,CAAR;AACD,SAFM,MAEA;AACLN,UAAAA,QAAQ,CAAC,IAAD,EAAOM,GAAP,EAAYC,IAAZ,CAAR;AACD;AACF,OAVa,CAAd;AAWD,KA/BD;AAgCD;AAlCe,CAAlB;AAqCAX,WAAW,CAACc,QAAZ,GAAuBd,WAAW,CAACC,sBAAZ,CAAmC,UAAnC,CAAvB;AACAD,WAAW,CAACe,OAAZ,GAAsBf,WAAW,CAACC,sBAAZ,CAAmC,SAAnC,CAAtB;AAEAe,MAAM,CAACC,OAAP,GAAiBjB,WAAjB","sourcesContent":["'use strict'\n\nvar extend = require('extend')\nvar request = require('retry-request')\n\nvar BASE_URL = 'http://metadata.google.internal/computeMetadata/v1'\n\nvar gcpMetadata = {\n  _buildMetadataAccessor: function (type) {\n    return function (options, callback) {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      if (typeof options === 'string') {\n        options = {\n          property: options\n        }\n      }\n\n      var property = options.property ? '/' + options.property : ''\n\n      var reqOpts = extend(true, {\n        uri: BASE_URL + '/' + type + property,\n        headers: { 'Metadata-Flavor': 'Google' }\n      }, options)\n      delete reqOpts.property\n\n      return request(reqOpts, function (err, res, body) {\n        if (err) {\n          callback(err)\n        } else if (!res) {\n          callback(new Error('Invalid response from metadata service'))\n        } else if (res.statusCode !== 200) {\n          callback(new Error('Unsuccessful response status code'), res)\n        } else {\n          callback(null, res, body)\n        }\n      })\n    }\n  }\n}\n\ngcpMetadata.instance = gcpMetadata._buildMetadataAccessor('instance')\ngcpMetadata.project = gcpMetadata._buildMetadataAccessor('project')\n\nmodule.exports = gcpMetadata\n\n"]},"metadata":{},"sourceType":"script"}