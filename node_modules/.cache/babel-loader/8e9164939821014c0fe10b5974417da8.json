{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst types_1 = require(\"./types\");\n\nconst error_1 = require(\"../error\");\n\nconst utils = require(\"../utils\");\n\nconst controller = require(\"./controller\");\n\nclass EmulatorRegistry {\n  static start(instance) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.isRunning(instance.getName())) {\n        throw new error_1.FirebaseError(`Emulator ${instance.getName()} is already running!`, {});\n      }\n\n      yield instance.start();\n      const info = instance.getInfo();\n      yield controller.waitForPortClosed(info.port, info.host);\n      this.set(instance.getName(), instance);\n      utils.logLabeledSuccess(instance.getName(), `Emulator started at ${clc.bold.underline(`http://${info.host}:${info.port}`)}`);\n    });\n  }\n\n  static stop(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const instance = this.get(name);\n\n      if (!instance) {\n        return;\n      }\n\n      yield instance.stop();\n      this.clear(instance.getName());\n    });\n  }\n\n  static stopAll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const name of this.listRunning()) {\n        yield this.stop(name);\n      }\n    });\n  }\n\n  static isRunning(emulator) {\n    const instance = this.INSTANCES.get(emulator);\n    return instance !== undefined;\n  }\n\n  static listRunning() {\n    return types_1.ALL_EMULATORS.filter(name => this.isRunning(name));\n  }\n\n  static get(emulator) {\n    return this.INSTANCES.get(emulator);\n  }\n\n  static getPort(emulator) {\n    const instance = this.INSTANCES.get(emulator);\n\n    if (!instance) {\n      return undefined;\n    }\n\n    return instance.getInfo().port;\n  }\n\n  static set(emulator, instance) {\n    this.INSTANCES.set(emulator, instance);\n  }\n\n  static clear(emulator) {\n    this.INSTANCES.delete(emulator);\n  }\n\n}\n\nEmulatorRegistry.INSTANCES = new Map();\nexports.EmulatorRegistry = EmulatorRegistry;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/registry.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","clc","require","types_1","error_1","utils","controller","EmulatorRegistry","start","instance","isRunning","getName","FirebaseError","info","getInfo","waitForPortClosed","port","host","set","logLabeledSuccess","bold","underline","stop","name","get","clear","stopAll","listRunning","emulator","INSTANCES","undefined","ALL_EMULATORS","filter","getPort","delete","Map"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst types_1 = require(\"./types\");\nconst error_1 = require(\"../error\");\nconst utils = require(\"../utils\");\nconst controller = require(\"./controller\");\nclass EmulatorRegistry {\n    static start(instance) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.isRunning(instance.getName())) {\n                throw new error_1.FirebaseError(`Emulator ${instance.getName()} is already running!`, {});\n            }\n            yield instance.start();\n            const info = instance.getInfo();\n            yield controller.waitForPortClosed(info.port, info.host);\n            this.set(instance.getName(), instance);\n            utils.logLabeledSuccess(instance.getName(), `Emulator started at ${clc.bold.underline(`http://${info.host}:${info.port}`)}`);\n        });\n    }\n    static stop(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const instance = this.get(name);\n            if (!instance) {\n                return;\n            }\n            yield instance.stop();\n            this.clear(instance.getName());\n        });\n    }\n    static stopAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const name of this.listRunning()) {\n                yield this.stop(name);\n            }\n        });\n    }\n    static isRunning(emulator) {\n        const instance = this.INSTANCES.get(emulator);\n        return instance !== undefined;\n    }\n    static listRunning() {\n        return types_1.ALL_EMULATORS.filter((name) => this.isRunning(name));\n    }\n    static get(emulator) {\n        return this.INSTANCES.get(emulator);\n    }\n    static getPort(emulator) {\n        const instance = this.INSTANCES.get(emulator);\n        if (!instance) {\n            return undefined;\n        }\n        return instance.getInfo().port;\n    }\n    static set(emulator, instance) {\n        this.INSTANCES.set(emulator, instance);\n    }\n    static clear(emulator) {\n        this.INSTANCES.delete(emulator);\n    }\n}\nEmulatorRegistry.INSTANCES = new Map();\nexports.EmulatorRegistry = EmulatorRegistry;\n"]},"metadata":{},"sourceType":"script"}