{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url = require(\"url\");\n\nconst DEFAULT_PORTS = {\n  hosting: 5000,\n  functions: 5001,\n  firestore: 8080,\n  database: 9000,\n  pubsub: 8085\n};\nconst DEFAULT_HOST = \"localhost\";\n\nclass Constants {\n  static getServiceName(service) {\n    switch (service) {\n      case this.SERVICE_FIRESTORE:\n        return \"firestore\";\n\n      case this.SERVICE_REALTIME_DATABASE:\n        return \"database\";\n\n      case this.SERVICE_PUBSUB:\n        return \"pubsub\";\n\n      default:\n        return service;\n    }\n  }\n\n  static getDefaultHost(emulator) {\n    return DEFAULT_HOST;\n  }\n\n  static getDefaultPort(emulator) {\n    return DEFAULT_PORTS[emulator];\n  }\n\n  static getHostKey(emulator) {\n    return `emulators.${emulator.toString()}.host`;\n  }\n\n  static getPortKey(emulator) {\n    return `emulators.${emulator.toString()}.port`;\n  }\n\n  static getAddress(emulator, options) {\n    const hostVal = options.config.get(this.getHostKey(emulator), DEFAULT_HOST);\n    const portVal = options.config.get(this.getPortKey(emulator), this.getDefaultPort(emulator));\n    const host = this.normalizeHost(hostVal);\n    const port = parseInt(portVal, 10);\n    return {\n      host,\n      port\n    };\n  }\n\n  static normalizeHost(host) {\n    let normalized = host;\n\n    if (!normalized.startsWith(\"http\")) {\n      normalized = `http://${normalized}`;\n    }\n\n    const u = url.parse(normalized);\n    return u.hostname || DEFAULT_HOST;\n  }\n\n}\n\nConstants.DEFAULT_DATABASE_EMULATOR_NAMESPACE = \"fake-server\";\nConstants.SERVICE_FIRESTORE = \"firestore.googleapis.com\";\nConstants.SERVICE_REALTIME_DATABASE = \"firebaseio.com\";\nConstants.SERVICE_PUBSUB = \"pubsub.googleapis.com\";\nexports.Constants = Constants;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/constants.js"],"names":["Object","defineProperty","exports","value","url","require","DEFAULT_PORTS","hosting","functions","firestore","database","pubsub","DEFAULT_HOST","Constants","getServiceName","service","SERVICE_FIRESTORE","SERVICE_REALTIME_DATABASE","SERVICE_PUBSUB","getDefaultHost","emulator","getDefaultPort","getHostKey","toString","getPortKey","getAddress","options","hostVal","config","get","portVal","host","normalizeHost","port","parseInt","normalized","startsWith","u","parse","hostname","DEFAULT_DATABASE_EMULATOR_NAMESPACE"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE,IADS;AAElBC,EAAAA,SAAS,EAAE,IAFO;AAGlBC,EAAAA,SAAS,EAAE,IAHO;AAIlBC,EAAAA,QAAQ,EAAE,IAJQ;AAKlBC,EAAAA,MAAM,EAAE;AALU,CAAtB;AAOA,MAAMC,YAAY,GAAG,WAArB;;AACA,MAAMC,SAAN,CAAgB;AACZ,SAAOC,cAAP,CAAsBC,OAAtB,EAA+B;AAC3B,YAAQA,OAAR;AACI,WAAK,KAAKC,iBAAV;AACI,eAAO,WAAP;;AACJ,WAAK,KAAKC,yBAAV;AACI,eAAO,UAAP;;AACJ,WAAK,KAAKC,cAAV;AACI,eAAO,QAAP;;AACJ;AACI,eAAOH,OAAP;AARR;AAUH;;AACD,SAAOI,cAAP,CAAsBC,QAAtB,EAAgC;AAC5B,WAAOR,YAAP;AACH;;AACD,SAAOS,cAAP,CAAsBD,QAAtB,EAAgC;AAC5B,WAAOd,aAAa,CAACc,QAAD,CAApB;AACH;;AACD,SAAOE,UAAP,CAAkBF,QAAlB,EAA4B;AACxB,WAAQ,aAAYA,QAAQ,CAACG,QAAT,EAAoB,OAAxC;AACH;;AACD,SAAOC,UAAP,CAAkBJ,QAAlB,EAA4B;AACxB,WAAQ,aAAYA,QAAQ,CAACG,QAAT,EAAoB,OAAxC;AACH;;AACD,SAAOE,UAAP,CAAkBL,QAAlB,EAA4BM,OAA5B,EAAqC;AACjC,UAAMC,OAAO,GAAGD,OAAO,CAACE,MAAR,CAAeC,GAAf,CAAmB,KAAKP,UAAL,CAAgBF,QAAhB,CAAnB,EAA8CR,YAA9C,CAAhB;AACA,UAAMkB,OAAO,GAAGJ,OAAO,CAACE,MAAR,CAAeC,GAAf,CAAmB,KAAKL,UAAL,CAAgBJ,QAAhB,CAAnB,EAA8C,KAAKC,cAAL,CAAoBD,QAApB,CAA9C,CAAhB;AACA,UAAMW,IAAI,GAAG,KAAKC,aAAL,CAAmBL,OAAnB,CAAb;AACA,UAAMM,IAAI,GAAGC,QAAQ,CAACJ,OAAD,EAAU,EAAV,CAArB;AACA,WAAO;AAAEC,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAAP;AACH;;AACD,SAAOD,aAAP,CAAqBD,IAArB,EAA2B;AACvB,QAAII,UAAU,GAAGJ,IAAjB;;AACA,QAAI,CAACI,UAAU,CAACC,UAAX,CAAsB,MAAtB,CAAL,EAAoC;AAChCD,MAAAA,UAAU,GAAI,UAASA,UAAW,EAAlC;AACH;;AACD,UAAME,CAAC,GAAGjC,GAAG,CAACkC,KAAJ,CAAUH,UAAV,CAAV;AACA,WAAOE,CAAC,CAACE,QAAF,IAAc3B,YAArB;AACH;;AAvCW;;AAyChBC,SAAS,CAAC2B,mCAAV,GAAgD,aAAhD;AACA3B,SAAS,CAACG,iBAAV,GAA8B,0BAA9B;AACAH,SAAS,CAACI,yBAAV,GAAsC,gBAAtC;AACAJ,SAAS,CAACK,cAAV,GAA2B,uBAA3B;AACAhB,OAAO,CAACW,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url = require(\"url\");\nconst DEFAULT_PORTS = {\n    hosting: 5000,\n    functions: 5001,\n    firestore: 8080,\n    database: 9000,\n    pubsub: 8085,\n};\nconst DEFAULT_HOST = \"localhost\";\nclass Constants {\n    static getServiceName(service) {\n        switch (service) {\n            case this.SERVICE_FIRESTORE:\n                return \"firestore\";\n            case this.SERVICE_REALTIME_DATABASE:\n                return \"database\";\n            case this.SERVICE_PUBSUB:\n                return \"pubsub\";\n            default:\n                return service;\n        }\n    }\n    static getDefaultHost(emulator) {\n        return DEFAULT_HOST;\n    }\n    static getDefaultPort(emulator) {\n        return DEFAULT_PORTS[emulator];\n    }\n    static getHostKey(emulator) {\n        return `emulators.${emulator.toString()}.host`;\n    }\n    static getPortKey(emulator) {\n        return `emulators.${emulator.toString()}.port`;\n    }\n    static getAddress(emulator, options) {\n        const hostVal = options.config.get(this.getHostKey(emulator), DEFAULT_HOST);\n        const portVal = options.config.get(this.getPortKey(emulator), this.getDefaultPort(emulator));\n        const host = this.normalizeHost(hostVal);\n        const port = parseInt(portVal, 10);\n        return { host, port };\n    }\n    static normalizeHost(host) {\n        let normalized = host;\n        if (!normalized.startsWith(\"http\")) {\n            normalized = `http://${normalized}`;\n        }\n        const u = url.parse(normalized);\n        return u.hostname || DEFAULT_HOST;\n    }\n}\nConstants.DEFAULT_DATABASE_EMULATOR_NAMESPACE = \"fake-server\";\nConstants.SERVICE_FIRESTORE = \"firestore.googleapis.com\";\nConstants.SERVICE_REALTIME_DATABASE = \"firebaseio.com\";\nConstants.SERVICE_PUBSUB = \"pubsub.googleapis.com\";\nexports.Constants = Constants;\n"]},"metadata":{},"sourceType":"script"}