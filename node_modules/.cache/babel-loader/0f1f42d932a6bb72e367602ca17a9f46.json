{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst request = require(\"request\");\n\nconst responseToError = require(\"../responseToError\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst api = require(\"../api\");\n\nconst requireInstance = require(\"../requireInstance\");\n\nconst settings_1 = require(\"../database/settings\");\n\nexports.default = new command_1.Command(\"database:settings:set <path> <value>\").description(\"set the realtime database setting at path.\").option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\").help(settings_1.HELP_TEXT).before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"]).before(requireInstance).action((path, value, options) => {\n  const setting = settings_1.DATABASE_SETTINGS.get(path);\n\n  if (setting === undefined) {\n    return utils.reject(settings_1.INVALID_PATH_ERROR, {\n      exit: 1\n    });\n  }\n\n  const parsedValue = setting.parseInput(value);\n\n  if (parsedValue === undefined) {\n    return utils.reject(setting.parseInputErrorMessge, {\n      exit: 1\n    });\n  }\n\n  return new Promise((resolve, reject) => {\n    const url = utils.addSubdomain(api.realtimeOrigin, options.instance) + \"/.settings/\" + path + \".json\";\n    const reqOptions = {\n      url,\n      body: parsedValue,\n      json: true\n    };\n    return api.addRequestHeaders(reqOptions).then(reqOptionsWithToken => {\n      request.put(reqOptionsWithToken, (err, res, body) => {\n        if (err) {\n          return reject(new error_1.FirebaseError(`Unexpected error fetching configs at ${path}`, {\n            exit: 2,\n            original: err\n          }));\n        } else if (res.statusCode >= 400) {\n          return reject(responseToError(res, body));\n        }\n\n        utils.logSuccess(\"Successfully set setting.\");\n        utils.logSuccess(`For database instance ${options.instance}\\n\\t ${path} = ${JSON.stringify(parsedValue)}`);\n        resolve();\n      });\n    });\n  });\n});","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/database-settings-set.js"],"names":["Object","defineProperty","exports","value","request","require","responseToError","command_1","error_1","requirePermissions_1","utils","api","requireInstance","settings_1","default","Command","description","option","help","HELP_TEXT","before","requirePermissions","action","path","options","setting","DATABASE_SETTINGS","get","undefined","reject","INVALID_PATH_ERROR","exit","parsedValue","parseInput","parseInputErrorMessge","Promise","resolve","url","addSubdomain","realtimeOrigin","instance","reqOptions","body","json","addRequestHeaders","then","reqOptionsWithToken","put","err","res","FirebaseError","original","statusCode","logSuccess","JSON","stringify"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,uBAAD,CAApC;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMM,GAAG,GAAGN,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAMO,eAAe,GAAGP,OAAO,CAAC,oBAAD,CAA/B;;AACA,MAAMQ,UAAU,GAAGR,OAAO,CAAC,sBAAD,CAA1B;;AACAH,OAAO,CAACY,OAAR,GAAkB,IAAIP,SAAS,CAACQ,OAAd,CAAsB,sCAAtB,EACbC,WADa,CACD,4CADC,EAEbC,MAFa,CAEN,uBAFM,EAEmB,wFAFnB,EAGbC,IAHa,CAGRL,UAAU,CAACM,SAHH,EAIbC,MAJa,CAINX,oBAAoB,CAACY,kBAJf,EAImC,CAAC,mCAAD,CAJnC,EAKbD,MALa,CAKNR,eALM,EAMbU,MANa,CAMN,CAACC,IAAD,EAAOpB,KAAP,EAAcqB,OAAd,KAA0B;AAClC,QAAMC,OAAO,GAAGZ,UAAU,CAACa,iBAAX,CAA6BC,GAA7B,CAAiCJ,IAAjC,CAAhB;;AACA,MAAIE,OAAO,KAAKG,SAAhB,EAA2B;AACvB,WAAOlB,KAAK,CAACmB,MAAN,CAAahB,UAAU,CAACiB,kBAAxB,EAA4C;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA5C,CAAP;AACH;;AACD,QAAMC,WAAW,GAAGP,OAAO,CAACQ,UAAR,CAAmB9B,KAAnB,CAApB;;AACA,MAAI6B,WAAW,KAAKJ,SAApB,EAA+B;AAC3B,WAAOlB,KAAK,CAACmB,MAAN,CAAaJ,OAAO,CAACS,qBAArB,EAA4C;AAAEH,MAAAA,IAAI,EAAE;AAAR,KAA5C,CAAP;AACH;;AACD,SAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUP,MAAV,KAAqB;AACpC,UAAMQ,GAAG,GAAG3B,KAAK,CAAC4B,YAAN,CAAmB3B,GAAG,CAAC4B,cAAvB,EAAuCf,OAAO,CAACgB,QAA/C,IAA2D,aAA3D,GAA2EjB,IAA3E,GAAkF,OAA9F;AACA,UAAMkB,UAAU,GAAG;AACfJ,MAAAA,GADe;AAEfK,MAAAA,IAAI,EAAEV,WAFS;AAGfW,MAAAA,IAAI,EAAE;AAHS,KAAnB;AAKA,WAAOhC,GAAG,CAACiC,iBAAJ,CAAsBH,UAAtB,EAAkCI,IAAlC,CAAwCC,mBAAD,IAAyB;AACnE1C,MAAAA,OAAO,CAAC2C,GAAR,CAAYD,mBAAZ,EAAiC,CAACE,GAAD,EAAMC,GAAN,EAAWP,IAAX,KAAoB;AACjD,YAAIM,GAAJ,EAAS;AACL,iBAAOnB,MAAM,CAAC,IAAIrB,OAAO,CAAC0C,aAAZ,CAA2B,wCAAuC3B,IAAK,EAAvE,EAA0E;AACpFQ,YAAAA,IAAI,EAAE,CAD8E;AAEpFoB,YAAAA,QAAQ,EAAEH;AAF0E,WAA1E,CAAD,CAAb;AAIH,SALD,MAMK,IAAIC,GAAG,CAACG,UAAJ,IAAkB,GAAtB,EAA2B;AAC5B,iBAAOvB,MAAM,CAACvB,eAAe,CAAC2C,GAAD,EAAMP,IAAN,CAAhB,CAAb;AACH;;AACDhC,QAAAA,KAAK,CAAC2C,UAAN,CAAiB,2BAAjB;AACA3C,QAAAA,KAAK,CAAC2C,UAAN,CAAkB,yBAAwB7B,OAAO,CAACgB,QAAS,QAAOjB,IAAK,MAAK+B,IAAI,CAACC,SAAL,CAAevB,WAAf,CAA4B,EAAxG;AACAI,QAAAA,OAAO;AACV,OAbD;AAcH,KAfM,CAAP;AAgBH,GAvBM,CAAP;AAwBH,CAvCiB,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request = require(\"request\");\nconst responseToError = require(\"../responseToError\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst api = require(\"../api\");\nconst requireInstance = require(\"../requireInstance\");\nconst settings_1 = require(\"../database/settings\");\nexports.default = new command_1.Command(\"database:settings:set <path> <value>\")\n    .description(\"set the realtime database setting at path.\")\n    .option(\"--instance <instance>\", \"use the database <instance>.firebaseio.com (if omitted, use default database instance)\")\n    .help(settings_1.HELP_TEXT)\n    .before(requirePermissions_1.requirePermissions, [\"firebasedatabase.instances.update\"])\n    .before(requireInstance)\n    .action((path, value, options) => {\n    const setting = settings_1.DATABASE_SETTINGS.get(path);\n    if (setting === undefined) {\n        return utils.reject(settings_1.INVALID_PATH_ERROR, { exit: 1 });\n    }\n    const parsedValue = setting.parseInput(value);\n    if (parsedValue === undefined) {\n        return utils.reject(setting.parseInputErrorMessge, { exit: 1 });\n    }\n    return new Promise((resolve, reject) => {\n        const url = utils.addSubdomain(api.realtimeOrigin, options.instance) + \"/.settings/\" + path + \".json\";\n        const reqOptions = {\n            url,\n            body: parsedValue,\n            json: true,\n        };\n        return api.addRequestHeaders(reqOptions).then((reqOptionsWithToken) => {\n            request.put(reqOptionsWithToken, (err, res, body) => {\n                if (err) {\n                    return reject(new error_1.FirebaseError(`Unexpected error fetching configs at ${path}`, {\n                        exit: 2,\n                        original: err,\n                    }));\n                }\n                else if (res.statusCode >= 400) {\n                    return reject(responseToError(res, body));\n                }\n                utils.logSuccess(\"Successfully set setting.\");\n                utils.logSuccess(`For database instance ${options.instance}\\n\\t ${path} = ${JSON.stringify(parsedValue)}`);\n                resolve();\n            });\n        });\n    });\n});\n"]},"metadata":{},"sourceType":"script"}