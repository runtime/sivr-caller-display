{"ast":null,"code":"\"use strict\";\n\nvar _ = require(\"lodash\");\n\nvar clc = require(\"cli-color\");\n\nvar tmp = require(\"tmp\");\n\nvar utils = require(\"../../utils\");\n\nvar gcp = require(\"../../gcp\");\n\nvar prepareFunctionsUpload = require(\"../../prepareFunctionsUpload\");\n\nvar GCP_REGION = gcp.cloudfunctions.DEFAULT_REGION;\ntmp.setGracefulCleanup();\n\nmodule.exports = function (context, options, payload) {\n  var _uploadSource = function (source) {\n    return gcp.cloudfunctions.generateUploadUrl(context.projectId, GCP_REGION).then(function (uploadUrl) {\n      _.set(context, \"uploadUrl\", uploadUrl);\n\n      uploadUrl = _.replace(uploadUrl, \"https://storage.googleapis.com\", \"\");\n      return gcp.storage.upload(source, uploadUrl);\n    });\n  };\n\n  if (options.config.get(\"functions\")) {\n    utils.logBullet(clc.cyan.bold(\"functions:\") + \" preparing \" + clc.bold(options.config.get(\"functions.source\")) + \" directory for uploading...\");\n    return prepareFunctionsUpload(context, options).then(function (result) {\n      payload.functions = {\n        triggers: options.config.get(\"functions.triggers\")\n      };\n\n      if (!result) {\n        return undefined;\n      }\n\n      return _uploadSource(result).then(function () {\n        utils.logSuccess(clc.green.bold(\"functions:\") + \" \" + clc.bold(options.config.get(\"functions.source\")) + \" folder uploaded successfully\");\n      }).catch(function (err) {\n        utils.logWarning(clc.yellow(\"functions:\") + \" Upload Error: \" + err.message);\n        return Promise.reject(err);\n      });\n    });\n  }\n\n  return Promise.resolve();\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/deploy/functions/deploy.js"],"names":["_","require","clc","tmp","utils","gcp","prepareFunctionsUpload","GCP_REGION","cloudfunctions","DEFAULT_REGION","setGracefulCleanup","module","exports","context","options","payload","_uploadSource","source","generateUploadUrl","projectId","then","uploadUrl","set","replace","storage","upload","config","get","logBullet","cyan","bold","result","functions","triggers","undefined","logSuccess","green","catch","err","logWarning","yellow","message","Promise","reject","resolve"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,aAAD,CAAnB;;AACA,IAAII,GAAG,GAAGJ,OAAO,CAAC,WAAD,CAAjB;;AACA,IAAIK,sBAAsB,GAAGL,OAAO,CAAC,8BAAD,CAApC;;AACA,IAAIM,UAAU,GAAGF,GAAG,CAACG,cAAJ,CAAmBC,cAApC;AACAN,GAAG,CAACO,kBAAJ;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AAClD,MAAIC,aAAa,GAAG,UAAUC,MAAV,EAAkB;AAClC,WAAOZ,GAAG,CAACG,cAAJ,CACFU,iBADE,CACgBL,OAAO,CAACM,SADxB,EACmCZ,UADnC,EAEFa,IAFE,CAEG,UAAUC,SAAV,EAAqB;AAC3BrB,MAAAA,CAAC,CAACsB,GAAF,CAAMT,OAAN,EAAe,WAAf,EAA4BQ,SAA5B;;AACAA,MAAAA,SAAS,GAAGrB,CAAC,CAACuB,OAAF,CAAUF,SAAV,EAAqB,gCAArB,EAAuD,EAAvD,CAAZ;AACA,aAAOhB,GAAG,CAACmB,OAAJ,CAAYC,MAAZ,CAAmBR,MAAnB,EAA2BI,SAA3B,CAAP;AACH,KANM,CAAP;AAOH,GARD;;AASA,MAAIP,OAAO,CAACY,MAAR,CAAeC,GAAf,CAAmB,WAAnB,CAAJ,EAAqC;AACjCvB,IAAAA,KAAK,CAACwB,SAAN,CAAgB1B,GAAG,CAAC2B,IAAJ,CAASC,IAAT,CAAc,YAAd,IACZ,aADY,GAEZ5B,GAAG,CAAC4B,IAAJ,CAAShB,OAAO,CAACY,MAAR,CAAeC,GAAf,CAAmB,kBAAnB,CAAT,CAFY,GAGZ,6BAHJ;AAIA,WAAOrB,sBAAsB,CAACO,OAAD,EAAUC,OAAV,CAAtB,CAAyCM,IAAzC,CAA8C,UAAUW,MAAV,EAAkB;AACnEhB,MAAAA,OAAO,CAACiB,SAAR,GAAoB;AAChBC,QAAAA,QAAQ,EAAEnB,OAAO,CAACY,MAAR,CAAeC,GAAf,CAAmB,oBAAnB;AADM,OAApB;;AAGA,UAAI,CAACI,MAAL,EAAa;AACT,eAAOG,SAAP;AACH;;AACD,aAAOlB,aAAa,CAACe,MAAD,CAAb,CACFX,IADE,CACG,YAAY;AAClBhB,QAAAA,KAAK,CAAC+B,UAAN,CAAiBjC,GAAG,CAACkC,KAAJ,CAAUN,IAAV,CAAe,YAAf,IACb,GADa,GAEb5B,GAAG,CAAC4B,IAAJ,CAAShB,OAAO,CAACY,MAAR,CAAeC,GAAf,CAAmB,kBAAnB,CAAT,CAFa,GAGb,+BAHJ;AAIH,OANM,EAOFU,KAPE,CAOI,UAAUC,GAAV,EAAe;AACtBlC,QAAAA,KAAK,CAACmC,UAAN,CAAiBrC,GAAG,CAACsC,MAAJ,CAAW,YAAX,IAA2B,iBAA3B,GAA+CF,GAAG,CAACG,OAApE;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeL,GAAf,CAAP;AACH,OAVM,CAAP;AAWH,KAlBM,CAAP;AAmBH;;AACD,SAAOI,OAAO,CAACE,OAAR,EAAP;AACH,CApCD","sourcesContent":["\"use strict\";\nvar _ = require(\"lodash\");\nvar clc = require(\"cli-color\");\nvar tmp = require(\"tmp\");\nvar utils = require(\"../../utils\");\nvar gcp = require(\"../../gcp\");\nvar prepareFunctionsUpload = require(\"../../prepareFunctionsUpload\");\nvar GCP_REGION = gcp.cloudfunctions.DEFAULT_REGION;\ntmp.setGracefulCleanup();\nmodule.exports = function (context, options, payload) {\n    var _uploadSource = function (source) {\n        return gcp.cloudfunctions\n            .generateUploadUrl(context.projectId, GCP_REGION)\n            .then(function (uploadUrl) {\n            _.set(context, \"uploadUrl\", uploadUrl);\n            uploadUrl = _.replace(uploadUrl, \"https://storage.googleapis.com\", \"\");\n            return gcp.storage.upload(source, uploadUrl);\n        });\n    };\n    if (options.config.get(\"functions\")) {\n        utils.logBullet(clc.cyan.bold(\"functions:\") +\n            \" preparing \" +\n            clc.bold(options.config.get(\"functions.source\")) +\n            \" directory for uploading...\");\n        return prepareFunctionsUpload(context, options).then(function (result) {\n            payload.functions = {\n                triggers: options.config.get(\"functions.triggers\"),\n            };\n            if (!result) {\n                return undefined;\n            }\n            return _uploadSource(result)\n                .then(function () {\n                utils.logSuccess(clc.green.bold(\"functions:\") +\n                    \" \" +\n                    clc.bold(options.config.get(\"functions.source\")) +\n                    \" folder uploaded successfully\");\n            })\n                .catch(function (err) {\n                utils.logWarning(clc.yellow(\"functions:\") + \" Upload Error: \" + err.message);\n                return Promise.reject(err);\n            });\n        });\n    }\n    return Promise.resolve();\n};\n"]},"metadata":{},"sourceType":"script"}