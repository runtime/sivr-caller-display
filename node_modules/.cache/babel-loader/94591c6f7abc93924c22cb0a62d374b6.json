{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst sysPath = require('path');\n\nconst _require = require('util'),\n      promisify = _require.promisify;\n\nlet fsevents;\n\ntry {\n  fsevents = require('fsevents');\n} catch (error) {\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\n}\n\nif (fsevents) {\n  // TODO: real check\n  const mtch = process.version.match(/v(\\d+)\\.(\\d+)/);\n\n  if (mtch && mtch[1] && mtch[2]) {\n    const maj = Number.parseInt(mtch[1], 10);\n    const min = Number.parseInt(mtch[2], 10);\n\n    if (maj === 8 && min < 16) {\n      fsevents = undefined;\n    }\n  }\n}\n\nconst _require2 = require('./constants'),\n      EV_ADD = _require2.EV_ADD,\n      EV_CHANGE = _require2.EV_CHANGE,\n      EV_ADD_DIR = _require2.EV_ADD_DIR,\n      EV_UNLINK = _require2.EV_UNLINK,\n      EV_ERROR = _require2.EV_ERROR,\n      STR_DATA = _require2.STR_DATA,\n      STR_END = _require2.STR_END,\n      FSEVENT_CREATED = _require2.FSEVENT_CREATED,\n      FSEVENT_MODIFIED = _require2.FSEVENT_MODIFIED,\n      FSEVENT_DELETED = _require2.FSEVENT_DELETED,\n      FSEVENT_MOVED = _require2.FSEVENT_MOVED,\n      FSEVENT_UNKNOWN = _require2.FSEVENT_UNKNOWN,\n      FSEVENT_TYPE_DIRECTORY = _require2.FSEVENT_TYPE_DIRECTORY,\n      FSEVENT_TYPE_SYMLINK = _require2.FSEVENT_TYPE_SYMLINK,\n      ROOT_GLOBSTAR = _require2.ROOT_GLOBSTAR,\n      DIR_SUFFIX = _require2.DIR_SUFFIX,\n      DOT_SLASH = _require2.DOT_SLASH,\n      FUNCTION_TYPE = _require2.FUNCTION_TYPE,\n      EMPTY_FN = _require2.EMPTY_FN,\n      IDENTITY_FN = _require2.IDENTITY_FN;\n\nconst FS_MODE_READ = 'r';\n\nconst Depth = value => isNaN(value) ? {} : {\n  depth: value\n};\n\nconst stat = promisify(fs.stat);\nconst open = promisify(fs.open);\nconst close = promisify(fs.close);\nconst lstat = promisify(fs.lstat);\nconst realpath = promisify(fs.realpath);\nconst statMethods = {\n  stat,\n  lstat\n};\n/**\n * @typedef {String} Path\n */\n\n/**\n * @typedef {Object} FsEventsWatchContainer\n * @property {Set<Function>} listeners\n * @property {Function} rawEmitter\n * @property {{stop: Function}} watcher\n */\n// fsevents instance helper functions\n\n/**\n * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)\n * @type {Map<Path,FsEventsWatchContainer>}\n */\n\nconst FSEventsWatchers = new Map(); // Threshold of duplicate path prefixes at which to start\n// consolidating going forward\n\nconst consolidateThreshhold = 10;\nconst wrongEventFlags = new Set([69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912]);\n/**\n * Instantiates the fsevents interface\n * @param {Path} path path to be watched\n * @param {Function} callback called when fsevents is bound and ready\n * @returns {{stop: Function}} new fsevents instance\n */\n\nconst createFSEventsInstance = (path, callback) => {\n  const stop = fsevents.watch(path, callback);\n  return {\n    stop\n  };\n};\n/**\n * Instantiates the fsevents interface or binds listeners to an existing one covering\n * the same file tree.\n * @param {Path} path           - to be watched\n * @param {Path} realPath       - real path for symlinks\n * @param {Function} listener   - called when fsevents emits events\n * @param {Function} rawEmitter - passes data to listeners of the 'raw' event\n * @returns {Function} closer\n */\n\n\nfunction setFSEventsListener(path, realPath, listener, rawEmitter, fsw) {\n  let watchPath = sysPath.extname(path) ? sysPath.dirname(path) : path;\n  const parentPath = sysPath.dirname(watchPath);\n  let cont = FSEventsWatchers.get(watchPath); // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n  // above the current one, create a watcher on the parent\n  // path instead, so that we do consolidate going forward.\n\n  if (couldConsolidate(parentPath)) {\n    watchPath = parentPath;\n  }\n\n  const resolvedPath = sysPath.resolve(path);\n  const hasSymlink = resolvedPath !== realPath;\n\n  const filteredListener = (fullPath, flags, info) => {\n    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\n    if (fullPath === resolvedPath || !fullPath.indexOf(resolvedPath + sysPath.sep)) listener(fullPath, flags, info);\n  }; // check if there is already a watcher on a parent path\n  // modifies `watchPath` to the parent path when it finds a match\n\n\n  let watchedParent = false;\n\n  for (const watchedPath of FSEventsWatchers.keys()) {\n    if (realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep) === 0) {\n      watchPath = watchedPath;\n      cont = FSEventsWatchers.get(watchPath);\n      watchedParent = true;\n      break;\n    }\n  }\n\n  if (cont || watchedParent) {\n    cont.listeners.add(filteredListener);\n  } else {\n    cont = {\n      listeners: new Set([filteredListener]),\n      rawEmitter,\n      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {\n        if (fsw.closed) return;\n        const info = fsevents.getInfo(fullPath, flags);\n        cont.listeners.forEach(list => {\n          list(fullPath, flags, info);\n        });\n        cont.rawEmitter(info.event, fullPath, info);\n      })\n    };\n    FSEventsWatchers.set(watchPath, cont);\n  } // removes this instance's listeners and closes the underlying fsevents\n  // instance if there are no more listeners left\n\n\n  return () => {\n    const lst = cont.listeners;\n    lst.delete(filteredListener);\n\n    if (!lst.size) {\n      FSEventsWatchers.delete(watchPath);\n      if (cont.watcher) return cont.watcher.stop().then(() => {\n        cont.rawEmitter = cont.watcher = undefined;\n        Object.freeze(cont);\n      });\n    }\n  };\n} // Decide whether or not we should start a new higher-level\n// parent watcher\n\n\nconst couldConsolidate = path => {\n  let count = 0;\n\n  for (const watchPath of FSEventsWatchers.keys()) {\n    if (watchPath.indexOf(path) === 0) {\n      count++;\n\n      if (count >= consolidateThreshhold) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}; // returns boolean indicating whether fsevents can be used\n\n\nconst canUse = () => fsevents && FSEventsWatchers.size < 128; // determines subdirectory traversal levels from root to path\n\n\nconst calcDepth = (path, root) => {\n  let i = 0;\n\n  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;\n\n  return i;\n};\n/**\n * @mixin\n */\n\n\nclass FsEventsHandler {\n  /**\n   * @param {import('../index').FSWatcher} fsw\n   */\n  constructor(fsw) {\n    this.fsw = fsw;\n  }\n\n  checkIgnored(path, stats) {\n    const ipaths = this.fsw._ignoredPaths;\n\n    if (this.fsw._isIgnored(path, stats)) {\n      ipaths.add(path);\n\n      if (stats && stats.isDirectory()) {\n        ipaths.add(path + ROOT_GLOBSTAR);\n      }\n\n      return true;\n    }\n\n    ipaths.delete(path);\n    ipaths.delete(path + ROOT_GLOBSTAR);\n  }\n\n  addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n    const event = watchedDir.has(item) ? EV_CHANGE : EV_ADD;\n    this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n  }\n\n  async checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n    try {\n      const fd = await open(path, FS_MODE_READ);\n      if (this.fsw.closed) return;\n      await close(fd);\n      if (this.fsw.closed) return;\n      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n    } catch (error) {\n      if (error.code === 'EACCES') {\n        this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      } else {\n        this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      }\n    }\n  }\n\n  handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n    if (this.fsw.closed || this.checkIgnored(path)) return;\n\n    if (event === EV_UNLINK) {\n      // suppress unlink events on never before seen files\n      if (info.type === FSEVENT_TYPE_DIRECTORY || watchedDir.has(item)) {\n        this.fsw._remove(parent, item);\n      }\n    } else {\n      if (event === EV_ADD) {\n        // track new directories\n        if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path);\n\n        if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) {\n          // push symlinks back to the top of the stack to get handled\n          const curDepth = opts.depth === undefined ? undefined : calcDepth(fullPath, realPath) + 1;\n          return this._addToFsEvents(path, false, true, curDepth);\n        } // track new paths\n        // (other than symlinks being followed, which will be tracked soon)\n\n\n        this.fsw._getWatchedDir(parent).add(item);\n      }\n      /**\n       * @type {'add'|'addDir'|'unlink'|'unlinkDir'}\n       */\n\n\n      const eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;\n\n      this.fsw._emit(eventName, path);\n\n      if (eventName === EV_ADD_DIR) this._addToFsEvents(path, false, true);\n    }\n  }\n  /**\n   * Handle symlinks encountered during directory scan\n   * @param {String} watchPath  - file/dir path to be watched with fsevents\n   * @param {String} realPath   - real path (in case of symlinks)\n   * @param {Function} transform  - path transformer\n   * @param {Function} globFilter - path filter in case a glob pattern was provided\n   * @returns {Function} closer for the watcher instance\n  */\n\n\n  _watchWithFsEvents(watchPath, realPath, transform, globFilter) {\n    if (this.fsw.closed) return;\n    if (this.fsw._isIgnored(watchPath)) return;\n    const opts = this.fsw.options;\n\n    const watchCallback = async (fullPath, flags, info) => {\n      if (this.fsw.closed) return;\n      if (opts.depth !== undefined && calcDepth(fullPath, realPath) > opts.depth) return;\n      const path = transform(sysPath.join(watchPath, sysPath.relative(watchPath, fullPath)));\n      if (globFilter && !globFilter(path)) return; // ensure directories are tracked\n\n      const parent = sysPath.dirname(path);\n      const item = sysPath.basename(path);\n\n      const watchedDir = this.fsw._getWatchedDir(info.type === FSEVENT_TYPE_DIRECTORY ? path : parent); // correct for wrong events emitted\n\n\n      if (wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN) {\n        if (typeof opts.ignored === FUNCTION_TYPE) {\n          let stats;\n\n          try {\n            stats = await stat(path);\n          } catch (error) {}\n\n          if (this.fsw.closed) return;\n          if (this.checkIgnored(path, stats)) return;\n\n          if (stats) {\n            this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n          } else {\n            this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n          }\n        } else {\n          this.checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n        }\n      } else {\n        switch (info.event) {\n          case FSEVENT_CREATED:\n          case FSEVENT_MODIFIED:\n            return this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n\n          case FSEVENT_DELETED:\n          case FSEVENT_MOVED:\n            return this.checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n        }\n      }\n    };\n\n    const closer = setFSEventsListener(watchPath, realPath, watchCallback, this.fsw._emitRaw, this.fsw);\n\n    this.fsw._emitReady();\n\n    return closer;\n  }\n  /**\n   * Handle symlinks encountered during directory scan\n   * @param {String} linkPath path to symlink\n   * @param {String} fullPath absolute path to the symlink\n   * @param {Function} transform pre-existing path transformer\n   * @param {Number} curDepth level of subdirectories traversed to where symlink is\n   * @returns {Promise<void>}\n   */\n\n\n  async _handleFsEventsSymlink(linkPath, fullPath, transform, curDepth) {\n    // don't follow the same symlink more than once\n    if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;\n\n    this.fsw._symlinkPaths.set(fullPath, true);\n\n    this.fsw._incrReadyCount();\n\n    try {\n      const linkTarget = await realpath(linkPath);\n      if (this.fsw.closed) return;\n\n      if (this.fsw._isIgnored(linkTarget)) {\n        return this.fsw._emitReady();\n      }\n\n      this.fsw._incrReadyCount(); // add the linkTarget for watching with a wrapper for transform\n      // that causes emitted paths to incorporate the link's path\n\n\n      this._addToFsEvents(linkTarget || linkPath, path => {\n        let aliasedPath = linkPath;\n\n        if (linkTarget && linkTarget !== DOT_SLASH) {\n          aliasedPath = path.replace(linkTarget, linkPath);\n        } else if (path !== DOT_SLASH) {\n          aliasedPath = sysPath.join(linkPath, path);\n        }\n\n        return transform(aliasedPath);\n      }, false, curDepth);\n    } catch (error) {\n      if (this.fsw._handleError(error)) {\n        return this.fsw._emitReady();\n      }\n    }\n  }\n  /**\n   *\n   * @param {Path} newPath\n   * @param {fs.Stats} stats\n   */\n\n\n  emitAdd(newPath, stats, processPath, opts, forceAdd) {\n    const pp = processPath(newPath);\n    const isDir = stats.isDirectory();\n\n    const dirObj = this.fsw._getWatchedDir(sysPath.dirname(pp));\n\n    const base = sysPath.basename(pp); // ensure empty dirs get tracked\n\n    if (isDir) this.fsw._getWatchedDir(pp);\n    if (dirObj.has(base)) return;\n    dirObj.add(base);\n\n    if (!opts.ignoreInitial || forceAdd === true) {\n      this.fsw._emit(isDir ? EV_ADD_DIR : EV_ADD, pp, stats);\n    }\n  }\n\n  initWatch(realPath, path, wh, processPath) {\n    if (this.fsw.closed) return;\n\n    const closer = this._watchWithFsEvents(wh.watchPath, sysPath.resolve(realPath || wh.watchPath), processPath, wh.globFilter);\n\n    this.fsw._addPathCloser(path, closer);\n  }\n  /**\n   * Handle added path with fsevents\n   * @param {String} path file/dir path or glob pattern\n   * @param {Function|Boolean=} transform converts working path to what the user expects\n   * @param {Boolean=} forceAdd ensure add is emitted\n   * @param {Number=} priorDepth Level of subdirectories already traversed.\n   * @returns {Promise<void>}\n   */\n\n\n  async _addToFsEvents(path, transform, forceAdd, priorDepth) {\n    if (this.fsw.closed) {\n      return;\n    }\n\n    const opts = this.fsw.options;\n    const processPath = typeof transform === FUNCTION_TYPE ? transform : IDENTITY_FN;\n\n    const wh = this.fsw._getWatchHelpers(path); // evaluate what is at the path we're being asked to watch\n\n\n    try {\n      const stats = await statMethods[wh.statMethod](wh.watchPath);\n      if (this.fsw.closed) return;\n\n      if (this.fsw._isIgnored(wh.watchPath, stats)) {\n        throw null;\n      }\n\n      if (stats.isDirectory()) {\n        // emit addDir unless this is a glob parent\n        if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd); // don't recurse further if it would exceed depth setting\n\n        if (priorDepth && priorDepth > opts.depth) return; // scan the contents of the dir\n\n        this.fsw._readdirp(wh.watchPath, {\n          fileFilter: entry => wh.filterPath(entry),\n          directoryFilter: entry => wh.filterDir(entry),\n          ...Depth(opts.depth - (priorDepth || 0))\n        }).on(STR_DATA, entry => {\n          // need to check filterPath on dirs b/c filterDir is less restrictive\n          if (this.fsw.closed) {\n            return;\n          }\n\n          if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;\n          const joinedPath = sysPath.join(wh.watchPath, entry.path);\n          const fullPath = entry.fullPath;\n\n          if (wh.followSymlinks && entry.stats.isSymbolicLink()) {\n            // preserve the current depth here since it can't be derived from\n            // real paths past the symlink\n            const curDepth = opts.depth === undefined ? undefined : calcDepth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;\n\n            this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);\n          } else {\n            this.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);\n          }\n        }).on(EV_ERROR, EMPTY_FN).on(STR_END, () => {\n          this.fsw._emitReady();\n        });\n      } else {\n        this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);\n\n        this.fsw._emitReady();\n      }\n    } catch (error) {\n      if (!error || this.fsw._handleError(error)) {\n        // TODO: Strange thing: \"should not choke on an ignored watch path\" will be failed without 2 ready calls -__-\n        this.fsw._emitReady();\n\n        this.fsw._emitReady();\n      }\n    }\n\n    if (opts.persistent && forceAdd !== true) {\n      if (typeof transform === FUNCTION_TYPE) {\n        // realpath has already been resolved\n        this.initWatch(undefined, path, wh, processPath);\n      } else {\n        let realPath;\n\n        try {\n          realPath = await realpath(wh.watchPath);\n        } catch (e) {}\n\n        this.initWatch(realPath, path, wh, processPath);\n      }\n    }\n  }\n\n}\n\nmodule.exports = FsEventsHandler;\nmodule.exports.canUse = canUse;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/node_modules/chokidar/lib/fsevents-handler.js"],"names":["fs","require","sysPath","promisify","fsevents","error","process","env","CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR","console","mtch","version","match","maj","Number","parseInt","min","undefined","EV_ADD","EV_CHANGE","EV_ADD_DIR","EV_UNLINK","EV_ERROR","STR_DATA","STR_END","FSEVENT_CREATED","FSEVENT_MODIFIED","FSEVENT_DELETED","FSEVENT_MOVED","FSEVENT_UNKNOWN","FSEVENT_TYPE_DIRECTORY","FSEVENT_TYPE_SYMLINK","ROOT_GLOBSTAR","DIR_SUFFIX","DOT_SLASH","FUNCTION_TYPE","EMPTY_FN","IDENTITY_FN","FS_MODE_READ","Depth","value","isNaN","depth","stat","open","close","lstat","realpath","statMethods","FSEventsWatchers","Map","consolidateThreshhold","wrongEventFlags","Set","createFSEventsInstance","path","callback","stop","watch","setFSEventsListener","realPath","listener","rawEmitter","fsw","watchPath","extname","dirname","parentPath","cont","get","couldConsolidate","resolvedPath","resolve","hasSymlink","filteredListener","fullPath","flags","info","replace","indexOf","sep","watchedParent","watchedPath","keys","listeners","add","watcher","closed","getInfo","forEach","list","event","set","lst","delete","size","then","Object","freeze","count","canUse","calcDepth","root","i","FsEventsHandler","constructor","checkIgnored","stats","ipaths","_ignoredPaths","_isIgnored","isDirectory","addOrChange","parent","watchedDir","item","opts","has","handleEvent","checkFd","fd","code","type","_remove","_getWatchedDir","followSymlinks","curDepth","_addToFsEvents","eventName","_emit","_watchWithFsEvents","transform","globFilter","options","watchCallback","join","relative","basename","ignored","closer","_emitRaw","_emitReady","_handleFsEventsSymlink","linkPath","_symlinkPaths","_incrReadyCount","linkTarget","aliasedPath","_handleError","emitAdd","newPath","processPath","forceAdd","pp","isDir","dirObj","base","ignoreInitial","initWatch","wh","_addPathCloser","priorDepth","_getWatchHelpers","statMethod","_readdirp","fileFilter","entry","filterPath","directoryFilter","filterDir","on","joinedPath","isSymbolicLink","persistent","e","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,MAAD,CAAvB;;iBACsBA,OAAO,CAAC,MAAD,C;MAArBE,S,YAAAA,S;;AAER,IAAIC,QAAJ;;AACA,IAAI;AACFA,EAAAA,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAlB;AACD,CAFD,CAEE,OAAOI,KAAP,EAAc;AACd,MAAIC,OAAO,CAACC,GAAR,CAAYC,qCAAhB,EAAuDC,OAAO,CAACJ,KAAR,CAAcA,KAAd;AACxD;;AAED,IAAID,QAAJ,EAAc;AACZ;AACA,QAAMM,IAAI,GAAGJ,OAAO,CAACK,OAAR,CAAgBC,KAAhB,CAAsB,eAAtB,CAAb;;AACA,MAAIF,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAZ,IAAmBA,IAAI,CAAC,CAAD,CAA3B,EAAgC;AAC9B,UAAMG,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBL,IAAI,CAAC,CAAD,CAApB,EAAyB,EAAzB,CAAZ;AACA,UAAMM,GAAG,GAAGF,MAAM,CAACC,QAAP,CAAgBL,IAAI,CAAC,CAAD,CAApB,EAAyB,EAAzB,CAAZ;;AACA,QAAIG,GAAG,KAAK,CAAR,IAAaG,GAAG,GAAG,EAAvB,EAA2B;AACzBZ,MAAAA,QAAQ,GAAGa,SAAX;AACD;AACF;AACF;;kBAyBGhB,OAAO,CAAC,aAAD,C;MAtBTiB,M,aAAAA,M;MACAC,S,aAAAA,S;MACAC,U,aAAAA,U;MACAC,S,aAAAA,S;MACAC,Q,aAAAA,Q;MACAC,Q,aAAAA,Q;MACAC,O,aAAAA,O;MACAC,e,aAAAA,e;MACAC,gB,aAAAA,gB;MACAC,e,aAAAA,e;MACAC,a,aAAAA,a;MAEAC,e,aAAAA,e;MACAC,sB,aAAAA,sB;MACAC,oB,aAAAA,oB;MAEAC,a,aAAAA,a;MACAC,U,aAAAA,U;MACAC,S,aAAAA,S;MACAC,a,aAAAA,a;MACAC,Q,aAAAA,Q;MACAC,W,aAAAA,W;;AAEF,MAAMC,YAAY,GAAG,GAArB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAWC,KAAK,CAACD,KAAD,CAAL,GAAe,EAAf,GAAoB;AAACE,EAAAA,KAAK,EAAEF;AAAR,CAA7C;;AAEA,MAAMG,IAAI,GAAGxC,SAAS,CAACH,EAAE,CAAC2C,IAAJ,CAAtB;AACA,MAAMC,IAAI,GAAGzC,SAAS,CAACH,EAAE,CAAC4C,IAAJ,CAAtB;AACA,MAAMC,KAAK,GAAG1C,SAAS,CAACH,EAAE,CAAC6C,KAAJ,CAAvB;AACA,MAAMC,KAAK,GAAG3C,SAAS,CAACH,EAAE,CAAC8C,KAAJ,CAAvB;AACA,MAAMC,QAAQ,GAAG5C,SAAS,CAACH,EAAE,CAAC+C,QAAJ,CAA1B;AAEA,MAAMC,WAAW,GAAG;AAAEL,EAAAA,IAAF;AAAQG,EAAAA;AAAR,CAApB;AAEA;;;;AAIA;;;;;;AAOA;;AACA;;;;;AAIA,MAAMG,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB,C,CAEA;AACA;;AACA,MAAMC,qBAAqB,GAAG,EAA9B;AAEA,MAAMC,eAAe,GAAG,IAAIC,GAAJ,CAAQ,CAC9B,KAD8B,EACvB,KADuB,EAChB,KADgB,EACT,KADS,EACF,KADE,EACK,MADL,EACa,MADb,EACqB,MADrB,CAAR,CAAxB;AAIA;;;;;;;AAMA,MAAMC,sBAAsB,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACjD,QAAMC,IAAI,GAAGrD,QAAQ,CAACsD,KAAT,CAAeH,IAAf,EAAqBC,QAArB,CAAb;AACA,SAAO;AAACC,IAAAA;AAAD,GAAP;AACD,CAHD;AAKA;;;;;;;;;;;AASA,SAASE,mBAAT,CAA6BJ,IAA7B,EAAmCK,QAAnC,EAA6CC,QAA7C,EAAuDC,UAAvD,EAAmEC,GAAnE,EAAwE;AACtE,MAAIC,SAAS,GAAG9D,OAAO,CAAC+D,OAAR,CAAgBV,IAAhB,IAAwBrD,OAAO,CAACgE,OAAR,CAAgBX,IAAhB,CAAxB,GAAgDA,IAAhE;AACA,QAAMY,UAAU,GAAGjE,OAAO,CAACgE,OAAR,CAAgBF,SAAhB,CAAnB;AACA,MAAII,IAAI,GAAGnB,gBAAgB,CAACoB,GAAjB,CAAqBL,SAArB,CAAX,CAHsE,CAKtE;AACA;AACA;AACA;;AACA,MAAIM,gBAAgB,CAACH,UAAD,CAApB,EAAkC;AAChCH,IAAAA,SAAS,GAAGG,UAAZ;AACD;;AAED,QAAMI,YAAY,GAAGrE,OAAO,CAACsE,OAAR,CAAgBjB,IAAhB,CAArB;AACA,QAAMkB,UAAU,GAAGF,YAAY,KAAKX,QAApC;;AAEA,QAAMc,gBAAgB,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,IAAlB,KAA2B;AAClD,QAAIJ,UAAJ,EAAgBE,QAAQ,GAAGA,QAAQ,CAACG,OAAT,CAAiBlB,QAAjB,EAA2BW,YAA3B,CAAX;AAChB,QACEI,QAAQ,KAAKJ,YAAb,IACA,CAACI,QAAQ,CAACI,OAAT,CAAiBR,YAAY,GAAGrE,OAAO,CAAC8E,GAAxC,CAFH,EAGEnB,QAAQ,CAACc,QAAD,EAAWC,KAAX,EAAkBC,IAAlB,CAAR;AACH,GAND,CAhBsE,CAwBtE;AACA;;;AACA,MAAII,aAAa,GAAG,KAApB;;AACA,OAAK,MAAMC,WAAX,IAA0BjC,gBAAgB,CAACkC,IAAjB,EAA1B,EAAmD;AACjD,QAAIvB,QAAQ,CAACmB,OAAT,CAAiB7E,OAAO,CAACsE,OAAR,CAAgBU,WAAhB,IAA+BhF,OAAO,CAAC8E,GAAxD,MAAiE,CAArE,EAAwE;AACtEhB,MAAAA,SAAS,GAAGkB,WAAZ;AACAd,MAAAA,IAAI,GAAGnB,gBAAgB,CAACoB,GAAjB,CAAqBL,SAArB,CAAP;AACAiB,MAAAA,aAAa,GAAG,IAAhB;AACA;AACD;AACF;;AAED,MAAIb,IAAI,IAAIa,aAAZ,EAA2B;AACzBb,IAAAA,IAAI,CAACgB,SAAL,CAAeC,GAAf,CAAmBX,gBAAnB;AACD,GAFD,MAEO;AACLN,IAAAA,IAAI,GAAG;AACLgB,MAAAA,SAAS,EAAE,IAAI/B,GAAJ,CAAQ,CAACqB,gBAAD,CAAR,CADN;AAELZ,MAAAA,UAFK;AAGLwB,MAAAA,OAAO,EAAEhC,sBAAsB,CAACU,SAAD,EAAY,CAACW,QAAD,EAAWC,KAAX,KAAqB;AAC9D,YAAIb,GAAG,CAACwB,MAAR,EAAgB;AAChB,cAAMV,IAAI,GAAGzE,QAAQ,CAACoF,OAAT,CAAiBb,QAAjB,EAA2BC,KAA3B,CAAb;AACAR,QAAAA,IAAI,CAACgB,SAAL,CAAeK,OAAf,CAAuBC,IAAI,IAAI;AAC7BA,UAAAA,IAAI,CAACf,QAAD,EAAWC,KAAX,EAAkBC,IAAlB,CAAJ;AACD,SAFD;AAIAT,QAAAA,IAAI,CAACN,UAAL,CAAgBe,IAAI,CAACc,KAArB,EAA4BhB,QAA5B,EAAsCE,IAAtC;AACD,OAR8B;AAH1B,KAAP;AAaA5B,IAAAA,gBAAgB,CAAC2C,GAAjB,CAAqB5B,SAArB,EAAgCI,IAAhC;AACD,GArDqE,CAuDtE;AACA;;;AACA,SAAO,MAAM;AACX,UAAMyB,GAAG,GAAGzB,IAAI,CAACgB,SAAjB;AAEAS,IAAAA,GAAG,CAACC,MAAJ,CAAWpB,gBAAX;;AACA,QAAI,CAACmB,GAAG,CAACE,IAAT,EAAe;AACb9C,MAAAA,gBAAgB,CAAC6C,MAAjB,CAAwB9B,SAAxB;AACA,UAAII,IAAI,CAACkB,OAAT,EAAkB,OAAOlB,IAAI,CAACkB,OAAL,CAAa7B,IAAb,GAAoBuC,IAApB,CAAyB,MAAM;AACtD5B,QAAAA,IAAI,CAACN,UAAL,GAAkBM,IAAI,CAACkB,OAAL,GAAerE,SAAjC;AACAgF,QAAAA,MAAM,CAACC,MAAP,CAAc9B,IAAd;AACD,OAHwB,CAAP;AAInB;AACF,GAXD;AAYD,C,CAED;AACA;;;AACA,MAAME,gBAAgB,GAAIf,IAAD,IAAU;AACjC,MAAI4C,KAAK,GAAG,CAAZ;;AACA,OAAK,MAAMnC,SAAX,IAAwBf,gBAAgB,CAACkC,IAAjB,EAAxB,EAAiD;AAC/C,QAAInB,SAAS,CAACe,OAAV,CAAkBxB,IAAlB,MAA4B,CAAhC,EAAmC;AACjC4C,MAAAA,KAAK;;AACL,UAAIA,KAAK,IAAIhD,qBAAb,EAAoC;AAClC,eAAO,IAAP;AACD;AACF;AACF;;AAED,SAAO,KAAP;AACD,CAZD,C,CAcA;;;AACA,MAAMiD,MAAM,GAAG,MAAMhG,QAAQ,IAAI6C,gBAAgB,CAAC8C,IAAjB,GAAwB,GAAzD,C,CAEA;;;AACA,MAAMM,SAAS,GAAG,CAAC9C,IAAD,EAAO+C,IAAP,KAAgB;AAChC,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAO,CAAChD,IAAI,CAACwB,OAAL,CAAauB,IAAb,CAAD,IAAuB,CAAC/C,IAAI,GAAGrD,OAAO,CAACgE,OAAR,CAAgBX,IAAhB,CAAR,MAAmC+C,IAAjE,EAAuEC,CAAC;;AACxE,SAAOA,CAAP;AACD,CAJD;AAMA;;;;;AAGA,MAAMC,eAAN,CAAsB;AAEtB;;;AAGAC,EAAAA,WAAW,CAAC1C,GAAD,EAAM;AACf,SAAKA,GAAL,GAAWA,GAAX;AACD;;AACD2C,EAAAA,YAAY,CAACnD,IAAD,EAAOoD,KAAP,EAAc;AACxB,UAAMC,MAAM,GAAG,KAAK7C,GAAL,CAAS8C,aAAxB;;AACA,QAAI,KAAK9C,GAAL,CAAS+C,UAAT,CAAoBvD,IAApB,EAA0BoD,KAA1B,CAAJ,EAAsC;AACpCC,MAAAA,MAAM,CAACvB,GAAP,CAAW9B,IAAX;;AACA,UAAIoD,KAAK,IAAIA,KAAK,CAACI,WAAN,EAAb,EAAkC;AAChCH,QAAAA,MAAM,CAACvB,GAAP,CAAW9B,IAAI,GAAGvB,aAAlB;AACD;;AACD,aAAO,IAAP;AACD;;AAED4E,IAAAA,MAAM,CAACd,MAAP,CAAcvC,IAAd;AACAqD,IAAAA,MAAM,CAACd,MAAP,CAAcvC,IAAI,GAAGvB,aAArB;AACD;;AAEDgF,EAAAA,WAAW,CAACzD,IAAD,EAAOoB,QAAP,EAAiBf,QAAjB,EAA2BqD,MAA3B,EAAmCC,UAAnC,EAA+CC,IAA/C,EAAqDtC,IAArD,EAA2DuC,IAA3D,EAAiE;AAC1E,UAAMzB,KAAK,GAAGuB,UAAU,CAACG,GAAX,CAAeF,IAAf,IAAuBhG,SAAvB,GAAmCD,MAAjD;AACA,SAAKoG,WAAL,CAAiB3B,KAAjB,EAAwBpC,IAAxB,EAA8BoB,QAA9B,EAAwCf,QAAxC,EAAkDqD,MAAlD,EAA0DC,UAA1D,EAAsEC,IAAtE,EAA4EtC,IAA5E,EAAkFuC,IAAlF;AACD;;AAED,QAAMG,OAAN,CAAchE,IAAd,EAAoBoB,QAApB,EAA8Bf,QAA9B,EAAwCqD,MAAxC,EAAgDC,UAAhD,EAA4DC,IAA5D,EAAkEtC,IAAlE,EAAwEuC,IAAxE,EAA8E;AAC5E,QAAI;AACF,YAAMI,EAAE,GAAG,MAAM5E,IAAI,CAACW,IAAD,EAAOjB,YAAP,CAArB;AACA,UAAI,KAAKyB,GAAL,CAASwB,MAAb,EAAqB;AACrB,YAAM1C,KAAK,CAAC2E,EAAD,CAAX;AACA,UAAI,KAAKzD,GAAL,CAASwB,MAAb,EAAqB;AACrB,WAAKyB,WAAL,CAAiBzD,IAAjB,EAAuBoB,QAAvB,EAAiCf,QAAjC,EAA2CqD,MAA3C,EAAmDC,UAAnD,EAA+DC,IAA/D,EAAqEtC,IAArE,EAA2EuC,IAA3E;AACD,KAND,CAME,OAAO/G,KAAP,EAAc;AACd,UAAIA,KAAK,CAACoH,IAAN,KAAe,QAAnB,EAA6B;AAC3B,aAAKT,WAAL,CAAiBzD,IAAjB,EAAuBoB,QAAvB,EAAiCf,QAAjC,EAA2CqD,MAA3C,EAAmDC,UAAnD,EAA+DC,IAA/D,EAAqEtC,IAArE,EAA2EuC,IAA3E;AACD,OAFD,MAEO;AACL,aAAKE,WAAL,CAAiBjG,SAAjB,EAA4BkC,IAA5B,EAAkCoB,QAAlC,EAA4Cf,QAA5C,EAAsDqD,MAAtD,EAA8DC,UAA9D,EAA0EC,IAA1E,EAAgFtC,IAAhF,EAAsFuC,IAAtF;AACD;AACF;AACF;;AAEDE,EAAAA,WAAW,CAAC3B,KAAD,EAAQpC,IAAR,EAAcoB,QAAd,EAAwBf,QAAxB,EAAkCqD,MAAlC,EAA0CC,UAA1C,EAAsDC,IAAtD,EAA4DtC,IAA5D,EAAkEuC,IAAlE,EAAwE;AACjF,QAAI,KAAKrD,GAAL,CAASwB,MAAT,IAAmB,KAAKmB,YAAL,CAAkBnD,IAAlB,CAAvB,EAAgD;;AAEhD,QAAIoC,KAAK,KAAKtE,SAAd,EAAyB;AACvB;AACA,UAAIwD,IAAI,CAAC6C,IAAL,KAAc5F,sBAAd,IAAwCoF,UAAU,CAACG,GAAX,CAAeF,IAAf,CAA5C,EAAkE;AAChE,aAAKpD,GAAL,CAAS4D,OAAT,CAAiBV,MAAjB,EAAyBE,IAAzB;AACD;AACF,KALD,MAKO;AACL,UAAIxB,KAAK,KAAKzE,MAAd,EAAsB;AACpB;AACA,YAAI2D,IAAI,CAAC6C,IAAL,KAAc5F,sBAAlB,EAA0C,KAAKiC,GAAL,CAAS6D,cAAT,CAAwBrE,IAAxB;;AAE1C,YAAIsB,IAAI,CAAC6C,IAAL,KAAc3F,oBAAd,IAAsCqF,IAAI,CAACS,cAA/C,EAA+D;AAC7D;AACA,gBAAMC,QAAQ,GAAGV,IAAI,CAAC1E,KAAL,KAAezB,SAAf,GACfA,SADe,GACHoF,SAAS,CAAC1B,QAAD,EAAWf,QAAX,CAAT,GAAgC,CAD9C;AAEA,iBAAO,KAAKmE,cAAL,CAAoBxE,IAApB,EAA0B,KAA1B,EAAiC,IAAjC,EAAuCuE,QAAvC,CAAP;AACD,SATmB,CAWpB;AACA;;;AACA,aAAK/D,GAAL,CAAS6D,cAAT,CAAwBX,MAAxB,EAAgC5B,GAAhC,CAAoC8B,IAApC;AACD;AACD;;;;;AAGA,YAAMa,SAAS,GAAGnD,IAAI,CAAC6C,IAAL,KAAc5F,sBAAd,GAAuC6D,KAAK,GAAG1D,UAA/C,GAA4D0D,KAA9E;;AACA,WAAK5B,GAAL,CAASkE,KAAT,CAAeD,SAAf,EAA0BzE,IAA1B;;AACA,UAAIyE,SAAS,KAAK5G,UAAlB,EAA8B,KAAK2G,cAAL,CAAoBxE,IAApB,EAA0B,KAA1B,EAAiC,IAAjC;AAC/B;AACF;AAED;;;;;;;;;;AAQA2E,EAAAA,kBAAkB,CAAClE,SAAD,EAAYJ,QAAZ,EAAsBuE,SAAtB,EAAiCC,UAAjC,EAA6C;AAC7D,QAAI,KAAKrE,GAAL,CAASwB,MAAb,EAAqB;AACrB,QAAI,KAAKxB,GAAL,CAAS+C,UAAT,CAAoB9C,SAApB,CAAJ,EAAoC;AACpC,UAAMoD,IAAI,GAAG,KAAKrD,GAAL,CAASsE,OAAtB;;AACA,UAAMC,aAAa,GAAG,OAAO3D,QAAP,EAAiBC,KAAjB,EAAwBC,IAAxB,KAAiC;AACrD,UAAI,KAAKd,GAAL,CAASwB,MAAb,EAAqB;AACrB,UACE6B,IAAI,CAAC1E,KAAL,KAAezB,SAAf,IACAoF,SAAS,CAAC1B,QAAD,EAAWf,QAAX,CAAT,GAAgCwD,IAAI,CAAC1E,KAFvC,EAGE;AACF,YAAMa,IAAI,GAAG4E,SAAS,CAACjI,OAAO,CAACqI,IAAR,CACrBvE,SADqB,EACV9D,OAAO,CAACsI,QAAR,CAAiBxE,SAAjB,EAA4BW,QAA5B,CADU,CAAD,CAAtB;AAGA,UAAIyD,UAAU,IAAI,CAACA,UAAU,CAAC7E,IAAD,CAA7B,EAAqC,OATgB,CAUrD;;AACA,YAAM0D,MAAM,GAAG/G,OAAO,CAACgE,OAAR,CAAgBX,IAAhB,CAAf;AACA,YAAM4D,IAAI,GAAGjH,OAAO,CAACuI,QAAR,CAAiBlF,IAAjB,CAAb;;AACA,YAAM2D,UAAU,GAAG,KAAKnD,GAAL,CAAS6D,cAAT,CACjB/C,IAAI,CAAC6C,IAAL,KAAc5F,sBAAd,GAAuCyB,IAAvC,GAA8C0D,MAD7B,CAAnB,CAbqD,CAiBrD;;;AACA,UAAI7D,eAAe,CAACiE,GAAhB,CAAoBzC,KAApB,KAA8BC,IAAI,CAACc,KAAL,KAAe9D,eAAjD,EAAkE;AAChE,YAAI,OAAOuF,IAAI,CAACsB,OAAZ,KAAwBvG,aAA5B,EAA2C;AACzC,cAAIwE,KAAJ;;AACA,cAAI;AACFA,YAAAA,KAAK,GAAG,MAAMhE,IAAI,CAACY,IAAD,CAAlB;AACD,WAFD,CAEE,OAAOlD,KAAP,EAAc,CAAE;;AAClB,cAAI,KAAK0D,GAAL,CAASwB,MAAb,EAAqB;AACrB,cAAI,KAAKmB,YAAL,CAAkBnD,IAAlB,EAAwBoD,KAAxB,CAAJ,EAAoC;;AACpC,cAAIA,KAAJ,EAAW;AACT,iBAAKK,WAAL,CAAiBzD,IAAjB,EAAuBoB,QAAvB,EAAiCf,QAAjC,EAA2CqD,MAA3C,EAAmDC,UAAnD,EAA+DC,IAA/D,EAAqEtC,IAArE,EAA2EuC,IAA3E;AACD,WAFD,MAEO;AACL,iBAAKE,WAAL,CAAiBjG,SAAjB,EAA4BkC,IAA5B,EAAkCoB,QAAlC,EAA4Cf,QAA5C,EAAsDqD,MAAtD,EAA8DC,UAA9D,EAA0EC,IAA1E,EAAgFtC,IAAhF,EAAsFuC,IAAtF;AACD;AACF,SAZD,MAYO;AACL,eAAKG,OAAL,CAAahE,IAAb,EAAmBoB,QAAnB,EAA6Bf,QAA7B,EAAuCqD,MAAvC,EAA+CC,UAA/C,EAA2DC,IAA3D,EAAiEtC,IAAjE,EAAuEuC,IAAvE;AACD;AACF,OAhBD,MAgBO;AACL,gBAAQvC,IAAI,CAACc,KAAb;AACA,eAAKlE,eAAL;AACA,eAAKC,gBAAL;AACE,mBAAO,KAAKsF,WAAL,CAAiBzD,IAAjB,EAAuBoB,QAAvB,EAAiCf,QAAjC,EAA2CqD,MAA3C,EAAmDC,UAAnD,EAA+DC,IAA/D,EAAqEtC,IAArE,EAA2EuC,IAA3E,CAAP;;AACF,eAAKzF,eAAL;AACA,eAAKC,aAAL;AACE,mBAAO,KAAK2F,OAAL,CAAahE,IAAb,EAAmBoB,QAAnB,EAA6Bf,QAA7B,EAAuCqD,MAAvC,EAA+CC,UAA/C,EAA2DC,IAA3D,EAAiEtC,IAAjE,EAAuEuC,IAAvE,CAAP;AANF;AAQD;AACF,KA5CD;;AA8CA,UAAMuB,MAAM,GAAGhF,mBAAmB,CAChCK,SADgC,EAEhCJ,QAFgC,EAGhC0E,aAHgC,EAIhC,KAAKvE,GAAL,CAAS6E,QAJuB,EAKhC,KAAK7E,GAL2B,CAAlC;;AAQA,SAAKA,GAAL,CAAS8E,UAAT;;AACA,WAAOF,MAAP;AACD;AAED;;;;;;;;;;AAQA,QAAMG,sBAAN,CAA6BC,QAA7B,EAAuCpE,QAAvC,EAAiDwD,SAAjD,EAA4DL,QAA5D,EAAsE;AACpE;AACA,QAAI,KAAK/D,GAAL,CAASwB,MAAT,IAAmB,KAAKxB,GAAL,CAASiF,aAAT,CAAuB3B,GAAvB,CAA2B1C,QAA3B,CAAvB,EAA6D;;AAE7D,SAAKZ,GAAL,CAASiF,aAAT,CAAuBpD,GAAvB,CAA2BjB,QAA3B,EAAqC,IAArC;;AACA,SAAKZ,GAAL,CAASkF,eAAT;;AAEA,QAAI;AACF,YAAMC,UAAU,GAAG,MAAMnG,QAAQ,CAACgG,QAAD,CAAjC;AACA,UAAI,KAAKhF,GAAL,CAASwB,MAAb,EAAqB;;AACrB,UAAI,KAAKxB,GAAL,CAAS+C,UAAT,CAAoBoC,UAApB,CAAJ,EAAqC;AACnC,eAAO,KAAKnF,GAAL,CAAS8E,UAAT,EAAP;AACD;;AAED,WAAK9E,GAAL,CAASkF,eAAT,GAPE,CASF;AACA;;;AACA,WAAKlB,cAAL,CAAoBmB,UAAU,IAAIH,QAAlC,EAA6CxF,IAAD,IAAU;AACpD,YAAI4F,WAAW,GAAGJ,QAAlB;;AACA,YAAIG,UAAU,IAAIA,UAAU,KAAKhH,SAAjC,EAA4C;AAC1CiH,UAAAA,WAAW,GAAG5F,IAAI,CAACuB,OAAL,CAAaoE,UAAb,EAAyBH,QAAzB,CAAd;AACD,SAFD,MAEO,IAAIxF,IAAI,KAAKrB,SAAb,EAAwB;AAC7BiH,UAAAA,WAAW,GAAGjJ,OAAO,CAACqI,IAAR,CAAaQ,QAAb,EAAuBxF,IAAvB,CAAd;AACD;;AACD,eAAO4E,SAAS,CAACgB,WAAD,CAAhB;AACD,OARD,EAQG,KARH,EAQUrB,QARV;AASD,KApBD,CAoBE,OAAMzH,KAAN,EAAa;AACb,UAAI,KAAK0D,GAAL,CAASqF,YAAT,CAAsB/I,KAAtB,CAAJ,EAAkC;AAChC,eAAO,KAAK0D,GAAL,CAAS8E,UAAT,EAAP;AACD;AACF;AACF;AAED;;;;;;;AAKAQ,EAAAA,OAAO,CAACC,OAAD,EAAU3C,KAAV,EAAiB4C,WAAjB,EAA8BnC,IAA9B,EAAoCoC,QAApC,EAA8C;AACnD,UAAMC,EAAE,GAAGF,WAAW,CAACD,OAAD,CAAtB;AACA,UAAMI,KAAK,GAAG/C,KAAK,CAACI,WAAN,EAAd;;AACA,UAAM4C,MAAM,GAAG,KAAK5F,GAAL,CAAS6D,cAAT,CAAwB1H,OAAO,CAACgE,OAAR,CAAgBuF,EAAhB,CAAxB,CAAf;;AACA,UAAMG,IAAI,GAAG1J,OAAO,CAACuI,QAAR,CAAiBgB,EAAjB,CAAb,CAJmD,CAMnD;;AACA,QAAIC,KAAJ,EAAW,KAAK3F,GAAL,CAAS6D,cAAT,CAAwB6B,EAAxB;AACX,QAAIE,MAAM,CAACtC,GAAP,CAAWuC,IAAX,CAAJ,EAAsB;AACtBD,IAAAA,MAAM,CAACtE,GAAP,CAAWuE,IAAX;;AAEA,QAAI,CAACxC,IAAI,CAACyC,aAAN,IAAuBL,QAAQ,KAAK,IAAxC,EAA8C;AAC5C,WAAKzF,GAAL,CAASkE,KAAT,CAAeyB,KAAK,GAAGtI,UAAH,GAAgBF,MAApC,EAA4CuI,EAA5C,EAAgD9C,KAAhD;AACD;AACF;;AAEDmD,EAAAA,SAAS,CAAClG,QAAD,EAAWL,IAAX,EAAiBwG,EAAjB,EAAqBR,WAArB,EAAkC;AACzC,QAAI,KAAKxF,GAAL,CAASwB,MAAb,EAAqB;;AACrB,UAAMoD,MAAM,GAAG,KAAKT,kBAAL,CACb6B,EAAE,CAAC/F,SADU,EAEb9D,OAAO,CAACsE,OAAR,CAAgBZ,QAAQ,IAAImG,EAAE,CAAC/F,SAA/B,CAFa,EAGbuF,WAHa,EAIbQ,EAAE,CAAC3B,UAJU,CAAf;;AAMA,SAAKrE,GAAL,CAASiG,cAAT,CAAwBzG,IAAxB,EAA8BoF,MAA9B;AACD;AAED;;;;;;;;;;AAQA,QAAMZ,cAAN,CAAqBxE,IAArB,EAA2B4E,SAA3B,EAAsCqB,QAAtC,EAAgDS,UAAhD,EAA4D;AAC1D,QAAI,KAAKlG,GAAL,CAASwB,MAAb,EAAqB;AACnB;AACD;;AACD,UAAM6B,IAAI,GAAG,KAAKrD,GAAL,CAASsE,OAAtB;AACA,UAAMkB,WAAW,GAAG,OAAOpB,SAAP,KAAqBhG,aAArB,GAAqCgG,SAArC,GAAiD9F,WAArE;;AAEA,UAAM0H,EAAE,GAAG,KAAKhG,GAAL,CAASmG,gBAAT,CAA0B3G,IAA1B,CAAX,CAP0D,CAS1D;;;AACA,QAAI;AACF,YAAMoD,KAAK,GAAG,MAAM3D,WAAW,CAAC+G,EAAE,CAACI,UAAJ,CAAX,CAA2BJ,EAAE,CAAC/F,SAA9B,CAApB;AACA,UAAI,KAAKD,GAAL,CAASwB,MAAb,EAAqB;;AACrB,UAAI,KAAKxB,GAAL,CAAS+C,UAAT,CAAoBiD,EAAE,CAAC/F,SAAvB,EAAkC2C,KAAlC,CAAJ,EAA8C;AAC5C,cAAM,IAAN;AACD;;AACD,UAAIA,KAAK,CAACI,WAAN,EAAJ,EAAyB;AACvB;AACA,YAAI,CAACgD,EAAE,CAAC3B,UAAR,EAAoB,KAAKiB,OAAL,CAAaE,WAAW,CAAChG,IAAD,CAAxB,EAAgCoD,KAAhC,EAAuC4C,WAAvC,EAAoDnC,IAApD,EAA0DoC,QAA1D,EAFG,CAIvB;;AACA,YAAIS,UAAU,IAAIA,UAAU,GAAG7C,IAAI,CAAC1E,KAApC,EAA2C,OALpB,CAOvB;;AACA,aAAKqB,GAAL,CAASqG,SAAT,CAAmBL,EAAE,CAAC/F,SAAtB,EAAiC;AAC/BqG,UAAAA,UAAU,EAAEC,KAAK,IAAIP,EAAE,CAACQ,UAAH,CAAcD,KAAd,CADU;AAE/BE,UAAAA,eAAe,EAAEF,KAAK,IAAIP,EAAE,CAACU,SAAH,CAAaH,KAAb,CAFK;AAG/B,aAAG/H,KAAK,CAAC6E,IAAI,CAAC1E,KAAL,IAAcuH,UAAU,IAAI,CAA5B,CAAD;AAHuB,SAAjC,EAIGS,EAJH,CAIMnJ,QAJN,EAIiB+I,KAAD,IAAW;AACzB;AACA,cAAI,KAAKvG,GAAL,CAASwB,MAAb,EAAqB;AACnB;AACD;;AACD,cAAI+E,KAAK,CAAC3D,KAAN,CAAYI,WAAZ,MAA6B,CAACgD,EAAE,CAACQ,UAAH,CAAcD,KAAd,CAAlC,EAAwD;AAExD,gBAAMK,UAAU,GAAGzK,OAAO,CAACqI,IAAR,CAAawB,EAAE,CAAC/F,SAAhB,EAA2BsG,KAAK,CAAC/G,IAAjC,CAAnB;AAPyB,gBAQlBoB,QARkB,GAQN2F,KARM,CAQlB3F,QARkB;;AAUzB,cAAIoF,EAAE,CAAClC,cAAH,IAAqByC,KAAK,CAAC3D,KAAN,CAAYiE,cAAZ,EAAzB,EAAuD;AACrD;AACA;AACA,kBAAM9C,QAAQ,GAAGV,IAAI,CAAC1E,KAAL,KAAezB,SAAf,GACfA,SADe,GACHoF,SAAS,CAACsE,UAAD,EAAazK,OAAO,CAACsE,OAAR,CAAgBuF,EAAE,CAAC/F,SAAnB,CAAb,CAAT,GAAuD,CADrE;;AAGA,iBAAK8E,sBAAL,CAA4B6B,UAA5B,EAAwChG,QAAxC,EAAkD4E,WAAlD,EAA+DzB,QAA/D;AACD,WAPD,MAOO;AACL,iBAAKuB,OAAL,CAAasB,UAAb,EAAyBL,KAAK,CAAC3D,KAA/B,EAAsC4C,WAAtC,EAAmDnC,IAAnD,EAAyDoC,QAAzD;AACD;AACF,SAxBD,EAwBGkB,EAxBH,CAwBMpJ,QAxBN,EAwBgBc,QAxBhB,EAwB0BsI,EAxB1B,CAwB6BlJ,OAxB7B,EAwBsC,MAAM;AAC1C,eAAKuC,GAAL,CAAS8E,UAAT;AACD,SA1BD;AA2BD,OAnCD,MAmCO;AACL,aAAKQ,OAAL,CAAaU,EAAE,CAAC/F,SAAhB,EAA2B2C,KAA3B,EAAkC4C,WAAlC,EAA+CnC,IAA/C,EAAqDoC,QAArD;;AACA,aAAKzF,GAAL,CAAS8E,UAAT;AACD;AACF,KA7CD,CA6CE,OAAOxI,KAAP,EAAc;AACd,UAAI,CAACA,KAAD,IAAU,KAAK0D,GAAL,CAASqF,YAAT,CAAsB/I,KAAtB,CAAd,EAA4C;AAC1C;AACA,aAAK0D,GAAL,CAAS8E,UAAT;;AACA,aAAK9E,GAAL,CAAS8E,UAAT;AACD;AACF;;AAED,QAAIzB,IAAI,CAACyD,UAAL,IAAmBrB,QAAQ,KAAK,IAApC,EAA0C;AACxC,UAAI,OAAOrB,SAAP,KAAqBhG,aAAzB,EAAwC;AACtC;AACA,aAAK2H,SAAL,CAAe7I,SAAf,EAA0BsC,IAA1B,EAAgCwG,EAAhC,EAAoCR,WAApC;AACD,OAHD,MAGO;AACL,YAAI3F,QAAJ;;AACA,YAAI;AACFA,UAAAA,QAAQ,GAAG,MAAMb,QAAQ,CAACgH,EAAE,CAAC/F,SAAJ,CAAzB;AACD,SAFD,CAEE,OAAO8G,CAAP,EAAU,CAAE;;AACd,aAAKhB,SAAL,CAAelG,QAAf,EAAyBL,IAAzB,EAA+BwG,EAA/B,EAAmCR,WAAnC;AACD;AACF;AACF;;AA/SqB;;AAmTtBwB,MAAM,CAACC,OAAP,GAAiBxE,eAAjB;AACAuE,MAAM,CAACC,OAAP,CAAe5E,MAAf,GAAwBA,MAAxB","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst sysPath = require('path');\nconst { promisify } = require('util');\n\nlet fsevents;\ntry {\n  fsevents = require('fsevents');\n} catch (error) {\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\n}\n\nif (fsevents) {\n  // TODO: real check\n  const mtch = process.version.match(/v(\\d+)\\.(\\d+)/);\n  if (mtch && mtch[1] && mtch[2]) {\n    const maj = Number.parseInt(mtch[1], 10);\n    const min = Number.parseInt(mtch[2], 10);\n    if (maj === 8 && min < 16) {\n      fsevents = undefined;\n    }\n  }\n}\n\nconst {\n  EV_ADD,\n  EV_CHANGE,\n  EV_ADD_DIR,\n  EV_UNLINK,\n  EV_ERROR,\n  STR_DATA,\n  STR_END,\n  FSEVENT_CREATED,\n  FSEVENT_MODIFIED,\n  FSEVENT_DELETED,\n  FSEVENT_MOVED,\n  // FSEVENT_CLONED,\n  FSEVENT_UNKNOWN,\n  FSEVENT_TYPE_DIRECTORY,\n  FSEVENT_TYPE_SYMLINK,\n\n  ROOT_GLOBSTAR,\n  DIR_SUFFIX,\n  DOT_SLASH,\n  FUNCTION_TYPE,\n  EMPTY_FN,\n  IDENTITY_FN\n} = require('./constants');\nconst FS_MODE_READ = 'r';\n\nconst Depth = (value) => isNaN(value) ? {} : {depth: value};\n\nconst stat = promisify(fs.stat);\nconst open = promisify(fs.open);\nconst close = promisify(fs.close);\nconst lstat = promisify(fs.lstat);\nconst realpath = promisify(fs.realpath);\n\nconst statMethods = { stat, lstat };\n\n/**\n * @typedef {String} Path\n */\n\n/**\n * @typedef {Object} FsEventsWatchContainer\n * @property {Set<Function>} listeners\n * @property {Function} rawEmitter\n * @property {{stop: Function}} watcher\n */\n\n// fsevents instance helper functions\n/**\n * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)\n * @type {Map<Path,FsEventsWatchContainer>}\n */\nconst FSEventsWatchers = new Map();\n\n// Threshold of duplicate path prefixes at which to start\n// consolidating going forward\nconst consolidateThreshhold = 10;\n\nconst wrongEventFlags = new Set([\n  69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912\n]);\n\n/**\n * Instantiates the fsevents interface\n * @param {Path} path path to be watched\n * @param {Function} callback called when fsevents is bound and ready\n * @returns {{stop: Function}} new fsevents instance\n */\nconst createFSEventsInstance = (path, callback) => {\n  const stop = fsevents.watch(path, callback);\n  return {stop};\n};\n\n/**\n * Instantiates the fsevents interface or binds listeners to an existing one covering\n * the same file tree.\n * @param {Path} path           - to be watched\n * @param {Path} realPath       - real path for symlinks\n * @param {Function} listener   - called when fsevents emits events\n * @param {Function} rawEmitter - passes data to listeners of the 'raw' event\n * @returns {Function} closer\n */\nfunction setFSEventsListener(path, realPath, listener, rawEmitter, fsw) {\n  let watchPath = sysPath.extname(path) ? sysPath.dirname(path) : path;\n  const parentPath = sysPath.dirname(watchPath);\n  let cont = FSEventsWatchers.get(watchPath);\n\n  // If we've accumulated a substantial number of paths that\n  // could have been consolidated by watching one directory\n  // above the current one, create a watcher on the parent\n  // path instead, so that we do consolidate going forward.\n  if (couldConsolidate(parentPath)) {\n    watchPath = parentPath;\n  }\n\n  const resolvedPath = sysPath.resolve(path);\n  const hasSymlink = resolvedPath !== realPath;\n\n  const filteredListener = (fullPath, flags, info) => {\n    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\n    if (\n      fullPath === resolvedPath ||\n      !fullPath.indexOf(resolvedPath + sysPath.sep)\n    ) listener(fullPath, flags, info);\n  };\n\n  // check if there is already a watcher on a parent path\n  // modifies `watchPath` to the parent path when it finds a match\n  let watchedParent = false;\n  for (const watchedPath of FSEventsWatchers.keys()) {\n    if (realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep) === 0) {\n      watchPath = watchedPath;\n      cont = FSEventsWatchers.get(watchPath);\n      watchedParent = true;\n      break;\n    }\n  }\n\n  if (cont || watchedParent) {\n    cont.listeners.add(filteredListener);\n  } else {\n    cont = {\n      listeners: new Set([filteredListener]),\n      rawEmitter,\n      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {\n        if (fsw.closed) return;\n        const info = fsevents.getInfo(fullPath, flags);\n        cont.listeners.forEach(list => {\n          list(fullPath, flags, info);\n        });\n\n        cont.rawEmitter(info.event, fullPath, info);\n      })\n    };\n    FSEventsWatchers.set(watchPath, cont);\n  }\n\n  // removes this instance's listeners and closes the underlying fsevents\n  // instance if there are no more listeners left\n  return () => {\n    const lst = cont.listeners;\n\n    lst.delete(filteredListener);\n    if (!lst.size) {\n      FSEventsWatchers.delete(watchPath);\n      if (cont.watcher) return cont.watcher.stop().then(() => {\n        cont.rawEmitter = cont.watcher = undefined;\n        Object.freeze(cont);\n      });\n    }\n  };\n}\n\n// Decide whether or not we should start a new higher-level\n// parent watcher\nconst couldConsolidate = (path) => {\n  let count = 0;\n  for (const watchPath of FSEventsWatchers.keys()) {\n    if (watchPath.indexOf(path) === 0) {\n      count++;\n      if (count >= consolidateThreshhold) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n// returns boolean indicating whether fsevents can be used\nconst canUse = () => fsevents && FSEventsWatchers.size < 128;\n\n// determines subdirectory traversal levels from root to path\nconst calcDepth = (path, root) => {\n  let i = 0;\n  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;\n  return i;\n};\n\n/**\n * @mixin\n */\nclass FsEventsHandler {\n\n/**\n * @param {import('../index').FSWatcher} fsw\n */\nconstructor(fsw) {\n  this.fsw = fsw;\n}\ncheckIgnored(path, stats) {\n  const ipaths = this.fsw._ignoredPaths;\n  if (this.fsw._isIgnored(path, stats)) {\n    ipaths.add(path);\n    if (stats && stats.isDirectory()) {\n      ipaths.add(path + ROOT_GLOBSTAR);\n    }\n    return true;\n  }\n\n  ipaths.delete(path);\n  ipaths.delete(path + ROOT_GLOBSTAR);\n}\n\naddOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n  const event = watchedDir.has(item) ? EV_CHANGE : EV_ADD;\n  this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n}\n\nasync checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n  try {\n    const fd = await open(path, FS_MODE_READ);\n    if (this.fsw.closed) return;\n    await close(fd);\n    if (this.fsw.closed) return;\n    this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n  } catch (error) {\n    if (error.code === 'EACCES') {\n      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n    } else {\n      this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n    }\n  }\n}\n\nhandleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) {\n  if (this.fsw.closed || this.checkIgnored(path)) return;\n\n  if (event === EV_UNLINK) {\n    // suppress unlink events on never before seen files\n    if (info.type === FSEVENT_TYPE_DIRECTORY || watchedDir.has(item)) {\n      this.fsw._remove(parent, item);\n    }\n  } else {\n    if (event === EV_ADD) {\n      // track new directories\n      if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path);\n\n      if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) {\n        // push symlinks back to the top of the stack to get handled\n        const curDepth = opts.depth === undefined ?\n          undefined : calcDepth(fullPath, realPath) + 1;\n        return this._addToFsEvents(path, false, true, curDepth);\n      }\n\n      // track new paths\n      // (other than symlinks being followed, which will be tracked soon)\n      this.fsw._getWatchedDir(parent).add(item);\n    }\n    /**\n     * @type {'add'|'addDir'|'unlink'|'unlinkDir'}\n     */\n    const eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;\n    this.fsw._emit(eventName, path);\n    if (eventName === EV_ADD_DIR) this._addToFsEvents(path, false, true);\n  }\n}\n\n/**\n * Handle symlinks encountered during directory scan\n * @param {String} watchPath  - file/dir path to be watched with fsevents\n * @param {String} realPath   - real path (in case of symlinks)\n * @param {Function} transform  - path transformer\n * @param {Function} globFilter - path filter in case a glob pattern was provided\n * @returns {Function} closer for the watcher instance\n*/\n_watchWithFsEvents(watchPath, realPath, transform, globFilter) {\n  if (this.fsw.closed) return;\n  if (this.fsw._isIgnored(watchPath)) return;\n  const opts = this.fsw.options;\n  const watchCallback = async (fullPath, flags, info) => {\n    if (this.fsw.closed) return;\n    if (\n      opts.depth !== undefined &&\n      calcDepth(fullPath, realPath) > opts.depth\n    ) return;\n    const path = transform(sysPath.join(\n      watchPath, sysPath.relative(watchPath, fullPath)\n    ));\n    if (globFilter && !globFilter(path)) return;\n    // ensure directories are tracked\n    const parent = sysPath.dirname(path);\n    const item = sysPath.basename(path);\n    const watchedDir = this.fsw._getWatchedDir(\n      info.type === FSEVENT_TYPE_DIRECTORY ? path : parent\n    );\n\n    // correct for wrong events emitted\n    if (wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN) {\n      if (typeof opts.ignored === FUNCTION_TYPE) {\n        let stats;\n        try {\n          stats = await stat(path);\n        } catch (error) {}\n        if (this.fsw.closed) return;\n        if (this.checkIgnored(path, stats)) return;\n        if (stats) {\n          this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n        } else {\n          this.handleEvent(EV_UNLINK, path, fullPath, realPath, parent, watchedDir, item, info, opts);\n        }\n      } else {\n        this.checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      }\n    } else {\n      switch (info.event) {\n      case FSEVENT_CREATED:\n      case FSEVENT_MODIFIED:\n        return this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      case FSEVENT_DELETED:\n      case FSEVENT_MOVED:\n        return this.checkFd(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n      }\n    }\n  };\n\n  const closer = setFSEventsListener(\n    watchPath,\n    realPath,\n    watchCallback,\n    this.fsw._emitRaw,\n    this.fsw\n  );\n\n  this.fsw._emitReady();\n  return closer;\n}\n\n/**\n * Handle symlinks encountered during directory scan\n * @param {String} linkPath path to symlink\n * @param {String} fullPath absolute path to the symlink\n * @param {Function} transform pre-existing path transformer\n * @param {Number} curDepth level of subdirectories traversed to where symlink is\n * @returns {Promise<void>}\n */\nasync _handleFsEventsSymlink(linkPath, fullPath, transform, curDepth) {\n  // don't follow the same symlink more than once\n  if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;\n\n  this.fsw._symlinkPaths.set(fullPath, true);\n  this.fsw._incrReadyCount();\n\n  try {\n    const linkTarget = await realpath(linkPath);\n    if (this.fsw.closed) return;\n    if (this.fsw._isIgnored(linkTarget)) {\n      return this.fsw._emitReady();\n    }\n\n    this.fsw._incrReadyCount();\n\n    // add the linkTarget for watching with a wrapper for transform\n    // that causes emitted paths to incorporate the link's path\n    this._addToFsEvents(linkTarget || linkPath, (path) => {\n      let aliasedPath = linkPath;\n      if (linkTarget && linkTarget !== DOT_SLASH) {\n        aliasedPath = path.replace(linkTarget, linkPath);\n      } else if (path !== DOT_SLASH) {\n        aliasedPath = sysPath.join(linkPath, path);\n      }\n      return transform(aliasedPath);\n    }, false, curDepth);\n  } catch(error) {\n    if (this.fsw._handleError(error)) {\n      return this.fsw._emitReady();\n    }\n  }\n}\n\n/**\n *\n * @param {Path} newPath\n * @param {fs.Stats} stats\n */\nemitAdd(newPath, stats, processPath, opts, forceAdd) {\n  const pp = processPath(newPath);\n  const isDir = stats.isDirectory();\n  const dirObj = this.fsw._getWatchedDir(sysPath.dirname(pp));\n  const base = sysPath.basename(pp);\n\n  // ensure empty dirs get tracked\n  if (isDir) this.fsw._getWatchedDir(pp);\n  if (dirObj.has(base)) return;\n  dirObj.add(base);\n\n  if (!opts.ignoreInitial || forceAdd === true) {\n    this.fsw._emit(isDir ? EV_ADD_DIR : EV_ADD, pp, stats);\n  }\n}\n\ninitWatch(realPath, path, wh, processPath) {\n  if (this.fsw.closed) return;\n  const closer = this._watchWithFsEvents(\n    wh.watchPath,\n    sysPath.resolve(realPath || wh.watchPath),\n    processPath,\n    wh.globFilter\n  );\n  this.fsw._addPathCloser(path, closer);\n}\n\n/**\n * Handle added path with fsevents\n * @param {String} path file/dir path or glob pattern\n * @param {Function|Boolean=} transform converts working path to what the user expects\n * @param {Boolean=} forceAdd ensure add is emitted\n * @param {Number=} priorDepth Level of subdirectories already traversed.\n * @returns {Promise<void>}\n */\nasync _addToFsEvents(path, transform, forceAdd, priorDepth) {\n  if (this.fsw.closed) {\n    return;\n  }\n  const opts = this.fsw.options;\n  const processPath = typeof transform === FUNCTION_TYPE ? transform : IDENTITY_FN;\n\n  const wh = this.fsw._getWatchHelpers(path);\n\n  // evaluate what is at the path we're being asked to watch\n  try {\n    const stats = await statMethods[wh.statMethod](wh.watchPath);\n    if (this.fsw.closed) return;\n    if (this.fsw._isIgnored(wh.watchPath, stats)) {\n      throw null;\n    }\n    if (stats.isDirectory()) {\n      // emit addDir unless this is a glob parent\n      if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd);\n\n      // don't recurse further if it would exceed depth setting\n      if (priorDepth && priorDepth > opts.depth) return;\n\n      // scan the contents of the dir\n      this.fsw._readdirp(wh.watchPath, {\n        fileFilter: entry => wh.filterPath(entry),\n        directoryFilter: entry => wh.filterDir(entry),\n        ...Depth(opts.depth - (priorDepth || 0))\n      }).on(STR_DATA, (entry) => {\n        // need to check filterPath on dirs b/c filterDir is less restrictive\n        if (this.fsw.closed) {\n          return;\n        }\n        if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;\n\n        const joinedPath = sysPath.join(wh.watchPath, entry.path);\n        const {fullPath} = entry;\n\n        if (wh.followSymlinks && entry.stats.isSymbolicLink()) {\n          // preserve the current depth here since it can't be derived from\n          // real paths past the symlink\n          const curDepth = opts.depth === undefined ?\n            undefined : calcDepth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;\n\n          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);\n        } else {\n          this.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);\n        }\n      }).on(EV_ERROR, EMPTY_FN).on(STR_END, () => {\n        this.fsw._emitReady();\n      });\n    } else {\n      this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);\n      this.fsw._emitReady();\n    }\n  } catch (error) {\n    if (!error || this.fsw._handleError(error)) {\n      // TODO: Strange thing: \"should not choke on an ignored watch path\" will be failed without 2 ready calls -__-\n      this.fsw._emitReady();\n      this.fsw._emitReady();\n    }\n  }\n\n  if (opts.persistent && forceAdd !== true) {\n    if (typeof transform === FUNCTION_TYPE) {\n      // realpath has already been resolved\n      this.initWatch(undefined, path, wh, processPath);\n    } else {\n      let realPath;\n      try {\n        realPath = await realpath(wh.watchPath);\n      } catch (e) {}\n      this.initWatch(realPath, path, wh, processPath);\n    }\n  }\n}\n\n}\n\nmodule.exports = FsEventsHandler;\nmodule.exports.canUse = canUse;\n"]},"metadata":{},"sourceType":"script"}