{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst childProcess = require(\"child_process\");\n\nconst clc = require(\"cli-color\");\n\nconst command_1 = require(\"../command\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst error_1 = require(\"../error\");\n\nconst utils = require(\"../utils\");\n\nconst logger = require(\"../logger\");\n\nconst controller = require(\"../emulator/controller\");\n\nconst databaseEmulator_1 = require(\"../emulator/databaseEmulator\");\n\nconst registry_1 = require(\"../emulator/registry\");\n\nconst firestoreEmulator_1 = require(\"../emulator/firestoreEmulator\");\n\nconst commandUtils = require(\"../emulator/commandUtils\");\n\nconst getProjectId = require(\"../getProjectId\");\n\nfunction runScript(script, extraEnv) {\n  return __awaiter(this, void 0, void 0, function* () {\n    utils.logBullet(`Running script: ${clc.bold(script)}`);\n    const env = Object.assign({}, process.env, extraEnv);\n    const databaseInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.DATABASE);\n\n    if (databaseInstance) {\n      const info = databaseInstance.getInfo();\n      const address = `${info.host}:${info.port}`;\n      env[databaseEmulator_1.DatabaseEmulator.DATABASE_EMULATOR_ENV] = address;\n    }\n\n    const firestoreInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.FIRESTORE);\n\n    if (firestoreInstance) {\n      const info = firestoreInstance.getInfo();\n      const address = `${info.host}:${info.port}`;\n      env[firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV] = address;\n      env[firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV_ALT] = address;\n    }\n\n    const proc = childProcess.spawn(script, {\n      stdio: [\"inherit\", \"inherit\", \"inherit\"],\n      shell: true,\n      windowsHide: true,\n      env\n    });\n    logger.debug(`Running ${script} with environment ${JSON.stringify(env)}`);\n    return new Promise((resolve, reject) => {\n      proc.on(\"error\", err => {\n        utils.logWarning(`There was an error running the script: ${JSON.stringify(err)}`);\n        reject();\n      });\n      const exitDelayMs = 500;\n      proc.once(\"exit\", (code, signal) => {\n        if (signal) {\n          utils.logWarning(`Script exited with signal: ${signal}`);\n          setTimeout(reject, exitDelayMs);\n          return;\n        }\n\n        const exitCode = code || 0;\n\n        if (code === 0) {\n          utils.logSuccess(`Script exited successfully (code 0)`);\n        } else {\n          utils.logWarning(`Script exited unsuccessfully (code ${code})`);\n        }\n\n        setTimeout(() => {\n          resolve(exitCode);\n        }, exitDelayMs);\n      });\n    });\n  });\n}\n\nmodule.exports = new command_1.Command(\"emulators:exec <script>\").before(commandUtils.beforeEmulatorCommand).description(\"start the local Firebase emulators, \" + \"run a test script, then shut down the emulators\").option(commandUtils.FLAG_ONLY, commandUtils.DESC_ONLY).option(commandUtils.FLAG_INSPECT_FUNCTIONS, commandUtils.DESC_INSPECT_FUNCTIONS).action((script, options) => __awaiter(this, void 0, void 0, function* () {\n  const projectId = getProjectId(options, true);\n  const extraEnv = {};\n\n  if (projectId) {\n    extraEnv.GCLOUD_PROJECT = projectId;\n  }\n\n  let exitCode = 0;\n\n  try {\n    yield controller.startAll(options);\n    exitCode = yield runScript(script, extraEnv);\n  } catch (e) {\n    logger.debug(\"Error in emulators:exec\", e);\n    throw e;\n  } finally {\n    yield controller.cleanShutdown();\n  }\n\n  if (exitCode !== 0) {\n    throw new error_1.FirebaseError(`Script \"${clc.bold(script)}\" exited with code ${exitCode}`, {\n      exit: exitCode\n    });\n  }\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/emulators-exec.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","childProcess","require","clc","command_1","types_1","error_1","utils","logger","controller","databaseEmulator_1","registry_1","firestoreEmulator_1","commandUtils","getProjectId","runScript","script","extraEnv","logBullet","bold","env","assign","process","databaseInstance","EmulatorRegistry","get","Emulators","DATABASE","info","getInfo","address","host","port","DatabaseEmulator","DATABASE_EMULATOR_ENV","firestoreInstance","FIRESTORE","FirestoreEmulator","FIRESTORE_EMULATOR_ENV","FIRESTORE_EMULATOR_ENV_ALT","proc","spawn","stdio","shell","windowsHide","debug","JSON","stringify","on","err","logWarning","exitDelayMs","once","code","signal","setTimeout","exitCode","logSuccess","module","Command","before","beforeEmulatorCommand","description","option","FLAG_ONLY","DESC_ONLY","FLAG_INSPECT_FUNCTIONS","DESC_INSPECT_FUNCTIONS","action","options","projectId","GCLOUD_PROJECT","startAll","cleanShutdown","FirebaseError","exit"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst childProcess = require(\"child_process\");\nconst clc = require(\"cli-color\");\nconst command_1 = require(\"../command\");\nconst types_1 = require(\"../emulator/types\");\nconst error_1 = require(\"../error\");\nconst utils = require(\"../utils\");\nconst logger = require(\"../logger\");\nconst controller = require(\"../emulator/controller\");\nconst databaseEmulator_1 = require(\"../emulator/databaseEmulator\");\nconst registry_1 = require(\"../emulator/registry\");\nconst firestoreEmulator_1 = require(\"../emulator/firestoreEmulator\");\nconst commandUtils = require(\"../emulator/commandUtils\");\nconst getProjectId = require(\"../getProjectId\");\nfunction runScript(script, extraEnv) {\n    return __awaiter(this, void 0, void 0, function* () {\n        utils.logBullet(`Running script: ${clc.bold(script)}`);\n        const env = Object.assign({}, process.env, extraEnv);\n        const databaseInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.DATABASE);\n        if (databaseInstance) {\n            const info = databaseInstance.getInfo();\n            const address = `${info.host}:${info.port}`;\n            env[databaseEmulator_1.DatabaseEmulator.DATABASE_EMULATOR_ENV] = address;\n        }\n        const firestoreInstance = registry_1.EmulatorRegistry.get(types_1.Emulators.FIRESTORE);\n        if (firestoreInstance) {\n            const info = firestoreInstance.getInfo();\n            const address = `${info.host}:${info.port}`;\n            env[firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV] = address;\n            env[firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV_ALT] = address;\n        }\n        const proc = childProcess.spawn(script, {\n            stdio: [\"inherit\", \"inherit\", \"inherit\"],\n            shell: true,\n            windowsHide: true,\n            env,\n        });\n        logger.debug(`Running ${script} with environment ${JSON.stringify(env)}`);\n        return new Promise((resolve, reject) => {\n            proc.on(\"error\", (err) => {\n                utils.logWarning(`There was an error running the script: ${JSON.stringify(err)}`);\n                reject();\n            });\n            const exitDelayMs = 500;\n            proc.once(\"exit\", (code, signal) => {\n                if (signal) {\n                    utils.logWarning(`Script exited with signal: ${signal}`);\n                    setTimeout(reject, exitDelayMs);\n                    return;\n                }\n                const exitCode = code || 0;\n                if (code === 0) {\n                    utils.logSuccess(`Script exited successfully (code 0)`);\n                }\n                else {\n                    utils.logWarning(`Script exited unsuccessfully (code ${code})`);\n                }\n                setTimeout(() => {\n                    resolve(exitCode);\n                }, exitDelayMs);\n            });\n        });\n    });\n}\nmodule.exports = new command_1.Command(\"emulators:exec <script>\")\n    .before(commandUtils.beforeEmulatorCommand)\n    .description(\"start the local Firebase emulators, \" + \"run a test script, then shut down the emulators\")\n    .option(commandUtils.FLAG_ONLY, commandUtils.DESC_ONLY)\n    .option(commandUtils.FLAG_INSPECT_FUNCTIONS, commandUtils.DESC_INSPECT_FUNCTIONS)\n    .action((script, options) => __awaiter(this, void 0, void 0, function* () {\n    const projectId = getProjectId(options, true);\n    const extraEnv = {};\n    if (projectId) {\n        extraEnv.GCLOUD_PROJECT = projectId;\n    }\n    let exitCode = 0;\n    try {\n        yield controller.startAll(options);\n        exitCode = yield runScript(script, extraEnv);\n    }\n    catch (e) {\n        logger.debug(\"Error in emulators:exec\", e);\n        throw e;\n    }\n    finally {\n        yield controller.cleanShutdown();\n    }\n    if (exitCode !== 0) {\n        throw new error_1.FirebaseError(`Script \"${clc.bold(script)}\" exited with code ${exitCode}`, {\n            exit: exitCode,\n        });\n    }\n}));\n"]},"metadata":{},"sourceType":"script"}