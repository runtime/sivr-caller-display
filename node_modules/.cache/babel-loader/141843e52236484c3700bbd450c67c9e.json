{"ast":null,"code":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar Auth2Client = require('./oauth2client.js');\n\nvar util = require('util');\n/**\n * User Refresh Token credentials.\n *\n * @param {string} clientId The authentication client ID.\n * @param {string} clientSecret The authentication client secret.\n * @param {string} refreshToken The authentication refresh token.\n * @constructor\n */\n\n\nfunction UserRefreshClient(clientId, clientSecret, refreshToken) {\n  UserRefreshClient.super_.call(this, clientId, clientSecret); // Named to avoid collision with the method refreshToken_\n\n  this._refreshToken = refreshToken;\n}\n\nutil.inherits(UserRefreshClient, Auth2Client); // Executes the given callback if it is not null.\n\nfunction callback(c, err, res) {\n  if (c) {\n    c(err, res);\n  }\n}\n/**\n * Refreshes the access token.\n * @param {object=} ignored_\n * @param {function=} opt_callback Optional callback.\n * @private\n */\n\n\nUserRefreshClient.prototype.refreshToken_ = function (ignored_, opt_callback) {\n  UserRefreshClient.super_.prototype.refreshToken_.call(this, this._refreshToken, opt_callback);\n};\n/**\n * Create a UserRefreshClient credentials instance using the given input options.\n * @param {object=} json The input object.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nUserRefreshClient.prototype.fromJSON = function (json, opt_callback) {\n  var that = this;\n\n  if (!json) {\n    callback(opt_callback, new Error('Must pass in a JSON object containing the user refresh token'));\n    return;\n  }\n\n  if (json.type !== 'authorized_user') {\n    callback(opt_callback, new Error('The incoming JSON object does not have the \"authorized_user\" type'));\n    return;\n  }\n\n  if (!json.client_id) {\n    callback(opt_callback, new Error('The incoming JSON object does not contain a client_id field'));\n    return;\n  }\n\n  if (!json.client_secret) {\n    callback(opt_callback, new Error('The incoming JSON object does not contain a client_secret field'));\n    return;\n  }\n\n  if (!json.refresh_token) {\n    callback(opt_callback, new Error('The incoming JSON object does not contain a refresh_token field'));\n    return;\n  }\n\n  that.clientId_ = json.client_id;\n  that.clientSecret_ = json.client_secret;\n  that._refreshToken = json.refresh_token;\n  that.credentials.refresh_token = json.refresh_token;\n  callback(opt_callback);\n};\n/**\n * Create a UserRefreshClient credentials instance using the given input stream.\n * @param {object=} stream The input stream.\n * @param {function=} opt_callback Optional callback.\n */\n\n\nUserRefreshClient.prototype.fromStream = function (stream, opt_callback) {\n  var that = this;\n\n  if (!stream) {\n    process.nextTick(function () {\n      callback(opt_callback, new Error('Must pass in a stream containing the user refresh token.'));\n    });\n    return;\n  }\n\n  var s = '';\n  stream.setEncoding('utf8');\n  stream.on('data', function (chunk) {\n    s += chunk;\n  });\n  stream.on('end', function () {\n    try {\n      var data = JSON.parse(s);\n      that.fromJSON(data, opt_callback);\n    } catch (err) {\n      callback(opt_callback, err);\n    }\n  });\n};\n/**\n * Export UserRefreshClient\n */\n\n\nmodule.exports = UserRefreshClient;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/google-auto-auth/node_modules/google-auth-library/lib/auth/refreshclient.js"],"names":["Auth2Client","require","util","UserRefreshClient","clientId","clientSecret","refreshToken","super_","call","_refreshToken","inherits","callback","c","err","res","prototype","refreshToken_","ignored_","opt_callback","fromJSON","json","that","Error","type","client_id","client_secret","refresh_token","clientId_","clientSecret_","credentials","fromStream","stream","process","nextTick","s","setEncoding","on","chunk","data","JSON","parse","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nvar Auth2Client = require('./oauth2client.js');\nvar util = require('util');\n\n/**\n * User Refresh Token credentials.\n *\n * @param {string} clientId The authentication client ID.\n * @param {string} clientSecret The authentication client secret.\n * @param {string} refreshToken The authentication refresh token.\n * @constructor\n */\nfunction UserRefreshClient(clientId, clientSecret, refreshToken) {\n  UserRefreshClient.super_.call(this, clientId, clientSecret);\n  // Named to avoid collision with the method refreshToken_\n  this._refreshToken = refreshToken;\n}\n\nutil.inherits(UserRefreshClient, Auth2Client);\n\n// Executes the given callback if it is not null.\nfunction callback(c, err, res) {\n  if (c) {\n    c(err, res);\n  }\n}\n\n/**\n * Refreshes the access token.\n * @param {object=} ignored_\n * @param {function=} opt_callback Optional callback.\n * @private\n */\nUserRefreshClient.prototype.refreshToken_ = function(ignored_, opt_callback) {\n  UserRefreshClient.super_.prototype.refreshToken_.call(\n      this, this._refreshToken, opt_callback);\n};\n\n/**\n * Create a UserRefreshClient credentials instance using the given input options.\n * @param {object=} json The input object.\n * @param {function=} opt_callback Optional callback.\n */\nUserRefreshClient.prototype.fromJSON = function(json, opt_callback) {\n  var that = this;\n  if (!json) {\n    callback(opt_callback, new Error(\n        'Must pass in a JSON object containing the user refresh token'));\n    return;\n  }\n  if (json.type !== 'authorized_user') {\n    callback(opt_callback, new Error(\n        'The incoming JSON object does not have the \"authorized_user\" type'));\n    return;\n  }\n  if (!json.client_id) {\n    callback(opt_callback, new Error(\n        'The incoming JSON object does not contain a client_id field'));\n    return;\n  }\n  if (!json.client_secret) {\n    callback(opt_callback, new Error(\n        'The incoming JSON object does not contain a client_secret field'));\n    return;\n  }\n  if (!json.refresh_token) {\n    callback(opt_callback, new Error(\n        'The incoming JSON object does not contain a refresh_token field'));\n    return;\n  }\n  that.clientId_ = json.client_id;\n  that.clientSecret_ = json.client_secret;\n  that._refreshToken = json.refresh_token;\n  that.credentials.refresh_token = json.refresh_token;\n  callback(opt_callback);\n};\n\n/**\n * Create a UserRefreshClient credentials instance using the given input stream.\n * @param {object=} stream The input stream.\n * @param {function=} opt_callback Optional callback.\n */\nUserRefreshClient.prototype.fromStream = function(stream, opt_callback) {\n  var that = this;\n  if (!stream) {\n    process.nextTick(function() {\n      callback(\n        opt_callback,\n        new Error('Must pass in a stream containing the user refresh token.'));\n    });\n    return;\n  }\n  var s = '';\n  stream.setEncoding('utf8');\n  stream.on('data', function (chunk) {\n    s += chunk;\n  });\n  stream.on('end', function () {\n    try {\n      var data = JSON.parse(s);\n      that.fromJSON(data, opt_callback);\n    } catch (err) {\n      callback(opt_callback, err);\n    }\n  });\n};\n\n/**\n * Export UserRefreshClient\n */\nmodule.exports = UserRefreshClient;\n"]},"metadata":{},"sourceType":"script"}