{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst api = require(\"../api\");\n\nconst utils = require(\"../utils\");\n\nconst gcp_1 = require(\"../gcp\");\n\nconst generateInstanceId_1 = require(\"./generateInstanceId\");\n\nconst API_VERSION = \"v1\";\n\nfunction grantRoles(projectId, serviceAccountEmail, rolesToAdd, rolesToRemove = []) {\n  rolesToAdd = rolesToAdd.map(role => `roles/${role}`);\n  rolesToRemove = rolesToRemove.map(role => `roles/${role}`);\n  return api.request(\"POST\", utils.endpoint([API_VERSION, \"projects\", projectId, \":getIamPolicy\"]), {\n    data: {\n      options: {\n        requestedPolicyVersion: 3\n      }\n    },\n    auth: true,\n    origin: api.resourceManagerOrigin\n  }).then(response => {\n    const policy = response.body;\n    const bindings = policy.bindings;\n    rolesToAdd.forEach(role => {\n      bindings.push({\n        role,\n        members: [`serviceAccount:${serviceAccountEmail}`]\n      });\n    });\n    rolesToRemove.forEach(role => {\n      const binding = _.find(bindings, b => {\n        return b.role === role;\n      });\n\n      _.remove(binding.members, member => {\n        return member === `serviceAccount:${serviceAccountEmail}`;\n      });\n    });\n    return api.request(\"POST\", utils.endpoint([API_VERSION, \"projects\", projectId, \":setIamPolicy\"]), {\n      auth: true,\n      origin: api.resourceManagerOrigin,\n      data: {\n        policy\n      }\n    });\n  });\n}\n\nexports.grantRoles = grantRoles;\n\nfunction createServiceAccountAndSetRoles(projectId, roles, instanceId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let serviceAccount;\n    const shortenedInstanceId = instanceId.length <= 26 ? instanceId : `${instanceId.slice(0, 21)}-${generateInstanceId_1.getRandomString(4)}`;\n\n    try {\n      serviceAccount = yield gcp_1.iam.createServiceAccount(projectId, `ext-${shortenedInstanceId}`, `Runtime service account for Firebase Extension ${instanceId}`, `Firebase Extension ${instanceId} service account`);\n    } catch (err) {\n      if (err.status === 409) {\n        return utils.reject(`A service account ext-${shortenedInstanceId} already exists in project ${projectId}. ` + `Please delete it or choose a different extension instance id.`, {\n          exit: 1,\n          status: 409\n        });\n      }\n\n      throw err;\n    }\n\n    yield grantRoles(projectId, serviceAccount.email, roles.map(role => role.role));\n    return serviceAccount.email;\n  });\n}\n\nexports.createServiceAccountAndSetRoles = createServiceAccountAndSetRoles;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/extensions/rolesHelper.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","api","utils","gcp_1","generateInstanceId_1","API_VERSION","grantRoles","projectId","serviceAccountEmail","rolesToAdd","rolesToRemove","map","role","request","endpoint","data","options","requestedPolicyVersion","auth","origin","resourceManagerOrigin","response","policy","body","bindings","forEach","push","members","binding","find","b","remove","member","createServiceAccountAndSetRoles","roles","instanceId","serviceAccount","shortenedInstanceId","length","slice","getRandomString","iam","createServiceAccount","err","status","exit","email"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst api = require(\"../api\");\nconst utils = require(\"../utils\");\nconst gcp_1 = require(\"../gcp\");\nconst generateInstanceId_1 = require(\"./generateInstanceId\");\nconst API_VERSION = \"v1\";\nfunction grantRoles(projectId, serviceAccountEmail, rolesToAdd, rolesToRemove = []) {\n    rolesToAdd = rolesToAdd.map((role) => `roles/${role}`);\n    rolesToRemove = rolesToRemove.map((role) => `roles/${role}`);\n    return api\n        .request(\"POST\", utils.endpoint([API_VERSION, \"projects\", projectId, \":getIamPolicy\"]), {\n        data: {\n            options: { requestedPolicyVersion: 3 },\n        },\n        auth: true,\n        origin: api.resourceManagerOrigin,\n    })\n        .then((response) => {\n        const policy = response.body;\n        const bindings = policy.bindings;\n        rolesToAdd.forEach((role) => {\n            bindings.push({ role, members: [`serviceAccount:${serviceAccountEmail}`] });\n        });\n        rolesToRemove.forEach((role) => {\n            const binding = _.find(bindings, (b) => {\n                return b.role === role;\n            });\n            _.remove(binding.members, (member) => {\n                return member === `serviceAccount:${serviceAccountEmail}`;\n            });\n        });\n        return api.request(\"POST\", utils.endpoint([API_VERSION, \"projects\", projectId, \":setIamPolicy\"]), {\n            auth: true,\n            origin: api.resourceManagerOrigin,\n            data: { policy },\n        });\n    });\n}\nexports.grantRoles = grantRoles;\nfunction createServiceAccountAndSetRoles(projectId, roles, instanceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let serviceAccount;\n        const shortenedInstanceId = instanceId.length <= 26 ? instanceId : `${instanceId.slice(0, 21)}-${generateInstanceId_1.getRandomString(4)}`;\n        try {\n            serviceAccount = yield gcp_1.iam.createServiceAccount(projectId, `ext-${shortenedInstanceId}`, `Runtime service account for Firebase Extension ${instanceId}`, `Firebase Extension ${instanceId} service account`);\n        }\n        catch (err) {\n            if (err.status === 409) {\n                return utils.reject(`A service account ext-${shortenedInstanceId} already exists in project ${projectId}. ` +\n                    `Please delete it or choose a different extension instance id.`, {\n                    exit: 1,\n                    status: 409,\n                });\n            }\n            throw err;\n        }\n        yield grantRoles(projectId, serviceAccount.email, roles.map((role) => role.role));\n        return serviceAccount.email;\n    });\n}\nexports.createServiceAccountAndSetRoles = createServiceAccountAndSetRoles;\n"]},"metadata":{},"sourceType":"script"}