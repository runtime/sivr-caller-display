{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst uuid = require(\"uuid\");\n\nconst types_1 = require(\"./types\");\n\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\n\nconst events_1 = require(\"events\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst error_1 = require(\"../error\");\n\nvar RuntimeWorkerState;\n\n(function (RuntimeWorkerState) {\n  RuntimeWorkerState[\"IDLE\"] = \"IDLE\";\n  RuntimeWorkerState[\"BUSY\"] = \"BUSY\";\n  RuntimeWorkerState[\"FINISHING\"] = \"FINISHING\";\n  RuntimeWorkerState[\"FINISHED\"] = \"FINISHED\";\n})(RuntimeWorkerState = exports.RuntimeWorkerState || (exports.RuntimeWorkerState = {}));\n\nclass RuntimeWorker {\n  constructor(key, runtime) {\n    this.stateEvents = new events_1.EventEmitter();\n    this.logListeners = [];\n    this._state = RuntimeWorkerState.IDLE;\n    this.id = uuid.v4();\n    this.key = key;\n    this.runtime = runtime;\n    this.runtime.events.on(\"log\", log => {\n      if (log.type === \"runtime-status\") {\n        if (log.data.state === \"idle\") {\n          if (this.state === RuntimeWorkerState.BUSY) {\n            this.state = RuntimeWorkerState.IDLE;\n          } else if (this.state === RuntimeWorkerState.FINISHING) {\n            this.log(`IDLE --> FINISHING`);\n            this.runtime.shutdown();\n          }\n        }\n      }\n    });\n    this.runtime.exit.then(() => {\n      this.log(\"exited\");\n      this.state = RuntimeWorkerState.FINISHED;\n    });\n  }\n\n  execute(frb, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const execFrb = Object.assign({}, frb);\n\n      if (!execFrb.socketPath) {\n        execFrb.socketPath = functionsEmulatorShared_1.getTemporarySocketPath(this.runtime.pid, execFrb.cwd);\n        this.log(`Assigning socketPath: ${execFrb.socketPath}`);\n      }\n\n      const args = {\n        frb: execFrb,\n        opts\n      };\n      this.state = RuntimeWorkerState.BUSY;\n      this.lastArgs = args;\n      this.runtime.send(args);\n    });\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(state) {\n    if (state === RuntimeWorkerState.BUSY) {\n      this.socketReady = types_1.EmulatorLog.waitForLog(this.runtime.events, \"SYSTEM\", \"runtime-status\", el => {\n        return el.data.state === \"ready\";\n      });\n    }\n\n    if (state === RuntimeWorkerState.IDLE) {\n      for (const l of this.logListeners) {\n        this.runtime.events.removeListener(\"log\", l);\n      }\n\n      this.logListeners = [];\n      this.socketReady = undefined;\n    }\n\n    if (state === RuntimeWorkerState.FINISHED) {\n      this.runtime.events.removeAllListeners();\n    }\n\n    this.log(state);\n    this._state = state;\n    this.stateEvents.emit(this._state);\n  }\n\n  onLogs(listener, forever = false) {\n    if (!forever) {\n      this.logListeners.push(listener);\n    }\n\n    this.runtime.events.on(\"log\", listener);\n  }\n\n  waitForDone() {\n    if (this.state === RuntimeWorkerState.IDLE || this.state === RuntimeWorkerState.FINISHED) {\n      return Promise.resolve();\n    }\n\n    return new Promise(res => {\n      const listener = () => {\n        this.stateEvents.removeListener(RuntimeWorkerState.IDLE, listener);\n        this.stateEvents.removeListener(RuntimeWorkerState.FINISHED, listener);\n        res();\n      };\n\n      this.stateEvents.once(RuntimeWorkerState.IDLE, listener);\n      this.stateEvents.once(RuntimeWorkerState.FINISHED, listener);\n    });\n  }\n\n  waitForSocketReady() {\n    return this.socketReady || Promise.reject(new Error(\"Cannot call waitForSocketReady() if runtime is not BUSY\"));\n  }\n\n  log(msg) {\n    emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `[worker-${this.key}-${this.id}]: ${msg}`);\n  }\n\n}\n\nexports.RuntimeWorker = RuntimeWorker;\n\nclass RuntimeWorkerPool {\n  constructor(mode = types_1.FunctionsExecutionMode.AUTO) {\n    this.mode = mode;\n    this.workers = new Map();\n  }\n\n  getKey(triggerId) {\n    if (this.mode === types_1.FunctionsExecutionMode.SEQUENTIAL) {\n      return \"~shared~\";\n    } else {\n      return triggerId || \"~diagnostic~\";\n    }\n  }\n\n  refresh() {\n    for (const arr of this.workers.values()) {\n      arr.forEach(w => {\n        if (w.state === RuntimeWorkerState.IDLE) {\n          this.log(`Shutting down IDLE worker (${w.key})`);\n          w.state = RuntimeWorkerState.FINISHING;\n          w.runtime.shutdown();\n        } else if (w.state === RuntimeWorkerState.BUSY) {\n          this.log(`Marking BUSY worker to finish (${w.key})`);\n          w.state = RuntimeWorkerState.FINISHING;\n        }\n      });\n    }\n  }\n\n  exit() {\n    for (const arr of this.workers.values()) {\n      arr.forEach(w => {\n        if (w.state === RuntimeWorkerState.IDLE) {\n          w.runtime.shutdown();\n        } else {\n          w.runtime.kill();\n        }\n      });\n    }\n  }\n\n  readyForWork(triggerId) {\n    const idleWorker = this.getIdleWorker(triggerId);\n    return !!idleWorker;\n  }\n\n  submitWork(triggerId, frb, opts) {\n    this.log(`submitWork(triggerId=${triggerId})`);\n    const worker = this.getIdleWorker(triggerId);\n\n    if (!worker) {\n      throw new error_1.FirebaseError(\"Internal Error: can't call submitWork without checking for idle workers\");\n    }\n\n    worker.execute(frb, opts);\n    return worker;\n  }\n\n  getIdleWorker(triggerId) {\n    this.cleanUpWorkers();\n    const triggerWorkers = this.getTriggerWorkers(triggerId);\n\n    if (!triggerWorkers.length) {\n      this.setTriggerWorkers(triggerId, []);\n      return;\n    }\n\n    for (const worker of triggerWorkers) {\n      if (worker.state === RuntimeWorkerState.IDLE) {\n        return worker;\n      }\n    }\n\n    return;\n  }\n\n  addWorker(triggerId, runtime) {\n    const worker = new RuntimeWorker(this.getKey(triggerId), runtime);\n    this.log(`addWorker(${worker.key})`);\n    const keyWorkers = this.getTriggerWorkers(triggerId);\n    keyWorkers.push(worker);\n    this.setTriggerWorkers(triggerId, keyWorkers);\n    worker.onLogs(log => {\n      emulatorLogger_1.EmulatorLogger.handleRuntimeLog(log);\n    }, true);\n    this.log(`Adding worker with key ${worker.key}, total=${keyWorkers.length}`);\n    return worker;\n  }\n\n  getTriggerWorkers(triggerId) {\n    return this.workers.get(this.getKey(triggerId)) || [];\n  }\n\n  setTriggerWorkers(triggerId, workers) {\n    this.workers.set(this.getKey(triggerId), workers);\n  }\n\n  cleanUpWorkers() {\n    for (const _ref of this.workers.entries()) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const key = _ref2[0];\n      const keyWorkers = _ref2[1];\n      const notDoneWorkers = keyWorkers.filter(worker => {\n        return worker.state !== RuntimeWorkerState.FINISHED;\n      });\n\n      if (notDoneWorkers.length !== keyWorkers.length) {\n        this.log(`Cleaned up workers for ${key}: ${keyWorkers.length} --> ${notDoneWorkers.length}`);\n      }\n\n      this.setTriggerWorkers(key, notDoneWorkers);\n    }\n  }\n\n  log(msg) {\n    emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `[worker-pool] ${msg}`);\n  }\n\n}\n\nexports.RuntimeWorkerPool = RuntimeWorkerPool;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/functionsRuntimeWorker.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","uuid","require","types_1","functionsEmulatorShared_1","events_1","emulatorLogger_1","error_1","RuntimeWorkerState","RuntimeWorker","constructor","key","runtime","stateEvents","EventEmitter","logListeners","_state","IDLE","id","v4","events","on","log","type","data","state","BUSY","FINISHING","shutdown","exit","FINISHED","execute","frb","opts","execFrb","assign","socketPath","getTemporarySocketPath","pid","cwd","args","lastArgs","send","socketReady","EmulatorLog","waitForLog","el","l","removeListener","undefined","removeAllListeners","emit","onLogs","listener","forever","push","waitForDone","res","once","waitForSocketReady","Error","msg","EmulatorLogger","RuntimeWorkerPool","mode","FunctionsExecutionMode","AUTO","workers","Map","getKey","triggerId","SEQUENTIAL","refresh","arr","values","forEach","w","kill","readyForWork","idleWorker","getIdleWorker","submitWork","worker","FirebaseError","cleanUpWorkers","triggerWorkers","getTriggerWorkers","length","setTriggerWorkers","addWorker","keyWorkers","handleRuntimeLog","get","set","entries","notDoneWorkers","filter"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst uuid = require(\"uuid\");\nconst types_1 = require(\"./types\");\nconst functionsEmulatorShared_1 = require(\"./functionsEmulatorShared\");\nconst events_1 = require(\"events\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst error_1 = require(\"../error\");\nvar RuntimeWorkerState;\n(function (RuntimeWorkerState) {\n    RuntimeWorkerState[\"IDLE\"] = \"IDLE\";\n    RuntimeWorkerState[\"BUSY\"] = \"BUSY\";\n    RuntimeWorkerState[\"FINISHING\"] = \"FINISHING\";\n    RuntimeWorkerState[\"FINISHED\"] = \"FINISHED\";\n})(RuntimeWorkerState = exports.RuntimeWorkerState || (exports.RuntimeWorkerState = {}));\nclass RuntimeWorker {\n    constructor(key, runtime) {\n        this.stateEvents = new events_1.EventEmitter();\n        this.logListeners = [];\n        this._state = RuntimeWorkerState.IDLE;\n        this.id = uuid.v4();\n        this.key = key;\n        this.runtime = runtime;\n        this.runtime.events.on(\"log\", (log) => {\n            if (log.type === \"runtime-status\") {\n                if (log.data.state === \"idle\") {\n                    if (this.state === RuntimeWorkerState.BUSY) {\n                        this.state = RuntimeWorkerState.IDLE;\n                    }\n                    else if (this.state === RuntimeWorkerState.FINISHING) {\n                        this.log(`IDLE --> FINISHING`);\n                        this.runtime.shutdown();\n                    }\n                }\n            }\n        });\n        this.runtime.exit.then(() => {\n            this.log(\"exited\");\n            this.state = RuntimeWorkerState.FINISHED;\n        });\n    }\n    execute(frb, opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const execFrb = Object.assign({}, frb);\n            if (!execFrb.socketPath) {\n                execFrb.socketPath = functionsEmulatorShared_1.getTemporarySocketPath(this.runtime.pid, execFrb.cwd);\n                this.log(`Assigning socketPath: ${execFrb.socketPath}`);\n            }\n            const args = { frb: execFrb, opts };\n            this.state = RuntimeWorkerState.BUSY;\n            this.lastArgs = args;\n            this.runtime.send(args);\n        });\n    }\n    get state() {\n        return this._state;\n    }\n    set state(state) {\n        if (state === RuntimeWorkerState.BUSY) {\n            this.socketReady = types_1.EmulatorLog.waitForLog(this.runtime.events, \"SYSTEM\", \"runtime-status\", (el) => {\n                return el.data.state === \"ready\";\n            });\n        }\n        if (state === RuntimeWorkerState.IDLE) {\n            for (const l of this.logListeners) {\n                this.runtime.events.removeListener(\"log\", l);\n            }\n            this.logListeners = [];\n            this.socketReady = undefined;\n        }\n        if (state === RuntimeWorkerState.FINISHED) {\n            this.runtime.events.removeAllListeners();\n        }\n        this.log(state);\n        this._state = state;\n        this.stateEvents.emit(this._state);\n    }\n    onLogs(listener, forever = false) {\n        if (!forever) {\n            this.logListeners.push(listener);\n        }\n        this.runtime.events.on(\"log\", listener);\n    }\n    waitForDone() {\n        if (this.state === RuntimeWorkerState.IDLE || this.state === RuntimeWorkerState.FINISHED) {\n            return Promise.resolve();\n        }\n        return new Promise((res) => {\n            const listener = () => {\n                this.stateEvents.removeListener(RuntimeWorkerState.IDLE, listener);\n                this.stateEvents.removeListener(RuntimeWorkerState.FINISHED, listener);\n                res();\n            };\n            this.stateEvents.once(RuntimeWorkerState.IDLE, listener);\n            this.stateEvents.once(RuntimeWorkerState.FINISHED, listener);\n        });\n    }\n    waitForSocketReady() {\n        return (this.socketReady ||\n            Promise.reject(new Error(\"Cannot call waitForSocketReady() if runtime is not BUSY\")));\n    }\n    log(msg) {\n        emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `[worker-${this.key}-${this.id}]: ${msg}`);\n    }\n}\nexports.RuntimeWorker = RuntimeWorker;\nclass RuntimeWorkerPool {\n    constructor(mode = types_1.FunctionsExecutionMode.AUTO) {\n        this.mode = mode;\n        this.workers = new Map();\n    }\n    getKey(triggerId) {\n        if (this.mode === types_1.FunctionsExecutionMode.SEQUENTIAL) {\n            return \"~shared~\";\n        }\n        else {\n            return triggerId || \"~diagnostic~\";\n        }\n    }\n    refresh() {\n        for (const arr of this.workers.values()) {\n            arr.forEach((w) => {\n                if (w.state === RuntimeWorkerState.IDLE) {\n                    this.log(`Shutting down IDLE worker (${w.key})`);\n                    w.state = RuntimeWorkerState.FINISHING;\n                    w.runtime.shutdown();\n                }\n                else if (w.state === RuntimeWorkerState.BUSY) {\n                    this.log(`Marking BUSY worker to finish (${w.key})`);\n                    w.state = RuntimeWorkerState.FINISHING;\n                }\n            });\n        }\n    }\n    exit() {\n        for (const arr of this.workers.values()) {\n            arr.forEach((w) => {\n                if (w.state === RuntimeWorkerState.IDLE) {\n                    w.runtime.shutdown();\n                }\n                else {\n                    w.runtime.kill();\n                }\n            });\n        }\n    }\n    readyForWork(triggerId) {\n        const idleWorker = this.getIdleWorker(triggerId);\n        return !!idleWorker;\n    }\n    submitWork(triggerId, frb, opts) {\n        this.log(`submitWork(triggerId=${triggerId})`);\n        const worker = this.getIdleWorker(triggerId);\n        if (!worker) {\n            throw new error_1.FirebaseError(\"Internal Error: can't call submitWork without checking for idle workers\");\n        }\n        worker.execute(frb, opts);\n        return worker;\n    }\n    getIdleWorker(triggerId) {\n        this.cleanUpWorkers();\n        const triggerWorkers = this.getTriggerWorkers(triggerId);\n        if (!triggerWorkers.length) {\n            this.setTriggerWorkers(triggerId, []);\n            return;\n        }\n        for (const worker of triggerWorkers) {\n            if (worker.state === RuntimeWorkerState.IDLE) {\n                return worker;\n            }\n        }\n        return;\n    }\n    addWorker(triggerId, runtime) {\n        const worker = new RuntimeWorker(this.getKey(triggerId), runtime);\n        this.log(`addWorker(${worker.key})`);\n        const keyWorkers = this.getTriggerWorkers(triggerId);\n        keyWorkers.push(worker);\n        this.setTriggerWorkers(triggerId, keyWorkers);\n        worker.onLogs((log) => {\n            emulatorLogger_1.EmulatorLogger.handleRuntimeLog(log);\n        }, true);\n        this.log(`Adding worker with key ${worker.key}, total=${keyWorkers.length}`);\n        return worker;\n    }\n    getTriggerWorkers(triggerId) {\n        return this.workers.get(this.getKey(triggerId)) || [];\n    }\n    setTriggerWorkers(triggerId, workers) {\n        this.workers.set(this.getKey(triggerId), workers);\n    }\n    cleanUpWorkers() {\n        for (const [key, keyWorkers] of this.workers.entries()) {\n            const notDoneWorkers = keyWorkers.filter((worker) => {\n                return worker.state !== RuntimeWorkerState.FINISHED;\n            });\n            if (notDoneWorkers.length !== keyWorkers.length) {\n                this.log(`Cleaned up workers for ${key}: ${keyWorkers.length} --> ${notDoneWorkers.length}`);\n            }\n            this.setTriggerWorkers(key, notDoneWorkers);\n        }\n    }\n    log(msg) {\n        emulatorLogger_1.EmulatorLogger.log(\"DEBUG\", `[worker-pool] ${msg}`);\n    }\n}\nexports.RuntimeWorkerPool = RuntimeWorkerPool;\n"]},"metadata":{},"sourceType":"script"}