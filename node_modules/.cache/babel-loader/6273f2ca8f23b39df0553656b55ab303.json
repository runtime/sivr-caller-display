{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst ora = require(\"ora\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst getProjectId = require(\"../getProjectId\");\n\nconst gcp_1 = require(\"../gcp\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst prompt_1 = require(\"../prompt\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nexports.default = new command_1.Command(\"ext:uninstall <extensionInstanceId>\").description(\"uninstall an extension that is installed in your Firebase project by instance ID\").option(\"-f, --force\", \"No confirmation. Otherwise, a confirmation prompt will appear.\").before(requirePermissions_1.requirePermissions, [\"firebasemods.instances.delete\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).action((instanceId, options) => __awaiter(this, void 0, void 0, function* () {\n  const projectId = getProjectId(options);\n  let instance;\n\n  try {\n    instance = yield extensionsApi.getInstance(projectId, instanceId);\n  } catch (err) {\n    if (err.status === 404) {\n      return utils.reject(`No extension instance ${instanceId} in project ${projectId}.`, {\n        exit: 1\n      });\n    }\n\n    throw err;\n  }\n\n  let confirmedServiceAccountDeletion;\n\n  if (!options.force) {\n    const resourcesMessage = _.get(instance, \"config.source.spec.resources\", []).length ? \"This will delete the following resources \\n\" + instance.config.source.spec.resources.map(resource => `- ${resource.type}: ${resource.name} \\n`).join(\"\") : \"\";\n    const extensionDeletionMessage = `You are about to uninstall extension ${clc.bold(instanceId)} from project ${clc.bold(projectId)}.\\n${resourcesMessage}Are you sure?`;\n    const confirmedExtensionDeletion = yield prompt_1.promptOnce({\n      type: \"confirm\",\n      default: true,\n      message: extensionDeletionMessage\n    });\n\n    if (!confirmedExtensionDeletion) {\n      return utils.reject(\"Command aborted.\", {\n        exit: 1\n      });\n    }\n\n    const rolesMessage = _.get(instance, \"config.source.spec.roles\", []).length ? \" which had the following authorized roles in your project:\\n\" + instance.config.source.spec.roles.map(role => `- ${role.role} \\n`).join(\"\") : \". \\n\";\n    const serviceAccountDeletionMessage = `This extension used service account ${clc.bold(instance.serviceAccountEmail)} ${rolesMessage}Do you want to delete this service account?`;\n    confirmedServiceAccountDeletion = yield prompt_1.promptOnce({\n      type: \"confirm\",\n      default: false,\n      message: serviceAccountDeletionMessage\n    });\n  }\n\n  const spinner = ora.default(`Uninstalling ${clc.bold(instanceId)}. This usually takes 1 to 2 minutes...`);\n  spinner.start();\n\n  try {\n    yield extensionsApi.deleteInstance(projectId, instanceId);\n\n    if (confirmedServiceAccountDeletion || options.force) {\n      const saDeletionRes = yield gcp_1.iam.deleteServiceAccount(projectId, instance.serviceAccountEmail);\n\n      if (_.get(saDeletionRes, \"body.error\")) {\n        if (_.get(saDeletionRes, \"body.error.code\") === 404) {\n          spinner.succeed(` ${clc.green.bold(extensionsHelper_1.logPrefix)}: service account ${clc.bold(instance.serviceAccountEmail)} was previously deleted.`);\n        } else {\n          throw new error_1.FirebaseError(\"Unable to delete service account\", {\n            original: saDeletionRes.body.error\n          });\n        }\n      } else {\n        spinner.succeed(` ${clc.green.bold(extensionsHelper_1.logPrefix)}: deleted service account ${clc.bold(instance.serviceAccountEmail)}`);\n      }\n    }\n  } catch (err) {\n    if (spinner.isSpinning) {\n      spinner.fail();\n    }\n\n    if (err instanceof error_1.FirebaseError) {\n      throw err;\n    }\n\n    return utils.reject(`Error occurred uninstalling extension ${instanceId}`, {\n      original: err\n    });\n  }\n\n  utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `uninstalled ${instanceId}`);\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/ext-uninstall.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","clc","ora","command_1","error_1","getProjectId","gcp_1","extensionsApi","extensionsHelper_1","prompt_1","requirePermissions_1","utils","default","Command","description","option","before","requirePermissions","ensureExtensionsApiEnabled","action","instanceId","options","projectId","instance","getInstance","err","status","exit","confirmedServiceAccountDeletion","force","resourcesMessage","get","length","config","source","spec","resources","map","resource","type","name","join","extensionDeletionMessage","bold","confirmedExtensionDeletion","promptOnce","message","rolesMessage","roles","role","serviceAccountDeletionMessage","serviceAccountEmail","spinner","start","deleteInstance","saDeletionRes","iam","deleteServiceAccount","succeed","green","logPrefix","FirebaseError","original","body","error","isSpinning","fail","logLabeledSuccess"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst ora = require(\"ora\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst getProjectId = require(\"../getProjectId\");\nconst gcp_1 = require(\"../gcp\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst prompt_1 = require(\"../prompt\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nexports.default = new command_1.Command(\"ext:uninstall <extensionInstanceId>\")\n    .description(\"uninstall an extension that is installed in your Firebase project by instance ID\")\n    .option(\"-f, --force\", \"No confirmation. Otherwise, a confirmation prompt will appear.\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasemods.instances.delete\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .action((instanceId, options) => __awaiter(this, void 0, void 0, function* () {\n    const projectId = getProjectId(options);\n    let instance;\n    try {\n        instance = yield extensionsApi.getInstance(projectId, instanceId);\n    }\n    catch (err) {\n        if (err.status === 404) {\n            return utils.reject(`No extension instance ${instanceId} in project ${projectId}.`, {\n                exit: 1,\n            });\n        }\n        throw err;\n    }\n    let confirmedServiceAccountDeletion;\n    if (!options.force) {\n        const resourcesMessage = _.get(instance, \"config.source.spec.resources\", []).length\n            ? \"This will delete the following resources \\n\" +\n                instance.config.source.spec.resources\n                    .map((resource) => `- ${resource.type}: ${resource.name} \\n`)\n                    .join(\"\")\n            : \"\";\n        const extensionDeletionMessage = `You are about to uninstall extension ${clc.bold(instanceId)} from project ${clc.bold(projectId)}.\\n${resourcesMessage}Are you sure?`;\n        const confirmedExtensionDeletion = yield prompt_1.promptOnce({\n            type: \"confirm\",\n            default: true,\n            message: extensionDeletionMessage,\n        });\n        if (!confirmedExtensionDeletion) {\n            return utils.reject(\"Command aborted.\", { exit: 1 });\n        }\n        const rolesMessage = _.get(instance, \"config.source.spec.roles\", []).length\n            ? \" which had the following authorized roles in your project:\\n\" +\n                instance.config.source.spec.roles\n                    .map((role) => `- ${role.role} \\n`)\n                    .join(\"\")\n            : \". \\n\";\n        const serviceAccountDeletionMessage = `This extension used service account ${clc.bold(instance.serviceAccountEmail)} ${rolesMessage}Do you want to delete this service account?`;\n        confirmedServiceAccountDeletion = yield prompt_1.promptOnce({\n            type: \"confirm\",\n            default: false,\n            message: serviceAccountDeletionMessage,\n        });\n    }\n    const spinner = ora.default(`Uninstalling ${clc.bold(instanceId)}. This usually takes 1 to 2 minutes...`);\n    spinner.start();\n    try {\n        yield extensionsApi.deleteInstance(projectId, instanceId);\n        if (confirmedServiceAccountDeletion || options.force) {\n            const saDeletionRes = yield gcp_1.iam.deleteServiceAccount(projectId, instance.serviceAccountEmail);\n            if (_.get(saDeletionRes, \"body.error\")) {\n                if (_.get(saDeletionRes, \"body.error.code\") === 404) {\n                    spinner.succeed(` ${clc.green.bold(extensionsHelper_1.logPrefix)}: service account ${clc.bold(instance.serviceAccountEmail)} was previously deleted.`);\n                }\n                else {\n                    throw new error_1.FirebaseError(\"Unable to delete service account\", {\n                        original: saDeletionRes.body.error,\n                    });\n                }\n            }\n            else {\n                spinner.succeed(` ${clc.green.bold(extensionsHelper_1.logPrefix)}: deleted service account ${clc.bold(instance.serviceAccountEmail)}`);\n            }\n        }\n    }\n    catch (err) {\n        if (spinner.isSpinning) {\n            spinner.fail();\n        }\n        if (err instanceof error_1.FirebaseError) {\n            throw err;\n        }\n        return utils.reject(`Error occurred uninstalling extension ${instanceId}`, { original: err });\n    }\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `uninstalled ${instanceId}`);\n}));\n"]},"metadata":{},"sourceType":"script"}