{"ast":null,"code":"/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\n'use strict';\n\nvar _ = require('lodash');\n\nvar slasher = require('glob-slasher');\n\nvar urlParser = require('fast-url-parser');\n\nvar onHeaders = require('on-headers');\n\nvar minimatch = require('minimatch');\n\nvar normalizedConfigHeaders = function (spec, config) {\n  var out = config || [];\n\n  if (_.isArray(config)) {\n    var _isAllowed = function (headerToSet) {\n      return _.includes(spec.allowedHeaders, headerToSet.key.toLowerCase());\n    };\n\n    for (var i = 0; i < config.length; i++) {\n      config[i].source = slasher(config[i].source);\n      config[i].headers = config[i].headers || [];\n\n      if (spec.allowedHeaders) {\n        config[i].headers = config[i].headers.filter(_isAllowed);\n      }\n    }\n  }\n\n  return out;\n};\n\nvar matcher = function (configHeaders) {\n  return function (url) {\n    return configHeaders.filter(function (configHeader) {\n      return minimatch(url, configHeader.source);\n    }).reduce(function (out, val) {\n      val.headers.forEach(function (headerToSet) {\n        out.push(headerToSet);\n      });\n      return out;\n    }, []);\n  };\n};\n\nmodule.exports = function (spec) {\n  return function (req, res, next) {\n    var config = _.get(req, 'superstatic.headers');\n\n    if (!config) {\n      return next();\n    }\n\n    var headers = matcher(normalizedConfigHeaders(spec, config));\n    var pathname = urlParser.parse(req.url).pathname;\n    var matches = headers(slasher(pathname));\n    onHeaders(res, function () {\n      _.forEach(matches, function (header) {\n        res.setHeader(header.key, header.value);\n      });\n    });\n    return next();\n  };\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/superstatic/lib/middleware/headers.js"],"names":["_","require","slasher","urlParser","onHeaders","minimatch","normalizedConfigHeaders","spec","config","out","isArray","_isAllowed","headerToSet","includes","allowedHeaders","key","toLowerCase","i","length","source","headers","filter","matcher","configHeaders","url","configHeader","reduce","val","forEach","push","module","exports","req","res","next","get","pathname","parse","matches","header","setHeader","value"],"mappings":"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","sourcesContent":["/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Use of this source code is governed by a BSD-style\n * license that can be found in the LICENSE file or at\n * https://github.com/firebase/superstatic/blob/master/LICENSE\n */\n'use strict';\n\nvar _ = require('lodash');\nvar slasher = require('glob-slasher');\nvar urlParser = require('fast-url-parser');\nvar onHeaders = require('on-headers');\nvar minimatch = require('minimatch');\n\nvar normalizedConfigHeaders = function(spec, config) {\n  var out = config || [];\n  if (_.isArray(config)) {\n    var _isAllowed = function(headerToSet) {\n      return _.includes(spec.allowedHeaders, headerToSet.key.toLowerCase());\n    };\n\n    for (var i = 0; i < config.length; i++) {\n      config[i].source = slasher(config[i].source);\n      config[i].headers = config[i].headers || [];\n      if (spec.allowedHeaders) {\n        config[i].headers = config[i].headers.filter(_isAllowed);\n      }\n    }\n  }\n\n  return out;\n};\n\nvar matcher = function(configHeaders) {\n  return function(url) {\n    return configHeaders.filter(function(configHeader) {\n      return minimatch(url, configHeader.source);\n    }).reduce(function(out, val) {\n      val.headers.forEach(function(headerToSet) {\n        out.push(headerToSet);\n      });\n      return out;\n    }, []);\n  };\n};\n\nmodule.exports = function(spec) {\n  return function(req, res, next) {\n    var config = _.get(req, 'superstatic.headers');\n    if (!config) {\n      return next();\n    }\n\n    var headers = matcher(normalizedConfigHeaders(spec, config));\n    var pathname = urlParser.parse(req.url).pathname;\n    var matches = headers(slasher(pathname));\n\n    onHeaders(res, function() {\n      _.forEach(matches, function(header) {\n        res.setHeader(header.key, header.value);\n      });\n    });\n\n    return next();\n  };\n};\n"]},"metadata":{},"sourceType":"script"}