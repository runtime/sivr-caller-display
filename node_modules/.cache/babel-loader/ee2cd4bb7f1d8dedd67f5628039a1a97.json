{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst tcpport = require(\"tcp-port-used\");\n\nconst utils = require(\"../utils\");\n\nconst track = require(\"../track\");\n\nconst registry_1 = require(\"../emulator/registry\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst constants_1 = require(\"../emulator/constants\");\n\nconst functionsEmulator_1 = require(\"../emulator/functionsEmulator\");\n\nconst databaseEmulator_1 = require(\"../emulator/databaseEmulator\");\n\nconst firestoreEmulator_1 = require(\"../emulator/firestoreEmulator\");\n\nconst hostingEmulator_1 = require(\"../emulator/hostingEmulator\");\n\nconst error_1 = require(\"../error\");\n\nconst getProjectId = require(\"../getProjectId\");\n\nconst pubsubEmulator_1 = require(\"./pubsubEmulator\");\n\nexports.VALID_EMULATOR_STRINGS = types_1.ALL_EMULATORS;\n\nfunction checkPortOpen(port, host) {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      const inUse = yield tcpport.check(port, host);\n      return !inUse;\n    } catch (e) {\n      return false;\n    }\n  });\n}\n\nexports.checkPortOpen = checkPortOpen;\n\nfunction waitForPortClosed(port, host) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const interval = 250;\n    const timeout = 30000;\n\n    try {\n      yield tcpport.waitUntilUsed(port, interval, timeout);\n    } catch (e) {\n      throw new error_1.FirebaseError(`TIMEOUT: Port ${port} on ${host} was not active within ${timeout}ms`);\n    }\n  });\n}\n\nexports.waitForPortClosed = waitForPortClosed;\n\nfunction startEmulator(instance) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const name = instance.getName();\n    const info = instance.getInfo();\n    track(\"emulators:start\", name);\n    const portOpen = yield checkPortOpen(info.port, info.host);\n\n    if (!portOpen) {\n      yield cleanShutdown();\n      utils.logWarning(`Port ${info.port} is not open, could not start ${name} emulator.`);\n      utils.logBullet(`To select a different port for the emulator, update your \"firebase.json\":\n    {\n      // ...\n      \"emulators\": {\n        \"${name}\": {\n          \"port\": \"${clc.yellow(\"PORT\")}\"\n        }\n      }\n    }`);\n      return utils.reject(`Could not start ${name} emulator, port taken.`, {});\n    }\n\n    yield registry_1.EmulatorRegistry.start(instance);\n  });\n}\n\nexports.startEmulator = startEmulator;\n\nfunction cleanShutdown() {\n  return __awaiter(this, void 0, void 0, function* () {\n    utils.logBullet(\"Shutting down emulators.\");\n\n    for (const name of registry_1.EmulatorRegistry.listRunning()) {\n      utils.logBullet(`Stopping ${name} emulator`);\n      yield registry_1.EmulatorRegistry.stop(name);\n    }\n\n    return true;\n  });\n}\n\nexports.cleanShutdown = cleanShutdown;\n\nfunction filterEmulatorTargets(options) {\n  let targets = exports.VALID_EMULATOR_STRINGS.filter(e => {\n    return options.config.has(e) || options.config.has(`emulators.${e}`);\n  });\n\n  if (options.only) {\n    targets = _.intersection(targets, options.only.split(\",\"));\n  }\n\n  return targets;\n}\n\nexports.filterEmulatorTargets = filterEmulatorTargets;\n\nfunction shouldStart(options, name) {\n  const targets = filterEmulatorTargets(options);\n  return targets.indexOf(name) >= 0;\n}\n\nexports.shouldStart = shouldStart;\n\nfunction startAll(options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const targets = filterEmulatorTargets(options);\n    options.targets = targets;\n    const projectId = getProjectId(options, true);\n    utils.logLabeledBullet(\"emulators\", `Starting emulators: ${targets.join(\", \")}`);\n\n    if (options.only) {\n      const requested = options.only.split(\",\");\n\n      const ignored = _.difference(requested, targets);\n\n      for (const name of ignored) {\n        utils.logWarning(`Not starting the ${clc.bold(name)} emulator, make sure you have run ${clc.bold(\"firebase init\")}.`);\n      }\n    }\n\n    if (shouldStart(options, types_1.Emulators.FUNCTIONS)) {\n      const functionsAddr = constants_1.Constants.getAddress(types_1.Emulators.FUNCTIONS, options);\n      const projectId = getProjectId(options, false);\n      const functionsDir = path.join(options.config.projectDir, options.config.get(\"functions.source\"));\n      let inspectFunctions;\n\n      if (options.inspectFunctions === true) {\n        options.inspectFunctions = \"9229\";\n      }\n\n      if (options.inspectFunctions) {\n        inspectFunctions = Number(options.inspectFunctions);\n\n        if (isNaN(inspectFunctions) || inspectFunctions < 1024 || inspectFunctions > 65535) {\n          throw new error_1.FirebaseError(`\"${options.inspectFunctions}\" is not a valid value for the --inspect-functions flag, please pass an integer between 1024 and 65535.`);\n        }\n\n        utils.logLabeledWarning(\"functions\", `You are running the functions emulator in debug mode (port=${inspectFunctions}). This means that functions will execute in sequence rather than in parallel.`);\n      }\n\n      const functionsEmulator = new functionsEmulator_1.FunctionsEmulator({\n        projectId,\n        functionsDir,\n        host: functionsAddr.host,\n        port: functionsAddr.port,\n        debugPort: inspectFunctions\n      });\n      yield startEmulator(functionsEmulator);\n    }\n\n    if (shouldStart(options, types_1.Emulators.FIRESTORE)) {\n      const firestoreAddr = constants_1.Constants.getAddress(types_1.Emulators.FIRESTORE, options);\n      const args = {\n        host: firestoreAddr.host,\n        port: firestoreAddr.port,\n        projectId,\n        auto_download: true\n      };\n      const rulesLocalPath = options.config.get(\"firestore.rules\");\n\n      if (rulesLocalPath) {\n        const rules = path.join(options.projectRoot, rulesLocalPath);\n\n        if (fs.existsSync(rules)) {\n          args.rules = rules;\n        } else {\n          utils.logWarning(`Firestore rules file ${clc.bold(rules)} specified in firebase.json does not exist, starting Firestore emulator without rules.`);\n        }\n      } else {\n        utils.logWarning(`No Firestore rules file specified in firebase.json, using default rules.`);\n      }\n\n      const firestoreEmulator = new firestoreEmulator_1.FirestoreEmulator(args);\n      yield startEmulator(firestoreEmulator);\n      utils.logLabeledBullet(types_1.Emulators.FIRESTORE, `For testing set ${clc.bold(`${firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV}=${firestoreAddr.host}:${firestoreAddr.port}`)}`);\n    }\n\n    if (shouldStart(options, types_1.Emulators.DATABASE)) {\n      const databaseAddr = constants_1.Constants.getAddress(types_1.Emulators.DATABASE, options);\n      const args = {\n        host: databaseAddr.host,\n        port: databaseAddr.port,\n        projectId,\n        auto_download: true\n      };\n\n      if (shouldStart(options, types_1.Emulators.FUNCTIONS)) {\n        const functionsAddr = constants_1.Constants.getAddress(types_1.Emulators.FUNCTIONS, options);\n        args.functions_emulator_host = functionsAddr.host;\n        args.functions_emulator_port = functionsAddr.port;\n      }\n\n      const rulesLocalPath = options.config.get(\"database.rules\");\n\n      if (rulesLocalPath) {\n        const rules = path.join(options.projectRoot, rulesLocalPath);\n\n        if (fs.existsSync(rules)) {\n          args.rules = rules;\n        } else {\n          utils.logWarning(`Database rules file ${clc.bold(rules)} specified in firebase.json does not exist, starting Database emulator without rules.`);\n        }\n      } else {\n        utils.logWarning(`No Database rules file specified in firebase.json, using default rules.`);\n      }\n\n      const databaseEmulator = new databaseEmulator_1.DatabaseEmulator(args);\n      yield startEmulator(databaseEmulator);\n      utils.logLabeledBullet(types_1.Emulators.DATABASE, `For testing set ${clc.bold(`${databaseEmulator_1.DatabaseEmulator.DATABASE_EMULATOR_ENV}=${databaseAddr.host}:${databaseAddr.port}`)}`);\n    }\n\n    if (shouldStart(options, types_1.Emulators.HOSTING)) {\n      const hostingAddr = constants_1.Constants.getAddress(types_1.Emulators.HOSTING, options);\n      const hostingEmulator = new hostingEmulator_1.HostingEmulator({\n        host: hostingAddr.host,\n        port: hostingAddr.port,\n        options\n      });\n      yield startEmulator(hostingEmulator);\n    }\n\n    if (shouldStart(options, types_1.Emulators.PUBSUB)) {\n      if (!projectId) {\n        throw new error_1.FirebaseError(\"Cannot start the Pub/Sub emulator without a project: run 'firebase init' or provide the --project flag\");\n      }\n\n      const pubsubAddr = constants_1.Constants.getAddress(types_1.Emulators.PUBSUB, options);\n      const pubsubEmulator = new pubsubEmulator_1.PubsubEmulator({\n        host: pubsubAddr.host,\n        port: pubsubAddr.port,\n        projectId,\n        auto_download: true\n      });\n      yield startEmulator(pubsubEmulator);\n    }\n\n    const running = registry_1.EmulatorRegistry.listRunning();\n\n    for (const name of running) {\n      const instance = registry_1.EmulatorRegistry.get(name);\n\n      if (instance) {\n        yield instance.connect();\n      }\n    }\n  });\n}\n\nexports.startAll = startAll;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/controller.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","_","require","clc","fs","path","tcpport","utils","track","registry_1","types_1","constants_1","functionsEmulator_1","databaseEmulator_1","firestoreEmulator_1","hostingEmulator_1","error_1","getProjectId","pubsubEmulator_1","VALID_EMULATOR_STRINGS","ALL_EMULATORS","checkPortOpen","port","host","inUse","check","waitForPortClosed","interval","timeout","waitUntilUsed","FirebaseError","startEmulator","instance","name","getName","info","getInfo","portOpen","cleanShutdown","logWarning","logBullet","yellow","EmulatorRegistry","start","listRunning","stop","filterEmulatorTargets","options","targets","filter","config","has","only","intersection","split","shouldStart","indexOf","startAll","projectId","logLabeledBullet","join","requested","ignored","difference","bold","Emulators","FUNCTIONS","functionsAddr","Constants","getAddress","functionsDir","projectDir","get","inspectFunctions","Number","isNaN","logLabeledWarning","functionsEmulator","FunctionsEmulator","debugPort","FIRESTORE","firestoreAddr","args","auto_download","rulesLocalPath","rules","projectRoot","existsSync","firestoreEmulator","FirestoreEmulator","FIRESTORE_EMULATOR_ENV","DATABASE","databaseAddr","functions_emulator_host","functions_emulator_port","databaseEmulator","DatabaseEmulator","DATABASE_EMULATOR_ENV","HOSTING","hostingAddr","hostingEmulator","HostingEmulator","PUBSUB","pubsubAddr","pubsubEmulator","PubsubEmulator","running","connect"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst tcpport = require(\"tcp-port-used\");\nconst utils = require(\"../utils\");\nconst track = require(\"../track\");\nconst registry_1 = require(\"../emulator/registry\");\nconst types_1 = require(\"../emulator/types\");\nconst constants_1 = require(\"../emulator/constants\");\nconst functionsEmulator_1 = require(\"../emulator/functionsEmulator\");\nconst databaseEmulator_1 = require(\"../emulator/databaseEmulator\");\nconst firestoreEmulator_1 = require(\"../emulator/firestoreEmulator\");\nconst hostingEmulator_1 = require(\"../emulator/hostingEmulator\");\nconst error_1 = require(\"../error\");\nconst getProjectId = require(\"../getProjectId\");\nconst pubsubEmulator_1 = require(\"./pubsubEmulator\");\nexports.VALID_EMULATOR_STRINGS = types_1.ALL_EMULATORS;\nfunction checkPortOpen(port, host) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const inUse = yield tcpport.check(port, host);\n            return !inUse;\n        }\n        catch (e) {\n            return false;\n        }\n    });\n}\nexports.checkPortOpen = checkPortOpen;\nfunction waitForPortClosed(port, host) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const interval = 250;\n        const timeout = 30000;\n        try {\n            yield tcpport.waitUntilUsed(port, interval, timeout);\n        }\n        catch (e) {\n            throw new error_1.FirebaseError(`TIMEOUT: Port ${port} on ${host} was not active within ${timeout}ms`);\n        }\n    });\n}\nexports.waitForPortClosed = waitForPortClosed;\nfunction startEmulator(instance) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = instance.getName();\n        const info = instance.getInfo();\n        track(\"emulators:start\", name);\n        const portOpen = yield checkPortOpen(info.port, info.host);\n        if (!portOpen) {\n            yield cleanShutdown();\n            utils.logWarning(`Port ${info.port} is not open, could not start ${name} emulator.`);\n            utils.logBullet(`To select a different port for the emulator, update your \"firebase.json\":\n    {\n      // ...\n      \"emulators\": {\n        \"${name}\": {\n          \"port\": \"${clc.yellow(\"PORT\")}\"\n        }\n      }\n    }`);\n            return utils.reject(`Could not start ${name} emulator, port taken.`, {});\n        }\n        yield registry_1.EmulatorRegistry.start(instance);\n    });\n}\nexports.startEmulator = startEmulator;\nfunction cleanShutdown() {\n    return __awaiter(this, void 0, void 0, function* () {\n        utils.logBullet(\"Shutting down emulators.\");\n        for (const name of registry_1.EmulatorRegistry.listRunning()) {\n            utils.logBullet(`Stopping ${name} emulator`);\n            yield registry_1.EmulatorRegistry.stop(name);\n        }\n        return true;\n    });\n}\nexports.cleanShutdown = cleanShutdown;\nfunction filterEmulatorTargets(options) {\n    let targets = exports.VALID_EMULATOR_STRINGS.filter((e) => {\n        return options.config.has(e) || options.config.has(`emulators.${e}`);\n    });\n    if (options.only) {\n        targets = _.intersection(targets, options.only.split(\",\"));\n    }\n    return targets;\n}\nexports.filterEmulatorTargets = filterEmulatorTargets;\nfunction shouldStart(options, name) {\n    const targets = filterEmulatorTargets(options);\n    return targets.indexOf(name) >= 0;\n}\nexports.shouldStart = shouldStart;\nfunction startAll(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const targets = filterEmulatorTargets(options);\n        options.targets = targets;\n        const projectId = getProjectId(options, true);\n        utils.logLabeledBullet(\"emulators\", `Starting emulators: ${targets.join(\", \")}`);\n        if (options.only) {\n            const requested = options.only.split(\",\");\n            const ignored = _.difference(requested, targets);\n            for (const name of ignored) {\n                utils.logWarning(`Not starting the ${clc.bold(name)} emulator, make sure you have run ${clc.bold(\"firebase init\")}.`);\n            }\n        }\n        if (shouldStart(options, types_1.Emulators.FUNCTIONS)) {\n            const functionsAddr = constants_1.Constants.getAddress(types_1.Emulators.FUNCTIONS, options);\n            const projectId = getProjectId(options, false);\n            const functionsDir = path.join(options.config.projectDir, options.config.get(\"functions.source\"));\n            let inspectFunctions;\n            if (options.inspectFunctions === true) {\n                options.inspectFunctions = \"9229\";\n            }\n            if (options.inspectFunctions) {\n                inspectFunctions = Number(options.inspectFunctions);\n                if (isNaN(inspectFunctions) || inspectFunctions < 1024 || inspectFunctions > 65535) {\n                    throw new error_1.FirebaseError(`\"${options.inspectFunctions}\" is not a valid value for the --inspect-functions flag, please pass an integer between 1024 and 65535.`);\n                }\n                utils.logLabeledWarning(\"functions\", `You are running the functions emulator in debug mode (port=${inspectFunctions}). This means that functions will execute in sequence rather than in parallel.`);\n            }\n            const functionsEmulator = new functionsEmulator_1.FunctionsEmulator({\n                projectId,\n                functionsDir,\n                host: functionsAddr.host,\n                port: functionsAddr.port,\n                debugPort: inspectFunctions,\n            });\n            yield startEmulator(functionsEmulator);\n        }\n        if (shouldStart(options, types_1.Emulators.FIRESTORE)) {\n            const firestoreAddr = constants_1.Constants.getAddress(types_1.Emulators.FIRESTORE, options);\n            const args = {\n                host: firestoreAddr.host,\n                port: firestoreAddr.port,\n                projectId,\n                auto_download: true,\n            };\n            const rulesLocalPath = options.config.get(\"firestore.rules\");\n            if (rulesLocalPath) {\n                const rules = path.join(options.projectRoot, rulesLocalPath);\n                if (fs.existsSync(rules)) {\n                    args.rules = rules;\n                }\n                else {\n                    utils.logWarning(`Firestore rules file ${clc.bold(rules)} specified in firebase.json does not exist, starting Firestore emulator without rules.`);\n                }\n            }\n            else {\n                utils.logWarning(`No Firestore rules file specified in firebase.json, using default rules.`);\n            }\n            const firestoreEmulator = new firestoreEmulator_1.FirestoreEmulator(args);\n            yield startEmulator(firestoreEmulator);\n            utils.logLabeledBullet(types_1.Emulators.FIRESTORE, `For testing set ${clc.bold(`${firestoreEmulator_1.FirestoreEmulator.FIRESTORE_EMULATOR_ENV}=${firestoreAddr.host}:${firestoreAddr.port}`)}`);\n        }\n        if (shouldStart(options, types_1.Emulators.DATABASE)) {\n            const databaseAddr = constants_1.Constants.getAddress(types_1.Emulators.DATABASE, options);\n            const args = {\n                host: databaseAddr.host,\n                port: databaseAddr.port,\n                projectId,\n                auto_download: true,\n            };\n            if (shouldStart(options, types_1.Emulators.FUNCTIONS)) {\n                const functionsAddr = constants_1.Constants.getAddress(types_1.Emulators.FUNCTIONS, options);\n                args.functions_emulator_host = functionsAddr.host;\n                args.functions_emulator_port = functionsAddr.port;\n            }\n            const rulesLocalPath = options.config.get(\"database.rules\");\n            if (rulesLocalPath) {\n                const rules = path.join(options.projectRoot, rulesLocalPath);\n                if (fs.existsSync(rules)) {\n                    args.rules = rules;\n                }\n                else {\n                    utils.logWarning(`Database rules file ${clc.bold(rules)} specified in firebase.json does not exist, starting Database emulator without rules.`);\n                }\n            }\n            else {\n                utils.logWarning(`No Database rules file specified in firebase.json, using default rules.`);\n            }\n            const databaseEmulator = new databaseEmulator_1.DatabaseEmulator(args);\n            yield startEmulator(databaseEmulator);\n            utils.logLabeledBullet(types_1.Emulators.DATABASE, `For testing set ${clc.bold(`${databaseEmulator_1.DatabaseEmulator.DATABASE_EMULATOR_ENV}=${databaseAddr.host}:${databaseAddr.port}`)}`);\n        }\n        if (shouldStart(options, types_1.Emulators.HOSTING)) {\n            const hostingAddr = constants_1.Constants.getAddress(types_1.Emulators.HOSTING, options);\n            const hostingEmulator = new hostingEmulator_1.HostingEmulator({\n                host: hostingAddr.host,\n                port: hostingAddr.port,\n                options,\n            });\n            yield startEmulator(hostingEmulator);\n        }\n        if (shouldStart(options, types_1.Emulators.PUBSUB)) {\n            if (!projectId) {\n                throw new error_1.FirebaseError(\"Cannot start the Pub/Sub emulator without a project: run 'firebase init' or provide the --project flag\");\n            }\n            const pubsubAddr = constants_1.Constants.getAddress(types_1.Emulators.PUBSUB, options);\n            const pubsubEmulator = new pubsubEmulator_1.PubsubEmulator({\n                host: pubsubAddr.host,\n                port: pubsubAddr.port,\n                projectId,\n                auto_download: true,\n            });\n            yield startEmulator(pubsubEmulator);\n        }\n        const running = registry_1.EmulatorRegistry.listRunning();\n        for (const name of running) {\n            const instance = registry_1.EmulatorRegistry.get(name);\n            if (instance) {\n                yield instance.connect();\n            }\n        }\n    });\n}\nexports.startAll = startAll;\n"]},"metadata":{},"sourceType":"script"}