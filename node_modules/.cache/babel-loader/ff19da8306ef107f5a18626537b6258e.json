{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs-extra\");\n\nconst command_1 = require(\"../command\");\n\nconst utils = require(\"../utils\");\n\nconst requireAuth = require(\"../requireAuth\");\n\nconst client_1 = require(\"../appdistribution/client\");\n\nconst error_1 = require(\"../error\");\n\nconst distribution_1 = require(\"../appdistribution/distribution\");\n\nfunction ensureFileExists(file, message = \"\") {\n  if (!fs.existsSync(file)) {\n    throw new error_1.FirebaseError(`File ${file} does not exist: ${message}`);\n  }\n}\n\nfunction getAppId(appId) {\n  if (!appId) {\n    throw new error_1.FirebaseError(\"set the --app option to a valid Firebase app id and try again\");\n  }\n\n  return appId;\n}\n\nfunction getReleaseNotes(releaseNotes, releaseNotesFile) {\n  if (releaseNotes) {\n    return releaseNotes.replace(/\\\\n/g, \"\\n\");\n  } else if (releaseNotesFile) {\n    ensureFileExists(releaseNotesFile);\n    return fs.readFileSync(releaseNotesFile, \"utf8\");\n  }\n\n  return \"\";\n}\n\nfunction getTestersOrGroups(value, file) {\n  if (!value && file) {\n    ensureFileExists(file);\n    value = fs.readFileSync(file, \"utf8\");\n  }\n\n  if (value) {\n    return value.split(/,|\\n/).map(entry => entry.trim()).filter(entry => !!entry);\n  }\n\n  return [];\n}\n\nmodule.exports = new command_1.Command(\"appdistribution:distribute <distribution-file>\").description(\"upload a distribution\").option(\"--app <app_id>\", \"the app id of your Firebase app\").option(\"--release-notes <string>\", \"release notes to include with this distribution\").option(\"--release-notes-file <file>\", \"path to file with release notes to include with this distribution\").option(\"--testers <string>\", \"a comma separated list of tester emails to distribute to\").option(\"--testers-file <file>\", \"path to file with a comma separated list of tester emails to distribute to\").option(\"--groups <string>\", \"a comma separated list of group aliases to distribute to\").option(\"--groups-file <file>\", \"path to file with a comma separated list of group aliases to distribute to\").before(requireAuth).action((file, options) => __awaiter(this, void 0, void 0, function* () {\n  const appId = getAppId(options.app);\n  const distribution = new distribution_1.Distribution(file);\n  const releaseNotes = getReleaseNotes(options.releaseNotes, options.releaseNotesFile);\n  const testers = getTestersOrGroups(options.testers, options.testersFile);\n  const groups = getTestersOrGroups(options.groups, options.groupsFile);\n  const requests = new client_1.AppDistributionClient(appId);\n  let app;\n\n  try {\n    app = yield requests.getApp();\n  } catch (err) {\n    if (err.status === 404) {\n      throw new error_1.FirebaseError(`App Distribution could not find your app ${appId}. ` + `Make sure to onboard your app by pressing the \"Get started\" ` + \"button on the App Distribution page in the Firebase console: \" + \"https://console.firebase.google.com/project/_/appdistribution\", {\n        exit: 1\n      });\n    }\n\n    throw new error_1.FirebaseError(`failed to fetch app information. ${err.message}`, {\n      exit: 1\n    });\n  }\n\n  if (!app.contactEmail) {\n    throw new error_1.FirebaseError(`We could not find a contact email for app ${appId}. Please visit App Distribution within ` + \"the Firebase Console to set one up.\", {\n      exit: 1\n    });\n  }\n\n  const releaseHash = yield distribution.releaseHash();\n  let releaseId;\n  const uploadStatus = yield requests.getUploadStatus(releaseHash);\n\n  if (uploadStatus.status === client_1.UploadStatus.SUCCESS) {\n    utils.logWarning(\"this distribution has been uploaded before, skipping upload\");\n    releaseId = uploadStatus.release.id;\n  } else {\n    utils.logBullet(\"uploading distribution...\");\n\n    try {\n      const token = yield requests.getJwtToken();\n      const releaseEtag = yield requests.uploadDistribution(token, distribution);\n      releaseId = yield requests.pollReleaseIdByHash(releaseEtag);\n      utils.logSuccess(\"uploaded distribution successfully!\");\n    } catch (err) {\n      throw new error_1.FirebaseError(`failed to upload distribution. ${err.message}`, {\n        exit: 1\n      });\n    }\n  }\n\n  yield requests.addReleaseNotes(releaseId, releaseNotes);\n  yield requests.enableAccess(releaseId, testers, groups);\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/appdistribution-distribute.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","fs","require","command_1","utils","requireAuth","client_1","error_1","distribution_1","ensureFileExists","file","message","existsSync","FirebaseError","getAppId","appId","getReleaseNotes","releaseNotes","releaseNotesFile","replace","readFileSync","getTestersOrGroups","split","map","entry","trim","filter","module","Command","description","option","before","action","options","app","distribution","Distribution","testers","testersFile","groups","groupsFile","requests","AppDistributionClient","getApp","err","status","exit","contactEmail","releaseHash","releaseId","uploadStatus","getUploadStatus","UploadStatus","SUCCESS","logWarning","release","id","logBullet","token","getJwtToken","releaseEtag","uploadDistribution","pollReleaseIdByHash","logSuccess","addReleaseNotes","enableAccess"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs-extra\");\nconst command_1 = require(\"../command\");\nconst utils = require(\"../utils\");\nconst requireAuth = require(\"../requireAuth\");\nconst client_1 = require(\"../appdistribution/client\");\nconst error_1 = require(\"../error\");\nconst distribution_1 = require(\"../appdistribution/distribution\");\nfunction ensureFileExists(file, message = \"\") {\n    if (!fs.existsSync(file)) {\n        throw new error_1.FirebaseError(`File ${file} does not exist: ${message}`);\n    }\n}\nfunction getAppId(appId) {\n    if (!appId) {\n        throw new error_1.FirebaseError(\"set the --app option to a valid Firebase app id and try again\");\n    }\n    return appId;\n}\nfunction getReleaseNotes(releaseNotes, releaseNotesFile) {\n    if (releaseNotes) {\n        return releaseNotes.replace(/\\\\n/g, \"\\n\");\n    }\n    else if (releaseNotesFile) {\n        ensureFileExists(releaseNotesFile);\n        return fs.readFileSync(releaseNotesFile, \"utf8\");\n    }\n    return \"\";\n}\nfunction getTestersOrGroups(value, file) {\n    if (!value && file) {\n        ensureFileExists(file);\n        value = fs.readFileSync(file, \"utf8\");\n    }\n    if (value) {\n        return value\n            .split(/,|\\n/)\n            .map((entry) => entry.trim())\n            .filter((entry) => !!entry);\n    }\n    return [];\n}\nmodule.exports = new command_1.Command(\"appdistribution:distribute <distribution-file>\")\n    .description(\"upload a distribution\")\n    .option(\"--app <app_id>\", \"the app id of your Firebase app\")\n    .option(\"--release-notes <string>\", \"release notes to include with this distribution\")\n    .option(\"--release-notes-file <file>\", \"path to file with release notes to include with this distribution\")\n    .option(\"--testers <string>\", \"a comma separated list of tester emails to distribute to\")\n    .option(\"--testers-file <file>\", \"path to file with a comma separated list of tester emails to distribute to\")\n    .option(\"--groups <string>\", \"a comma separated list of group aliases to distribute to\")\n    .option(\"--groups-file <file>\", \"path to file with a comma separated list of group aliases to distribute to\")\n    .before(requireAuth)\n    .action((file, options) => __awaiter(this, void 0, void 0, function* () {\n    const appId = getAppId(options.app);\n    const distribution = new distribution_1.Distribution(file);\n    const releaseNotes = getReleaseNotes(options.releaseNotes, options.releaseNotesFile);\n    const testers = getTestersOrGroups(options.testers, options.testersFile);\n    const groups = getTestersOrGroups(options.groups, options.groupsFile);\n    const requests = new client_1.AppDistributionClient(appId);\n    let app;\n    try {\n        app = yield requests.getApp();\n    }\n    catch (err) {\n        if (err.status === 404) {\n            throw new error_1.FirebaseError(`App Distribution could not find your app ${appId}. ` +\n                `Make sure to onboard your app by pressing the \"Get started\" ` +\n                \"button on the App Distribution page in the Firebase console: \" +\n                \"https://console.firebase.google.com/project/_/appdistribution\", { exit: 1 });\n        }\n        throw new error_1.FirebaseError(`failed to fetch app information. ${err.message}`, { exit: 1 });\n    }\n    if (!app.contactEmail) {\n        throw new error_1.FirebaseError(`We could not find a contact email for app ${appId}. Please visit App Distribution within ` +\n            \"the Firebase Console to set one up.\", { exit: 1 });\n    }\n    const releaseHash = yield distribution.releaseHash();\n    let releaseId;\n    const uploadStatus = yield requests.getUploadStatus(releaseHash);\n    if (uploadStatus.status === client_1.UploadStatus.SUCCESS) {\n        utils.logWarning(\"this distribution has been uploaded before, skipping upload\");\n        releaseId = uploadStatus.release.id;\n    }\n    else {\n        utils.logBullet(\"uploading distribution...\");\n        try {\n            const token = yield requests.getJwtToken();\n            const releaseEtag = yield requests.uploadDistribution(token, distribution);\n            releaseId = yield requests.pollReleaseIdByHash(releaseEtag);\n            utils.logSuccess(\"uploaded distribution successfully!\");\n        }\n        catch (err) {\n            throw new error_1.FirebaseError(`failed to upload distribution. ${err.message}`, { exit: 1 });\n        }\n    }\n    yield requests.addReleaseNotes(releaseId, releaseNotes);\n    yield requests.enableAccess(releaseId, testers, groups);\n}));\n"]},"metadata":{},"sourceType":"script"}