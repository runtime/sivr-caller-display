{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n\nconst clc = require(\"cli-color\");\n\nconst _require = require(\"../error\"),\n      FirebaseError = _require.FirebaseError;\n\nconst iam = require(\"../gcp/iam\");\n\nconst _require2 = require(\"../prompt\"),\n      promptOnce = _require2.promptOnce;\n\nconst utils = require(\"../utils\");\n\nfunction _formatDescription(extensionName, projectId, roles) {\n  const question = `${clc.bold(extensionName)} will be granted the following access to project ${clc.bold(projectId)}`;\n  return Promise.all(_.map(roles, role => module.exports._retrieveRoleInfo(role))).then(results => {\n    results.unshift(question);\n    return _.join(results, \"\\n\");\n  });\n}\n\nfunction _retrieveRoleInfo(role) {\n  return iam.getRole(role).then(result => {\n    return `- ${result.title} (${result.description})`;\n  });\n}\n\nfunction _prompt(extensionName, projectId, roles) {\n  if (!roles || !roles.length) {\n    return Promise.resolve();\n  }\n\n  return _formatDescription(extensionName, projectId, roles).then(function (message) {\n    utils.logLabeledBullet(\"extensions\", message);\n    const question = {\n      name: \"consent\",\n      type: \"confirm\",\n      message: \"Would you like to continue?\",\n      default: true\n    };\n    return promptOnce(question);\n  }).then(consented => {\n    if (!consented) {\n      throw new FirebaseError(\"Without explicit consent for the roles listed, we cannot deploy this extension.\", {\n        exit: 2\n      });\n    }\n  });\n}\n\nmodule.exports = {\n  prompt: _prompt,\n  _formatDescription: _formatDescription,\n  _retrieveRoleInfo: _retrieveRoleInfo\n};","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/extensions/askUserForConsent.js"],"names":["_","require","clc","FirebaseError","iam","promptOnce","utils","_formatDescription","extensionName","projectId","roles","question","bold","Promise","all","map","role","module","exports","_retrieveRoleInfo","then","results","unshift","join","getRole","result","title","description","_prompt","length","resolve","message","logLabeledBullet","name","type","default","consented","exit","prompt"],"mappings":"AAAA;;AACA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAnB;;iBAC0BA,OAAO,CAAC,UAAD,C;MAAzBE,a,YAAAA,a;;AACR,MAAMC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAnB;;kBACuBA,OAAO,CAAC,WAAD,C;MAAtBI,U,aAAAA,U;;AACR,MAAMC,KAAK,GAAGL,OAAO,CAAC,UAAD,CAArB;;AACA,SAASM,kBAAT,CAA4BC,aAA5B,EAA2CC,SAA3C,EAAsDC,KAAtD,EAA6D;AACzD,QAAMC,QAAQ,GAAI,GAAET,GAAG,CAACU,IAAJ,CAASJ,aAAT,CAAwB,oDAAmDN,GAAG,CAACU,IAAJ,CAASH,SAAT,CAAoB,EAAnH;AACA,SAAOI,OAAO,CAACC,GAAR,CAAYd,CAAC,CAACe,GAAF,CAAML,KAAN,EAAcM,IAAD,IAAUC,MAAM,CAACC,OAAP,CAAeC,iBAAf,CAAiCH,IAAjC,CAAvB,CAAZ,EAA4EI,IAA5E,CAAkFC,OAAD,IAAa;AACjGA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,QAAhB;AACA,WAAOX,CAAC,CAACuB,IAAF,CAAOF,OAAP,EAAgB,IAAhB,CAAP;AACH,GAHM,CAAP;AAIH;;AACD,SAASF,iBAAT,CAA2BH,IAA3B,EAAiC;AAC7B,SAAOZ,GAAG,CAACoB,OAAJ,CAAYR,IAAZ,EAAkBI,IAAlB,CAAwBK,MAAD,IAAY;AACtC,WAAQ,KAAIA,MAAM,CAACC,KAAM,KAAID,MAAM,CAACE,WAAY,GAAhD;AACH,GAFM,CAAP;AAGH;;AACD,SAASC,OAAT,CAAiBpB,aAAjB,EAAgCC,SAAhC,EAA2CC,KAA3C,EAAkD;AAC9C,MAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACmB,MAArB,EAA6B;AACzB,WAAOhB,OAAO,CAACiB,OAAR,EAAP;AACH;;AACD,SAAOvB,kBAAkB,CAACC,aAAD,EAAgBC,SAAhB,EAA2BC,KAA3B,CAAlB,CACFU,IADE,CACG,UAAUW,OAAV,EAAmB;AACzBzB,IAAAA,KAAK,CAAC0B,gBAAN,CAAuB,YAAvB,EAAqCD,OAArC;AACA,UAAMpB,QAAQ,GAAG;AACbsB,MAAAA,IAAI,EAAE,SADO;AAEbC,MAAAA,IAAI,EAAE,SAFO;AAGbH,MAAAA,OAAO,EAAE,6BAHI;AAIbI,MAAAA,OAAO,EAAE;AAJI,KAAjB;AAMA,WAAO9B,UAAU,CAACM,QAAD,CAAjB;AACH,GAVM,EAWFS,IAXE,CAWIgB,SAAD,IAAe;AACrB,QAAI,CAACA,SAAL,EAAgB;AACZ,YAAM,IAAIjC,aAAJ,CAAkB,iFAAlB,EAAqG;AAAEkC,QAAAA,IAAI,EAAE;AAAR,OAArG,CAAN;AACH;AACJ,GAfM,CAAP;AAgBH;;AACDpB,MAAM,CAACC,OAAP,GAAiB;AACboB,EAAAA,MAAM,EAAEV,OADK;AAEbrB,EAAAA,kBAAkB,EAAEA,kBAFP;AAGbY,EAAAA,iBAAiB,EAAEA;AAHN,CAAjB","sourcesContent":["\"use strict\";\nconst _ = require(\"lodash\");\nconst clc = require(\"cli-color\");\nconst { FirebaseError } = require(\"../error\");\nconst iam = require(\"../gcp/iam\");\nconst { promptOnce } = require(\"../prompt\");\nconst utils = require(\"../utils\");\nfunction _formatDescription(extensionName, projectId, roles) {\n    const question = `${clc.bold(extensionName)} will be granted the following access to project ${clc.bold(projectId)}`;\n    return Promise.all(_.map(roles, (role) => module.exports._retrieveRoleInfo(role))).then((results) => {\n        results.unshift(question);\n        return _.join(results, \"\\n\");\n    });\n}\nfunction _retrieveRoleInfo(role) {\n    return iam.getRole(role).then((result) => {\n        return `- ${result.title} (${result.description})`;\n    });\n}\nfunction _prompt(extensionName, projectId, roles) {\n    if (!roles || !roles.length) {\n        return Promise.resolve();\n    }\n    return _formatDescription(extensionName, projectId, roles)\n        .then(function (message) {\n        utils.logLabeledBullet(\"extensions\", message);\n        const question = {\n            name: \"consent\",\n            type: \"confirm\",\n            message: \"Would you like to continue?\",\n            default: true,\n        };\n        return promptOnce(question);\n    })\n        .then((consented) => {\n        if (!consented) {\n            throw new FirebaseError(\"Without explicit consent for the roles listed, we cannot deploy this extension.\", { exit: 2 });\n        }\n    });\n}\nmodule.exports = {\n    prompt: _prompt,\n    _formatDescription: _formatDescription,\n    _retrieveRoleInfo: _retrieveRoleInfo,\n};\n"]},"metadata":{},"sourceType":"script"}