{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst request = require(\"request\");\n\nconst uuid = require(\"uuid\");\n\nconst pubsub_1 = require(\"@google-cloud/pubsub\");\n\nconst javaEmulators = require(\"../serve/javaEmulators\");\n\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\n\nconst types_1 = require(\"../emulator/types\");\n\nconst constants_1 = require(\"./constants\");\n\nconst error_1 = require(\"../error\");\n\nconst registry_1 = require(\"./registry\");\n\nclass PubsubEmulator {\n  constructor(args) {\n    this.args = args;\n\n    const _this$getInfo = this.getInfo(),\n          host = _this$getInfo.host,\n          port = _this$getInfo.port;\n\n    this.pubsub = new pubsub_1.PubSub({\n      apiEndpoint: `${host}:${port}`,\n      projectId: this.args.projectId\n    });\n    this.triggers = new Map();\n    this.subscriptions = new Map();\n  }\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return javaEmulators.start(types_1.Emulators.PUBSUB, this.args);\n    });\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return;\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield javaEmulators.stop(types_1.Emulators.PUBSUB);\n    });\n  }\n\n  getInfo() {\n    const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.PUBSUB);\n    const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.PUBSUB);\n    return {\n      host,\n      port\n    };\n  }\n\n  getName() {\n    return types_1.Emulators.PUBSUB;\n  }\n\n  addTrigger(topicName, trigger) {\n    return __awaiter(this, void 0, void 0, function* () {\n      emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `addTrigger(${topicName}, ${trigger})`);\n      const topicTriggers = this.triggers.get(topicName) || new Set();\n\n      if (topicTriggers.has(topicName) && this.subscriptions.has(topicName)) {\n        emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", \"Trigger already exists\");\n        return;\n      }\n\n      const topic = this.pubsub.topic(topicName);\n\n      try {\n        emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Creating topic: ${topicName}`);\n        yield topic.create();\n      } catch (e) {\n        if (e && e.code === 6) {\n          emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Topic ${topicName} exists`);\n        } else {\n          throw new error_1.FirebaseError(`Could not create topic ${topicName}`, {\n            original: e\n          });\n        }\n      }\n\n      const subName = `emulator-sub-${topicName}`;\n      let sub;\n\n      try {\n        emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Creating sub for topic: ${topicName}`);\n\n        var _ref = yield topic.createSubscription(subName);\n\n        var _ref2 = _slicedToArray(_ref, 1);\n\n        sub = _ref2[0];\n      } catch (e) {\n        if (e && e.code === 6) {\n          emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Sub for ${topicName} exists`);\n          sub = topic.subscription(`emulator-sub-${topicName}`);\n        } else {\n          throw new error_1.FirebaseError(`Could not create sub ${subName}`, {\n            original: e\n          });\n        }\n      }\n\n      sub.on(\"message\", message => {\n        this.onMessage(topicName, message);\n      });\n      topicTriggers.add(trigger);\n      this.triggers.set(topicName, topicTriggers);\n      this.subscriptions.set(topicName, sub);\n    });\n  }\n\n  onMessage(topicName, message) {\n    emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `onMessage(${topicName}, ${message.id})`);\n    const topicTriggers = this.triggers.get(topicName);\n\n    if (!topicTriggers || topicTriggers.size === 0) {\n      throw new error_1.FirebaseError(`No trigger for topic: ${topicName}`);\n    }\n\n    const functionsPort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.FUNCTIONS);\n\n    if (!functionsPort) {\n      throw new error_1.FirebaseError(`Attempted to execute pubsub trigger for topic ${topicName} but could not find Functions emulator`);\n    }\n\n    emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Executing ${topicTriggers.size} matching triggers (${JSON.stringify(Array.from(topicTriggers))})`);\n    let remaining = topicTriggers.size;\n\n    for (const trigger of topicTriggers) {\n      const body = {\n        context: {\n          eventId: uuid.v4(),\n          resource: {\n            service: \"pubsub.googleapis.com\",\n            name: `projects/${this.args.projectId}/topics/${topicName}`\n          },\n          eventType: \"google.pubsub.topic.publish\",\n          timestamp: message.publishTime.toISOString()\n        },\n        data: {\n          data: message.data,\n          attributes: message.attributes\n        }\n      };\n      const functionsUrl = `http://localhost:${functionsPort}/functions/projects/${this.args.projectId}/triggers/${trigger}`;\n      request.post(functionsUrl, {\n        body: body,\n        json: true\n      }, (err, res) => {\n        if (err) {\n          emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Error running functions: ${JSON.stringify(err)}`);\n        }\n\n        if (res) {\n          emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Functions emulator response: HTTP ${res.statusCode} ${JSON.stringify(res.body)}`);\n        }\n\n        remaining--;\n\n        if (remaining <= 0) {\n          emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Acking message ${message.id}`);\n          message.ack();\n        }\n      });\n    }\n  }\n\n}\n\nexports.PubsubEmulator = PubsubEmulator;","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/emulator/pubsubEmulator.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","request","require","uuid","pubsub_1","javaEmulators","emulatorLogger_1","types_1","constants_1","error_1","registry_1","PubsubEmulator","constructor","args","getInfo","host","port","pubsub","PubSub","apiEndpoint","projectId","triggers","Map","subscriptions","start","Emulators","PUBSUB","connect","stop","Constants","getDefaultHost","getDefaultPort","getName","addTrigger","topicName","trigger","EmulatorLogger","logLabeled","topicTriggers","get","Set","has","topic","create","code","FirebaseError","original","subName","sub","createSubscription","subscription","on","message","onMessage","add","set","id","size","functionsPort","EmulatorRegistry","getPort","FUNCTIONS","JSON","stringify","Array","from","remaining","body","context","eventId","v4","resource","service","name","eventType","timestamp","publishTime","toISOString","data","attributes","functionsUrl","post","json","err","res","statusCode","ack"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request = require(\"request\");\nconst uuid = require(\"uuid\");\nconst pubsub_1 = require(\"@google-cloud/pubsub\");\nconst javaEmulators = require(\"../serve/javaEmulators\");\nconst emulatorLogger_1 = require(\"./emulatorLogger\");\nconst types_1 = require(\"../emulator/types\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"../error\");\nconst registry_1 = require(\"./registry\");\nclass PubsubEmulator {\n    constructor(args) {\n        this.args = args;\n        const { host, port } = this.getInfo();\n        this.pubsub = new pubsub_1.PubSub({\n            apiEndpoint: `${host}:${port}`,\n            projectId: this.args.projectId,\n        });\n        this.triggers = new Map();\n        this.subscriptions = new Map();\n    }\n    start() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return javaEmulators.start(types_1.Emulators.PUBSUB, this.args);\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return;\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield javaEmulators.stop(types_1.Emulators.PUBSUB);\n        });\n    }\n    getInfo() {\n        const host = this.args.host || constants_1.Constants.getDefaultHost(types_1.Emulators.PUBSUB);\n        const port = this.args.port || constants_1.Constants.getDefaultPort(types_1.Emulators.PUBSUB);\n        return {\n            host,\n            port,\n        };\n    }\n    getName() {\n        return types_1.Emulators.PUBSUB;\n    }\n    addTrigger(topicName, trigger) {\n        return __awaiter(this, void 0, void 0, function* () {\n            emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `addTrigger(${topicName}, ${trigger})`);\n            const topicTriggers = this.triggers.get(topicName) || new Set();\n            if (topicTriggers.has(topicName) && this.subscriptions.has(topicName)) {\n                emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", \"Trigger already exists\");\n                return;\n            }\n            const topic = this.pubsub.topic(topicName);\n            try {\n                emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Creating topic: ${topicName}`);\n                yield topic.create();\n            }\n            catch (e) {\n                if (e && e.code === 6) {\n                    emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Topic ${topicName} exists`);\n                }\n                else {\n                    throw new error_1.FirebaseError(`Could not create topic ${topicName}`, { original: e });\n                }\n            }\n            const subName = `emulator-sub-${topicName}`;\n            let sub;\n            try {\n                emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Creating sub for topic: ${topicName}`);\n                [sub] = yield topic.createSubscription(subName);\n            }\n            catch (e) {\n                if (e && e.code === 6) {\n                    emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Sub for ${topicName} exists`);\n                    sub = topic.subscription(`emulator-sub-${topicName}`);\n                }\n                else {\n                    throw new error_1.FirebaseError(`Could not create sub ${subName}`, { original: e });\n                }\n            }\n            sub.on(\"message\", (message) => {\n                this.onMessage(topicName, message);\n            });\n            topicTriggers.add(trigger);\n            this.triggers.set(topicName, topicTriggers);\n            this.subscriptions.set(topicName, sub);\n        });\n    }\n    onMessage(topicName, message) {\n        emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `onMessage(${topicName}, ${message.id})`);\n        const topicTriggers = this.triggers.get(topicName);\n        if (!topicTriggers || topicTriggers.size === 0) {\n            throw new error_1.FirebaseError(`No trigger for topic: ${topicName}`);\n        }\n        const functionsPort = registry_1.EmulatorRegistry.getPort(types_1.Emulators.FUNCTIONS);\n        if (!functionsPort) {\n            throw new error_1.FirebaseError(`Attempted to execute pubsub trigger for topic ${topicName} but could not find Functions emulator`);\n        }\n        emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Executing ${topicTriggers.size} matching triggers (${JSON.stringify(Array.from(topicTriggers))})`);\n        let remaining = topicTriggers.size;\n        for (const trigger of topicTriggers) {\n            const body = {\n                context: {\n                    eventId: uuid.v4(),\n                    resource: {\n                        service: \"pubsub.googleapis.com\",\n                        name: `projects/${this.args.projectId}/topics/${topicName}`,\n                    },\n                    eventType: \"google.pubsub.topic.publish\",\n                    timestamp: message.publishTime.toISOString(),\n                },\n                data: {\n                    data: message.data,\n                    attributes: message.attributes,\n                },\n            };\n            const functionsUrl = `http://localhost:${functionsPort}/functions/projects/${this.args.projectId}/triggers/${trigger}`;\n            request.post(functionsUrl, {\n                body: body,\n                json: true,\n            }, (err, res) => {\n                if (err) {\n                    emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Error running functions: ${JSON.stringify(err)}`);\n                }\n                if (res) {\n                    emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Functions emulator response: HTTP ${res.statusCode} ${JSON.stringify(res.body)}`);\n                }\n                remaining--;\n                if (remaining <= 0) {\n                    emulatorLogger_1.EmulatorLogger.logLabeled(\"DEBUG\", \"pubsub\", `Acking message ${message.id}`);\n                    message.ack();\n                }\n            });\n        }\n    }\n}\nexports.PubsubEmulator = PubsubEmulator;\n"]},"metadata":{},"sourceType":"script"}