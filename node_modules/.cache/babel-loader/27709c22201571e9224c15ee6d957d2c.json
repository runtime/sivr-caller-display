{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst clc = require(\"cli-color\");\n\nconst _ = require(\"lodash\");\n\nconst marked = require(\"marked\");\n\nconst ora = require(\"ora\");\n\nconst command_1 = require(\"../command\");\n\nconst error_1 = require(\"../error\");\n\nconst extensionsApi = require(\"../extensions/extensionsApi\");\n\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\n\nconst paramHelper = require(\"../extensions/paramHelper\");\n\nconst resolveSource = require(\"../extensions/resolveSource\");\n\nconst updateHelper_1 = require(\"../extensions/updateHelper\");\n\nconst getProjectId = require(\"../getProjectId\");\n\nconst requirePermissions_1 = require(\"../requirePermissions\");\n\nconst utils = require(\"../utils\");\n\nconst TerminalRenderer = require(\"marked-terminal\");\n\nmarked.setOptions({\n  renderer: new TerminalRenderer()\n});\nexports.default = new command_1.Command(\"ext:update <extensionInstanceId>\").description(\"update an existing extension instance to the latest version\").before(requirePermissions_1.requirePermissions, [\"firebasemods.instances.update\", \"firebasemods.instances.get\"]).before(extensionsHelper_1.ensureExtensionsApiEnabled).action((instanceId, options) => __awaiter(this, void 0, void 0, function* () {\n  const spinner = ora.default(`Updating ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);\n\n  try {\n    const projectId = getProjectId(options, false);\n    let existingInstance;\n\n    try {\n      existingInstance = yield extensionsApi.getInstance(projectId, instanceId);\n    } catch (err) {\n      if (err.status === 404) {\n        return utils.reject(`No extension instance ${instanceId} found in project ${projectId}.`, {\n          exit: 1\n        });\n      }\n\n      throw err;\n    }\n\n    const currentSpec = _.get(existingInstance, \"config.source.spec\");\n\n    const currentParams = _.get(existingInstance, \"config.params\");\n\n    const registryEntry = yield resolveSource.resolveRegistryEntry(currentSpec.name);\n    const targetVersion = resolveSource.getTargetVersion(registryEntry, \"latest\");\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, `Updating ${instanceId} from version ${clc.bold(currentSpec.version)} to version ${clc.bold(targetVersion)}`);\n    yield resolveSource.promptForUpdateWarnings(registryEntry, currentSpec.version, targetVersion);\n    const sourceUrl = resolveSource.resolveSourceUrl(registryEntry, currentSpec.name, targetVersion);\n    const newSource = yield extensionsApi.getSource(sourceUrl);\n    const newSpec = newSource.spec;\n\n    if (currentSpec.version === newSpec.version) {\n      utils.logLabeledBullet(extensionsHelper_1.logPrefix, `${clc.bold(instanceId)} is already up to date. Its version is ${clc.bold(currentSpec.version)}.`);\n      return;\n    }\n\n    yield updateHelper_1.displayChanges(currentSpec, newSpec);\n    const newParams = yield paramHelper.promptForNewParams(currentSpec, newSpec, currentParams, projectId);\n\n    const rolesToRemove = _.differenceWith(currentSpec.roles, _.get(newSpec, \"roles\", []), _.isEqual);\n\n    spinner.start();\n    const updateOptions = {\n      projectId,\n      instanceId,\n      source: newSource,\n      rolesToAdd: _.get(newSpec, \"roles\", []),\n      rolesToRemove,\n      serviceAccountEmail: existingInstance.serviceAccountEmail,\n      billingRequired: newSpec.billingRequired\n    };\n\n    if (!_.isEqual(newParams, currentParams)) {\n      updateOptions.params = newParams;\n    }\n\n    yield updateHelper_1.update(updateOptions);\n    spinner.stop();\n    utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully updated ${clc.bold(instanceId)}.`);\n    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your updated instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n  } catch (err) {\n    if (spinner.isSpinning) {\n      spinner.fail();\n    }\n\n    if (!(err instanceof error_1.FirebaseError)) {\n      throw new error_1.FirebaseError(`Error occurred while updating the instance: ${err.message}`, {\n        original: err\n      });\n    }\n\n    throw err;\n  }\n}));","map":{"version":3,"sources":["/Users/Erik.Kroha1/Jobs/Verizon/Talk Home/sivr-caller-display/node_modules/firebase-tools/lib/commands/ext-update.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","clc","require","_","marked","ora","command_1","error_1","extensionsApi","extensionsHelper_1","paramHelper","resolveSource","updateHelper_1","getProjectId","requirePermissions_1","utils","TerminalRenderer","setOptions","renderer","default","Command","description","before","requirePermissions","ensureExtensionsApiEnabled","action","instanceId","options","spinner","bold","projectId","existingInstance","getInstance","err","status","exit","currentSpec","get","currentParams","registryEntry","resolveRegistryEntry","name","targetVersion","getTargetVersion","logLabeledBullet","logPrefix","version","promptForUpdateWarnings","sourceUrl","resolveSourceUrl","newSource","getSource","newSpec","spec","displayChanges","newParams","promptForNewParams","rolesToRemove","differenceWith","roles","isEqual","start","updateOptions","source","rolesToAdd","serviceAccountEmail","billingRequired","params","update","stop","logLabeledSuccess","consoleUrl","isSpinning","fail","FirebaseError","message","original"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst clc = require(\"cli-color\");\nconst _ = require(\"lodash\");\nconst marked = require(\"marked\");\nconst ora = require(\"ora\");\nconst command_1 = require(\"../command\");\nconst error_1 = require(\"../error\");\nconst extensionsApi = require(\"../extensions/extensionsApi\");\nconst extensionsHelper_1 = require(\"../extensions/extensionsHelper\");\nconst paramHelper = require(\"../extensions/paramHelper\");\nconst resolveSource = require(\"../extensions/resolveSource\");\nconst updateHelper_1 = require(\"../extensions/updateHelper\");\nconst getProjectId = require(\"../getProjectId\");\nconst requirePermissions_1 = require(\"../requirePermissions\");\nconst utils = require(\"../utils\");\nconst TerminalRenderer = require(\"marked-terminal\");\nmarked.setOptions({\n    renderer: new TerminalRenderer(),\n});\nexports.default = new command_1.Command(\"ext:update <extensionInstanceId>\")\n    .description(\"update an existing extension instance to the latest version\")\n    .before(requirePermissions_1.requirePermissions, [\"firebasemods.instances.update\", \"firebasemods.instances.get\"])\n    .before(extensionsHelper_1.ensureExtensionsApiEnabled)\n    .action((instanceId, options) => __awaiter(this, void 0, void 0, function* () {\n    const spinner = ora.default(`Updating ${clc.bold(instanceId)}. This usually takes 3 to 5 minutes...`);\n    try {\n        const projectId = getProjectId(options, false);\n        let existingInstance;\n        try {\n            existingInstance = yield extensionsApi.getInstance(projectId, instanceId);\n        }\n        catch (err) {\n            if (err.status === 404) {\n                return utils.reject(`No extension instance ${instanceId} found in project ${projectId}.`, {\n                    exit: 1,\n                });\n            }\n            throw err;\n        }\n        const currentSpec = _.get(existingInstance, \"config.source.spec\");\n        const currentParams = _.get(existingInstance, \"config.params\");\n        const registryEntry = yield resolveSource.resolveRegistryEntry(currentSpec.name);\n        const targetVersion = resolveSource.getTargetVersion(registryEntry, \"latest\");\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, `Updating ${instanceId} from version ${clc.bold(currentSpec.version)} to version ${clc.bold(targetVersion)}`);\n        yield resolveSource.promptForUpdateWarnings(registryEntry, currentSpec.version, targetVersion);\n        const sourceUrl = resolveSource.resolveSourceUrl(registryEntry, currentSpec.name, targetVersion);\n        const newSource = yield extensionsApi.getSource(sourceUrl);\n        const newSpec = newSource.spec;\n        if (currentSpec.version === newSpec.version) {\n            utils.logLabeledBullet(extensionsHelper_1.logPrefix, `${clc.bold(instanceId)} is already up to date. Its version is ${clc.bold(currentSpec.version)}.`);\n            return;\n        }\n        yield updateHelper_1.displayChanges(currentSpec, newSpec);\n        const newParams = yield paramHelper.promptForNewParams(currentSpec, newSpec, currentParams, projectId);\n        const rolesToRemove = _.differenceWith(currentSpec.roles, _.get(newSpec, \"roles\", []), _.isEqual);\n        spinner.start();\n        const updateOptions = {\n            projectId,\n            instanceId,\n            source: newSource,\n            rolesToAdd: _.get(newSpec, \"roles\", []),\n            rolesToRemove,\n            serviceAccountEmail: existingInstance.serviceAccountEmail,\n            billingRequired: newSpec.billingRequired,\n        };\n        if (!_.isEqual(newParams, currentParams)) {\n            updateOptions.params = newParams;\n        }\n        yield updateHelper_1.update(updateOptions);\n        spinner.stop();\n        utils.logLabeledSuccess(extensionsHelper_1.logPrefix, `successfully updated ${clc.bold(instanceId)}.`);\n        utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`You can view your updated instance in the Firebase console: ${utils.consoleUrl(projectId, `/extensions/instances/${instanceId}?tab=usage`)}`));\n    }\n    catch (err) {\n        if (spinner.isSpinning) {\n            spinner.fail();\n        }\n        if (!(err instanceof error_1.FirebaseError)) {\n            throw new error_1.FirebaseError(`Error occurred while updating the instance: ${err.message}`, {\n                original: err,\n            });\n        }\n        throw err;\n    }\n}));\n"]},"metadata":{},"sourceType":"script"}